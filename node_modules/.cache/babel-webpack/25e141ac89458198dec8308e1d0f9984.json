{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\nimport { debug } from './Debug.js';\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\nimport { EventEmitter } from './EventEmitter.js';\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\n\nexport const ConnectionEmittedEvents = {\n  Disconnected: Symbol('Connection.Disconnected')\n};\n/**\n * @internal\n */\n\nexport class Connection extends EventEmitter {\n  constructor(url, transport, delay = 0) {\n    super();\n    this._lastId = 0;\n    this._sessions = new Map();\n    this._closed = false;\n    this._callbacks = new Map();\n    this._url = url;\n    this._delay = delay;\n    this._transport = transport;\n    this._transport.onmessage = this._onMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  static fromSession(session) {\n    return session._connection;\n  }\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n\n\n  session(sessionId) {\n    return this._sessions.get(sessionId) || null;\n  }\n\n  url() {\n    return this._url;\n  }\n\n  send(method, ...paramArgs) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n\n    const id = this._rawSend({\n      method,\n      params\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Error(),\n        method\n      });\n    });\n  }\n\n  _rawSend(message) {\n    const id = ++this._lastId;\n    const stringifiedMessage = JSON.stringify(Object.assign({}, message, {\n      id\n    }));\n    debugProtocolSend(stringifiedMessage);\n\n    this._transport.send(stringifiedMessage);\n\n    return id;\n  }\n\n  _onMessage(message) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this._delay) yield new Promise(f => setTimeout(f, _this._delay));\n      debugProtocolReceive(message);\n      const object = JSON.parse(message);\n\n      if (object.method === 'Target.attachedToTarget') {\n        const sessionId = object.params.sessionId;\n        const session = new CDPSession(_this, object.params.targetInfo.type, sessionId);\n\n        _this._sessions.set(sessionId, session);\n\n        _this.emit('sessionattached', session);\n\n        const parentSession = _this._sessions.get(object.sessionId);\n\n        if (parentSession) {\n          parentSession.emit('sessionattached', session);\n        }\n      } else if (object.method === 'Target.detachedFromTarget') {\n        const session = _this._sessions.get(object.params.sessionId);\n\n        if (session) {\n          session._onClosed();\n\n          _this._sessions.delete(object.params.sessionId);\n\n          _this.emit('sessiondetached', session);\n\n          const parentSession = _this._sessions.get(object.sessionId);\n\n          if (parentSession) {\n            parentSession.emit('sessiondetached', session);\n          }\n        }\n      }\n\n      if (object.sessionId) {\n        const session = _this._sessions.get(object.sessionId);\n\n        if (session) session._onMessage(object);\n      } else if (object.id) {\n        const callback = _this._callbacks.get(object.id); // Callbacks could be all rejected if someone has called `.dispose()`.\n\n\n        if (callback) {\n          _this._callbacks.delete(object.id);\n\n          if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n        }\n      } else {\n        _this.emit(object.method, object.params);\n      }\n    })();\n  }\n\n  _onClose() {\n    if (this._closed) return;\n    this._closed = true;\n    this._transport.onmessage = null;\n    this._transport.onclose = null;\n\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    for (const session of this._sessions.values()) session._onClosed();\n\n    this._sessions.clear();\n\n    this.emit(ConnectionEmittedEvents.Disconnected);\n  }\n\n  dispose() {\n    this._onClose();\n\n    this._transport.close();\n  }\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n\n\n  createSession(targetInfo) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        sessionId\n      } = yield _this2.send('Target.attachToTarget', {\n        targetId: targetInfo.targetId,\n        flatten: true\n      });\n      return _this2._sessions.get(sessionId);\n    })();\n  }\n\n}\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\n\nexport const CDPSessionEmittedEvents = {\n  Disconnected: Symbol('CDPSession.Disconnected')\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\n\nexport class CDPSession extends EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId) {\n    super();\n    this._callbacks = new Map();\n    this._connection = connection;\n    this._targetType = targetType;\n    this._sessionId = sessionId;\n  }\n\n  connection() {\n    return this._connection;\n  }\n\n  send(method, ...paramArgs) {\n    if (!this._connection) return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`)); // See the comment in Connection#send explaining why we do this.\n\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n\n    const id = this._connection._rawSend({\n      sessionId: this._sessionId,\n      method,\n      params\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Error(),\n        method\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _onMessage(object) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id);\n\n      this._callbacks.delete(object.id);\n\n      if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n    } else {\n      assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n\n\n  detach() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3._connection) throw new Error(`Session already detached. Most likely the ${_this3._targetType} has been closed.`);\n      yield _this3._connection.send('Target.detachFromTarget', {\n        sessionId: _this3._sessionId\n      });\n    })();\n  }\n  /**\n   * @internal\n   */\n\n\n  _onClosed() {\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    this._connection = null;\n    this.emit(CDPSessionEmittedEvents.Disconnected);\n  }\n\n}\n/**\n * @param {!Error} error\n * @param {string} method\n * @param {{error: {message: string, data: any}}} object\n * @returns {!Error}\n */\n\nfunction createProtocolError(error, method, object) {\n  let message = `Protocol error (${method}): ${object.error.message}`;\n  if ('data' in object.error) message += ` ${object.error.data}`;\n  return rewriteError(error, message);\n}\n/**\n * @param {!Error} error\n * @param {string} message\n * @returns {!Error}\n */\n\n\nfunction rewriteError(error, message) {\n  error.message = message;\n  return error;\n} //# sourceMappingURL=Connection.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/Connection.js"],"names":["assert","debug","debugProtocolSend","debugProtocolReceive","EventEmitter","ConnectionEmittedEvents","Disconnected","Symbol","Connection","constructor","url","transport","delay","_lastId","_sessions","Map","_closed","_callbacks","_url","_delay","_transport","onmessage","_onMessage","bind","onclose","_onClose","fromSession","session","_connection","sessionId","get","send","method","paramArgs","params","length","undefined","id","_rawSend","Promise","resolve","reject","set","error","Error","message","stringifiedMessage","JSON","stringify","Object","assign","f","setTimeout","object","parse","CDPSession","targetInfo","type","emit","parentSession","_onClosed","delete","callback","createProtocolError","result","values","rewriteError","clear","dispose","close","createSession","targetId","flatten","CDPSessionEmittedEvents","connection","targetType","_targetType","_sessionId","has","detach","data"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\nimport { debug } from './Debug.js';\nconst debugProtocolSend = debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = debug('puppeteer:protocol:RECV ◀');\nimport { EventEmitter } from './EventEmitter.js';\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\nexport const ConnectionEmittedEvents = {\n    Disconnected: Symbol('Connection.Disconnected'),\n};\n/**\n * @internal\n */\nexport class Connection extends EventEmitter {\n    constructor(url, transport, delay = 0) {\n        super();\n        this._lastId = 0;\n        this._sessions = new Map();\n        this._closed = false;\n        this._callbacks = new Map();\n        this._url = url;\n        this._delay = delay;\n        this._transport = transport;\n        this._transport.onmessage = this._onMessage.bind(this);\n        this._transport.onclose = this._onClose.bind(this);\n    }\n    static fromSession(session) {\n        return session._connection;\n    }\n    /**\n     * @param sessionId - The session id\n     * @returns The current CDP session if it exists\n     */\n    session(sessionId) {\n        return this._sessions.get(sessionId) || null;\n    }\n    url() {\n        return this._url;\n    }\n    send(method, ...paramArgs) {\n        // There is only ever 1 param arg passed, but the Protocol defines it as an\n        // array of 0 or 1 items See this comment:\n        // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n        // which explains why the protocol defines the params this way for better\n        // type-inference.\n        // So now we check if there are any params or not and deal with them accordingly.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = this._rawSend({ method, params });\n        return new Promise((resolve, reject) => {\n            this._callbacks.set(id, { resolve, reject, error: new Error(), method });\n        });\n    }\n    _rawSend(message) {\n        const id = ++this._lastId;\n        const stringifiedMessage = JSON.stringify(Object.assign({}, message, { id }));\n        debugProtocolSend(stringifiedMessage);\n        this._transport.send(stringifiedMessage);\n        return id;\n    }\n    async _onMessage(message) {\n        if (this._delay)\n            await new Promise((f) => setTimeout(f, this._delay));\n        debugProtocolReceive(message);\n        const object = JSON.parse(message);\n        if (object.method === 'Target.attachedToTarget') {\n            const sessionId = object.params.sessionId;\n            const session = new CDPSession(this, object.params.targetInfo.type, sessionId);\n            this._sessions.set(sessionId, session);\n            this.emit('sessionattached', session);\n            const parentSession = this._sessions.get(object.sessionId);\n            if (parentSession) {\n                parentSession.emit('sessionattached', session);\n            }\n        }\n        else if (object.method === 'Target.detachedFromTarget') {\n            const session = this._sessions.get(object.params.sessionId);\n            if (session) {\n                session._onClosed();\n                this._sessions.delete(object.params.sessionId);\n                this.emit('sessiondetached', session);\n                const parentSession = this._sessions.get(object.sessionId);\n                if (parentSession) {\n                    parentSession.emit('sessiondetached', session);\n                }\n            }\n        }\n        if (object.sessionId) {\n            const session = this._sessions.get(object.sessionId);\n            if (session)\n                session._onMessage(object);\n        }\n        else if (object.id) {\n            const callback = this._callbacks.get(object.id);\n            // Callbacks could be all rejected if someone has called `.dispose()`.\n            if (callback) {\n                this._callbacks.delete(object.id);\n                if (object.error)\n                    callback.reject(createProtocolError(callback.error, callback.method, object));\n                else\n                    callback.resolve(object.result);\n            }\n        }\n        else {\n            this.emit(object.method, object.params);\n        }\n    }\n    _onClose() {\n        if (this._closed)\n            return;\n        this._closed = true;\n        this._transport.onmessage = null;\n        this._transport.onclose = null;\n        for (const callback of this._callbacks.values())\n            callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n        this._callbacks.clear();\n        for (const session of this._sessions.values())\n            session._onClosed();\n        this._sessions.clear();\n        this.emit(ConnectionEmittedEvents.Disconnected);\n    }\n    dispose() {\n        this._onClose();\n        this._transport.close();\n    }\n    /**\n     * @param targetInfo - The target info\n     * @returns The CDP session that is created\n     */\n    async createSession(targetInfo) {\n        const { sessionId } = await this.send('Target.attachToTarget', {\n            targetId: targetInfo.targetId,\n            flatten: true,\n        });\n        return this._sessions.get(sessionId);\n    }\n}\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\nexport const CDPSessionEmittedEvents = {\n    Disconnected: Symbol('CDPSession.Disconnected'),\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\nexport class CDPSession extends EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(connection, targetType, sessionId) {\n        super();\n        this._callbacks = new Map();\n        this._connection = connection;\n        this._targetType = targetType;\n        this._sessionId = sessionId;\n    }\n    connection() {\n        return this._connection;\n    }\n    send(method, ...paramArgs) {\n        if (!this._connection)\n            return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`));\n        // See the comment in Connection#send explaining why we do this.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = this._connection._rawSend({\n            sessionId: this._sessionId,\n            method,\n            params,\n        });\n        return new Promise((resolve, reject) => {\n            this._callbacks.set(id, { resolve, reject, error: new Error(), method });\n        });\n    }\n    /**\n     * @internal\n     */\n    _onMessage(object) {\n        if (object.id && this._callbacks.has(object.id)) {\n            const callback = this._callbacks.get(object.id);\n            this._callbacks.delete(object.id);\n            if (object.error)\n                callback.reject(createProtocolError(callback.error, callback.method, object));\n            else\n                callback.resolve(object.result);\n        }\n        else {\n            assert(!object.id);\n            this.emit(object.method, object.params);\n        }\n    }\n    /**\n     * Detaches the cdpSession from the target. Once detached, the cdpSession object\n     * won't emit any events and can't be used to send messages.\n     */\n    async detach() {\n        if (!this._connection)\n            throw new Error(`Session already detached. Most likely the ${this._targetType} has been closed.`);\n        await this._connection.send('Target.detachFromTarget', {\n            sessionId: this._sessionId,\n        });\n    }\n    /**\n     * @internal\n     */\n    _onClosed() {\n        for (const callback of this._callbacks.values())\n            callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n        this._callbacks.clear();\n        this._connection = null;\n        this.emit(CDPSessionEmittedEvents.Disconnected);\n    }\n}\n/**\n * @param {!Error} error\n * @param {string} method\n * @param {{error: {message: string, data: any}}} object\n * @returns {!Error}\n */\nfunction createProtocolError(error, method, object) {\n    let message = `Protocol error (${method}): ${object.error.message}`;\n    if ('data' in object.error)\n        message += ` ${object.error.data}`;\n    return rewriteError(error, message);\n}\n/**\n * @param {!Error} error\n * @param {string} message\n * @returns {!Error}\n */\nfunction rewriteError(error, message) {\n    error.message = message;\n    return error;\n}\n//# sourceMappingURL=Connection.js.map"]},"metadata":{},"sourceType":"module"}