{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nexport class Accessibility {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._client = client;\n  }\n  /**\n   * Captures the current state of the accessibility tree.\n   * The returned object represents the root accessible node of the page.\n   *\n   * @remarks\n   *\n   * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n   * most platforms and by most screen readers. Puppeteer will discard them as\n   * well for an easier to process tree, unless `interestingOnly` is set to\n   * `false`.\n   *\n   * @example\n   * An example of dumping the entire accessibility tree:\n   * ```js\n   * const snapshot = await page.accessibility.snapshot();\n   * console.log(snapshot);\n   * ```\n   *\n   * @example\n   * An example of logging the focused node's name:\n   * ```js\n   * const snapshot = await page.accessibility.snapshot();\n   * const node = findFocusedNode(snapshot);\n   * console.log(node && node.name);\n   *\n   * function findFocusedNode(node) {\n   *   if (node.focused)\n   *     return node;\n   *   for (const child of node.children || []) {\n   *     const foundNode = findFocusedNode(child);\n   *     return foundNode;\n   *   }\n   *   return null;\n   * }\n   * ```\n   *\n   * @returns An AXNode object representing the snapshot.\n   *\n   */\n\n\n  snapshot(options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        interestingOnly = true,\n        root = null\n      } = options;\n      const {\n        nodes\n      } = yield _this._client.send('Accessibility.getFullAXTree');\n      let backendNodeId = null;\n\n      if (root) {\n        const {\n          node\n        } = yield _this._client.send('DOM.describeNode', {\n          objectId: root._remoteObject.objectId\n        });\n        backendNodeId = node.backendNodeId;\n      }\n\n      const defaultRoot = AXNode.createTree(nodes);\n      let needle = defaultRoot;\n\n      if (backendNodeId) {\n        needle = defaultRoot.find(node => node.payload.backendDOMNodeId === backendNodeId);\n        if (!needle) return null;\n      }\n\n      if (!interestingOnly) return _this.serializeTree(needle)[0];\n      const interestingNodes = new Set();\n\n      _this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n\n      if (!interestingNodes.has(needle)) return null;\n      return _this.serializeTree(needle, interestingNodes)[0];\n    })();\n  }\n\n  serializeTree(node, interestingNodes) {\n    const children = [];\n\n    for (const child of node.children) children.push(...this.serializeTree(child, interestingNodes));\n\n    if (interestingNodes && !interestingNodes.has(node)) return children;\n    const serializedNode = node.serialize();\n    if (children.length) serializedNode.children = children;\n    return [serializedNode];\n  }\n\n  collectInterestingNodes(collection, node, insideControl) {\n    if (node.isInteresting(insideControl)) collection.add(node);\n    if (node.isLeafNode()) return;\n    insideControl = insideControl || node.isControl();\n\n    for (const child of node.children) this.collectInterestingNodes(collection, child, insideControl);\n  }\n\n}\n\nclass AXNode {\n  constructor(payload) {\n    this.children = [];\n    this._richlyEditable = false;\n    this._editable = false;\n    this._focusable = false;\n    this._hidden = false;\n    this.payload = payload;\n    this._name = this.payload.name ? this.payload.name.value : '';\n    this._role = this.payload.role ? this.payload.role.value : 'Unknown';\n    this._ignored = this.payload.ignored;\n\n    for (const property of this.payload.properties || []) {\n      if (property.name === 'editable') {\n        this._richlyEditable = property.value.value === 'richtext';\n        this._editable = true;\n      }\n\n      if (property.name === 'focusable') this._focusable = property.value.value;\n      if (property.name === 'hidden') this._hidden = property.value.value;\n    }\n  }\n\n  _isPlainTextField() {\n    if (this._richlyEditable) return false;\n    if (this._editable) return true;\n    return this._role === 'textbox' || this._role === 'searchbox';\n  }\n\n  _isTextOnlyObject() {\n    const role = this._role;\n    return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n  }\n\n  _hasFocusableChild() {\n    if (this._cachedHasFocusableChild === undefined) {\n      this._cachedHasFocusableChild = false;\n\n      for (const child of this.children) {\n        if (child._focusable || child._hasFocusableChild()) {\n          this._cachedHasFocusableChild = true;\n          break;\n        }\n      }\n    }\n\n    return this._cachedHasFocusableChild;\n  }\n\n  find(predicate) {\n    if (predicate(this)) return this;\n\n    for (const child of this.children) {\n      const result = child.find(predicate);\n      if (result) return result;\n    }\n\n    return null;\n  }\n\n  isLeafNode() {\n    if (!this.children.length) return true; // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n\n    if (this._isPlainTextField() || this._isTextOnlyObject()) return true; // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n\n    switch (this._role) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n\n      default:\n        break;\n    } // Here and below: Android heuristics\n\n\n    if (this._hasFocusableChild()) return false;\n    if (this._focusable && this._name) return true;\n    if (this._role === 'heading' && this._name) return true;\n    return false;\n  }\n\n  isControl() {\n    switch (this._role) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n      case 'treeitem':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  isInteresting(insideControl) {\n    const role = this._role;\n    if (role === 'Ignored' || this._hidden || this._ignored) return false;\n    if (this._focusable || this._richlyEditable) return true; // If it's not focusable but has a control role, then it's interesting.\n\n    if (this.isControl()) return true; // A non focusable child of a control is not interesting\n\n    if (insideControl) return false;\n    return this.isLeafNode() && !!this._name;\n  }\n\n  serialize() {\n    const properties = new Map();\n\n    for (const property of this.payload.properties || []) properties.set(property.name.toLowerCase(), property.value.value);\n\n    if (this.payload.name) properties.set('name', this.payload.name.value);\n    if (this.payload.value) properties.set('value', this.payload.value.value);\n    if (this.payload.description) properties.set('description', this.payload.description.value);\n    const node = {\n      role: this._role\n    };\n    const userStringProperties = ['name', 'value', 'description', 'keyshortcuts', 'roledescription', 'valuetext'];\n\n    const getUserStringPropertyValue = key => properties.get(key);\n\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty)) continue;\n      node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n    }\n\n    const booleanProperties = ['disabled', 'expanded', 'focused', 'modal', 'multiline', 'multiselectable', 'readonly', 'required', 'selected'];\n\n    const getBooleanPropertyValue = key => properties.get(key);\n\n    for (const booleanProperty of booleanProperties) {\n      // RootWebArea's treat focus differently than other nodes. They report whether\n      // their frame  has focus, not whether focus is specifically on the root\n      // node.\n      if (booleanProperty === 'focused' && this._role === 'RootWebArea') continue;\n      const value = getBooleanPropertyValue(booleanProperty);\n      if (!value) continue;\n      node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n    }\n\n    const tristateProperties = ['checked', 'pressed'];\n\n    for (const tristateProperty of tristateProperties) {\n      if (!properties.has(tristateProperty)) continue;\n      const value = properties.get(tristateProperty);\n      node[tristateProperty] = value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n    }\n\n    const numericalProperties = ['level', 'valuemax', 'valuemin'];\n\n    const getNumericalPropertyValue = key => properties.get(key);\n\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty)) continue;\n      node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n    }\n\n    const tokenProperties = ['autocomplete', 'haspopup', 'invalid', 'orientation'];\n\n    const getTokenPropertyValue = key => properties.get(key);\n\n    for (const tokenProperty of tokenProperties) {\n      const value = getTokenPropertyValue(tokenProperty);\n      if (!value || value === 'false') continue;\n      node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n    }\n\n    return node;\n  }\n\n  static createTree(payloads) {\n    const nodeById = new Map();\n\n    for (const payload of payloads) nodeById.set(payload.nodeId, new AXNode(payload));\n\n    for (const node of nodeById.values()) {\n      for (const childId of node.payload.childIds || []) node.children.push(nodeById.get(childId));\n    }\n\n    return nodeById.values().next().value;\n  }\n\n} //# sourceMappingURL=Accessibility.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/Accessibility.js"],"names":["Accessibility","constructor","client","_client","snapshot","options","interestingOnly","root","nodes","send","backendNodeId","node","objectId","_remoteObject","defaultRoot","AXNode","createTree","needle","find","payload","backendDOMNodeId","serializeTree","interestingNodes","Set","collectInterestingNodes","has","children","child","push","serializedNode","serialize","length","collection","insideControl","isInteresting","add","isLeafNode","isControl","_richlyEditable","_editable","_focusable","_hidden","_name","name","value","_role","role","_ignored","ignored","property","properties","_isPlainTextField","_isTextOnlyObject","_hasFocusableChild","_cachedHasFocusableChild","undefined","predicate","result","Map","set","toLowerCase","description","userStringProperties","getUserStringPropertyValue","key","get","userStringProperty","booleanProperties","getBooleanPropertyValue","booleanProperty","tristateProperties","tristateProperty","numericalProperties","getNumericalPropertyValue","numericalProperty","tokenProperties","getTokenPropertyValue","tokenProperty","payloads","nodeById","nodeId","values","childId","childIds","next"],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\nexport class Accessibility {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        this._client = client;\n    }\n    /**\n     * Captures the current state of the accessibility tree.\n     * The returned object represents the root accessible node of the page.\n     *\n     * @remarks\n     *\n     * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n     * most platforms and by most screen readers. Puppeteer will discard them as\n     * well for an easier to process tree, unless `interestingOnly` is set to\n     * `false`.\n     *\n     * @example\n     * An example of dumping the entire accessibility tree:\n     * ```js\n     * const snapshot = await page.accessibility.snapshot();\n     * console.log(snapshot);\n     * ```\n     *\n     * @example\n     * An example of logging the focused node's name:\n     * ```js\n     * const snapshot = await page.accessibility.snapshot();\n     * const node = findFocusedNode(snapshot);\n     * console.log(node && node.name);\n     *\n     * function findFocusedNode(node) {\n     *   if (node.focused)\n     *     return node;\n     *   for (const child of node.children || []) {\n     *     const foundNode = findFocusedNode(child);\n     *     return foundNode;\n     *   }\n     *   return null;\n     * }\n     * ```\n     *\n     * @returns An AXNode object representing the snapshot.\n     *\n     */\n    async snapshot(options = {}) {\n        const { interestingOnly = true, root = null } = options;\n        const { nodes } = await this._client.send('Accessibility.getFullAXTree');\n        let backendNodeId = null;\n        if (root) {\n            const { node } = await this._client.send('DOM.describeNode', {\n                objectId: root._remoteObject.objectId,\n            });\n            backendNodeId = node.backendNodeId;\n        }\n        const defaultRoot = AXNode.createTree(nodes);\n        let needle = defaultRoot;\n        if (backendNodeId) {\n            needle = defaultRoot.find((node) => node.payload.backendDOMNodeId === backendNodeId);\n            if (!needle)\n                return null;\n        }\n        if (!interestingOnly)\n            return this.serializeTree(needle)[0];\n        const interestingNodes = new Set();\n        this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n        if (!interestingNodes.has(needle))\n            return null;\n        return this.serializeTree(needle, interestingNodes)[0];\n    }\n    serializeTree(node, interestingNodes) {\n        const children = [];\n        for (const child of node.children)\n            children.push(...this.serializeTree(child, interestingNodes));\n        if (interestingNodes && !interestingNodes.has(node))\n            return children;\n        const serializedNode = node.serialize();\n        if (children.length)\n            serializedNode.children = children;\n        return [serializedNode];\n    }\n    collectInterestingNodes(collection, node, insideControl) {\n        if (node.isInteresting(insideControl))\n            collection.add(node);\n        if (node.isLeafNode())\n            return;\n        insideControl = insideControl || node.isControl();\n        for (const child of node.children)\n            this.collectInterestingNodes(collection, child, insideControl);\n    }\n}\nclass AXNode {\n    constructor(payload) {\n        this.children = [];\n        this._richlyEditable = false;\n        this._editable = false;\n        this._focusable = false;\n        this._hidden = false;\n        this.payload = payload;\n        this._name = this.payload.name ? this.payload.name.value : '';\n        this._role = this.payload.role ? this.payload.role.value : 'Unknown';\n        this._ignored = this.payload.ignored;\n        for (const property of this.payload.properties || []) {\n            if (property.name === 'editable') {\n                this._richlyEditable = property.value.value === 'richtext';\n                this._editable = true;\n            }\n            if (property.name === 'focusable')\n                this._focusable = property.value.value;\n            if (property.name === 'hidden')\n                this._hidden = property.value.value;\n        }\n    }\n    _isPlainTextField() {\n        if (this._richlyEditable)\n            return false;\n        if (this._editable)\n            return true;\n        return this._role === 'textbox' || this._role === 'searchbox';\n    }\n    _isTextOnlyObject() {\n        const role = this._role;\n        return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n    }\n    _hasFocusableChild() {\n        if (this._cachedHasFocusableChild === undefined) {\n            this._cachedHasFocusableChild = false;\n            for (const child of this.children) {\n                if (child._focusable || child._hasFocusableChild()) {\n                    this._cachedHasFocusableChild = true;\n                    break;\n                }\n            }\n        }\n        return this._cachedHasFocusableChild;\n    }\n    find(predicate) {\n        if (predicate(this))\n            return this;\n        for (const child of this.children) {\n            const result = child.find(predicate);\n            if (result)\n                return result;\n        }\n        return null;\n    }\n    isLeafNode() {\n        if (!this.children.length)\n            return true;\n        // These types of objects may have children that we use as internal\n        // implementation details, but we want to expose them as leaves to platform\n        // accessibility APIs because screen readers might be confused if they find\n        // any children.\n        if (this._isPlainTextField() || this._isTextOnlyObject())\n            return true;\n        // Roles whose children are only presentational according to the ARIA and\n        // HTML5 Specs should be hidden from screen readers.\n        // (Note that whilst ARIA buttons can have only presentational children, HTML5\n        // buttons are allowed to have content.)\n        switch (this._role) {\n            case 'doc-cover':\n            case 'graphics-symbol':\n            case 'img':\n            case 'Meter':\n            case 'scrollbar':\n            case 'slider':\n            case 'separator':\n            case 'progressbar':\n                return true;\n            default:\n                break;\n        }\n        // Here and below: Android heuristics\n        if (this._hasFocusableChild())\n            return false;\n        if (this._focusable && this._name)\n            return true;\n        if (this._role === 'heading' && this._name)\n            return true;\n        return false;\n    }\n    isControl() {\n        switch (this._role) {\n            case 'button':\n            case 'checkbox':\n            case 'ColorWell':\n            case 'combobox':\n            case 'DisclosureTriangle':\n            case 'listbox':\n            case 'menu':\n            case 'menubar':\n            case 'menuitem':\n            case 'menuitemcheckbox':\n            case 'menuitemradio':\n            case 'radio':\n            case 'scrollbar':\n            case 'searchbox':\n            case 'slider':\n            case 'spinbutton':\n            case 'switch':\n            case 'tab':\n            case 'textbox':\n            case 'tree':\n            case 'treeitem':\n                return true;\n            default:\n                return false;\n        }\n    }\n    isInteresting(insideControl) {\n        const role = this._role;\n        if (role === 'Ignored' || this._hidden || this._ignored)\n            return false;\n        if (this._focusable || this._richlyEditable)\n            return true;\n        // If it's not focusable but has a control role, then it's interesting.\n        if (this.isControl())\n            return true;\n        // A non focusable child of a control is not interesting\n        if (insideControl)\n            return false;\n        return this.isLeafNode() && !!this._name;\n    }\n    serialize() {\n        const properties = new Map();\n        for (const property of this.payload.properties || [])\n            properties.set(property.name.toLowerCase(), property.value.value);\n        if (this.payload.name)\n            properties.set('name', this.payload.name.value);\n        if (this.payload.value)\n            properties.set('value', this.payload.value.value);\n        if (this.payload.description)\n            properties.set('description', this.payload.description.value);\n        const node = {\n            role: this._role,\n        };\n        const userStringProperties = [\n            'name',\n            'value',\n            'description',\n            'keyshortcuts',\n            'roledescription',\n            'valuetext',\n        ];\n        const getUserStringPropertyValue = (key) => properties.get(key);\n        for (const userStringProperty of userStringProperties) {\n            if (!properties.has(userStringProperty))\n                continue;\n            node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n        }\n        const booleanProperties = [\n            'disabled',\n            'expanded',\n            'focused',\n            'modal',\n            'multiline',\n            'multiselectable',\n            'readonly',\n            'required',\n            'selected',\n        ];\n        const getBooleanPropertyValue = (key) => properties.get(key);\n        for (const booleanProperty of booleanProperties) {\n            // RootWebArea's treat focus differently than other nodes. They report whether\n            // their frame  has focus, not whether focus is specifically on the root\n            // node.\n            if (booleanProperty === 'focused' && this._role === 'RootWebArea')\n                continue;\n            const value = getBooleanPropertyValue(booleanProperty);\n            if (!value)\n                continue;\n            node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n        }\n        const tristateProperties = ['checked', 'pressed'];\n        for (const tristateProperty of tristateProperties) {\n            if (!properties.has(tristateProperty))\n                continue;\n            const value = properties.get(tristateProperty);\n            node[tristateProperty] =\n                value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n        }\n        const numericalProperties = [\n            'level',\n            'valuemax',\n            'valuemin',\n        ];\n        const getNumericalPropertyValue = (key) => properties.get(key);\n        for (const numericalProperty of numericalProperties) {\n            if (!properties.has(numericalProperty))\n                continue;\n            node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n        }\n        const tokenProperties = [\n            'autocomplete',\n            'haspopup',\n            'invalid',\n            'orientation',\n        ];\n        const getTokenPropertyValue = (key) => properties.get(key);\n        for (const tokenProperty of tokenProperties) {\n            const value = getTokenPropertyValue(tokenProperty);\n            if (!value || value === 'false')\n                continue;\n            node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n        }\n        return node;\n    }\n    static createTree(payloads) {\n        const nodeById = new Map();\n        for (const payload of payloads)\n            nodeById.set(payload.nodeId, new AXNode(payload));\n        for (const node of nodeById.values()) {\n            for (const childId of node.payload.childIds || [])\n                node.children.push(nodeById.get(childId));\n        }\n        return nodeById.values().next().value;\n    }\n}\n//# sourceMappingURL=Accessibility.js.map"]},"metadata":{},"sourceType":"module"}