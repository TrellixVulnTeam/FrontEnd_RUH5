{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from './EventEmitter.js';\nimport { debugError } from './helper.js';\nimport { ExecutionContext } from './ExecutionContext.js';\nimport { JSHandle } from './JSHandle.js';\n/**\n * The WebWorker class represents a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker}.\n *\n * @remarks\n * The events `workercreated` and `workerdestroyed` are emitted on the page\n * object to signal the worker lifecycle.\n *\n * @example\n * ```js\n * page.on('workercreated', worker => console.log('Worker created: ' + worker.url()));\n * page.on('workerdestroyed', worker => console.log('Worker destroyed: ' + worker.url()));\n *\n * console.log('Current workers:');\n * for (const worker of page.workers()) {\n *   console.log('  ' + worker.url());\n * }\n * ```\n *\n * @public\n */\n\nexport class WebWorker extends EventEmitter {\n  /**\n   *\n   * @internal\n   */\n  constructor(client, url, consoleAPICalled, exceptionThrown) {\n    var _this;\n\n    super();\n    _this = this;\n    this._client = client;\n    this._url = url;\n    this._executionContextPromise = new Promise(x => this._executionContextCallback = x);\n    let jsHandleFactory;\n\n    this._client.once('Runtime.executionContextCreated', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (event) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        jsHandleFactory = remoteObject => new JSHandle(executionContext, client, remoteObject);\n\n        const executionContext = new ExecutionContext(client, event.context, null);\n\n        _this._executionContextCallback(executionContext);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()); // This might fail if the target is closed before we receive all execution contexts.\n\n\n    this._client.send('Runtime.enable').catch(debugError);\n\n    this._client.on('Runtime.consoleAPICalled', event => consoleAPICalled(event.type, event.args.map(jsHandleFactory), event.stackTrace));\n\n    this._client.on('Runtime.exceptionThrown', exception => exceptionThrown(exception.exceptionDetails));\n  }\n  /**\n   * @returns The URL of this web worker.\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * Returns the ExecutionContext the WebWorker runs in\n   * @returns The ExecutionContext the web worker runs in.\n   */\n\n\n  executionContext() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this2._executionContextPromise;\n    })();\n  }\n  /**\n   * If the function passed to the `worker.evaluate` returns a Promise, then\n   * `worker.evaluate` would wait for the promise to resolve and return its\n   * value. If the function passed to the `worker.evaluate` returns a\n   * non-serializable value, then `worker.evaluate` resolves to `undefined`.\n   * DevTools Protocol also supports transferring some additional values that\n   * are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and\n   * bigint literals.\n   * Shortcut for `await worker.executionContext()).evaluate(pageFunction, ...args)`.\n   *\n   * @param pageFunction - Function to be evaluated in the worker context.\n   * @param args - Arguments to pass to `pageFunction`.\n   * @returns Promise which resolves to the return value of `pageFunction`.\n   */\n\n\n  evaluate(pageFunction, ...args) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this3._executionContextPromise).evaluate(pageFunction, ...args);\n    })();\n  }\n  /**\n   * The only difference between `worker.evaluate` and `worker.evaluateHandle`\n   * is that `worker.evaluateHandle` returns in-page object (JSHandle). If the\n   * function passed to the `worker.evaluateHandle` returns a `Promise`, then\n   * `worker.evaluateHandle` would wait for the promise to resolve and return\n   * its value. Shortcut for\n   * `await worker.executionContext()).evaluateHandle(pageFunction, ...args)`\n   *\n   * @param pageFunction - Function to be evaluated in the page context.\n   * @param args - Arguments to pass to `pageFunction`.\n   * @returns Promise which resolves to the return value of `pageFunction`.\n   */\n\n\n  evaluateHandle(pageFunction, ...args) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this4._executionContextPromise).evaluateHandle(pageFunction, ...args);\n    })();\n  }\n\n} //# sourceMappingURL=WebWorker.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/WebWorker.js"],"names":["EventEmitter","debugError","ExecutionContext","JSHandle","WebWorker","constructor","client","url","consoleAPICalled","exceptionThrown","_client","_url","_executionContextPromise","Promise","x","_executionContextCallback","jsHandleFactory","once","event","remoteObject","executionContext","context","send","catch","on","type","args","map","stackTrace","exception","exceptionDetails","evaluate","pageFunction","evaluateHandle"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAN,SAAwBJ,YAAxB,CAAqC;AACxC;AACJ;AACA;AACA;AACIK,EAAAA,WAAW,CAACC,MAAD,EAASC,GAAT,EAAcC,gBAAd,EAAgCC,eAAhC,EAAiD;AAAA;;AACxD,WADwD;AAAA;AAExD,SAAKC,OAAL,GAAeJ,MAAf;AACA,SAAKK,IAAL,GAAYJ,GAAZ;AACA,SAAKK,wBAAL,GAAgC,IAAIC,OAAJ,CAAaC,CAAD,IAAQ,KAAKC,yBAAL,GAAiCD,CAArD,CAAhC;AACA,QAAIE,eAAJ;;AACA,SAAKN,OAAL,CAAaO,IAAb,CAAkB,iCAAlB;AAAA,mCAAqD,WAAOC,KAAP,EAAiB;AAClE;AACAF,QAAAA,eAAe,GAAIG,YAAD,IAAkB,IAAIhB,QAAJ,CAAaiB,gBAAb,EAA+Bd,MAA/B,EAAuCa,YAAvC,CAApC;;AACA,cAAMC,gBAAgB,GAAG,IAAIlB,gBAAJ,CAAqBI,MAArB,EAA6BY,KAAK,CAACG,OAAnC,EAA4C,IAA5C,CAAzB;;AACA,QAAA,KAAI,CAACN,yBAAL,CAA+BK,gBAA/B;AACH,OALD;;AAAA;AAAA;AAAA;AAAA,SANwD,CAYxD;;;AACA,SAAKV,OAAL,CAAaY,IAAb,CAAkB,gBAAlB,EAAoCC,KAApC,CAA0CtB,UAA1C;;AACA,SAAKS,OAAL,CAAac,EAAb,CAAgB,0BAAhB,EAA6CN,KAAD,IAAWV,gBAAgB,CAACU,KAAK,CAACO,IAAP,EAAaP,KAAK,CAACQ,IAAN,CAAWC,GAAX,CAAeX,eAAf,CAAb,EAA8CE,KAAK,CAACU,UAApD,CAAvE;;AACA,SAAKlB,OAAL,CAAac,EAAb,CAAgB,yBAAhB,EAA4CK,SAAD,IAAepB,eAAe,CAACoB,SAAS,CAACC,gBAAX,CAAzE;AACH;AACD;AACJ;AACA;;;AACIvB,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKI,IAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACUS,EAAAA,gBAAgB,GAAG;AAAA;;AAAA;AACrB,aAAO,MAAI,CAACR,wBAAZ;AADqB;AAExB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUmB,EAAAA,QAAQ,CAACC,YAAD,EAAe,GAAGN,IAAlB,EAAwB;AAAA;;AAAA;AAClC,aAAO,OAAO,MAAI,CAACd,wBAAZ,EAAsCmB,QAAtC,CAA+CC,YAA/C,EAA6D,GAAGN,IAAhE,CAAP;AADkC;AAErC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUO,EAAAA,cAAc,CAACD,YAAD,EAAe,GAAGN,IAAlB,EAAwB;AAAA;;AAAA;AACxC,aAAO,OAAO,MAAI,CAACd,wBAAZ,EAAsCqB,cAAtC,CAAqDD,YAArD,EAAmE,GAAGN,IAAtE,CAAP;AADwC;AAE3C;;AAlEuC,C,CAoE5C","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { EventEmitter } from './EventEmitter.js';\nimport { debugError } from './helper.js';\nimport { ExecutionContext } from './ExecutionContext.js';\nimport { JSHandle } from './JSHandle.js';\n/**\n * The WebWorker class represents a\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker}.\n *\n * @remarks\n * The events `workercreated` and `workerdestroyed` are emitted on the page\n * object to signal the worker lifecycle.\n *\n * @example\n * ```js\n * page.on('workercreated', worker => console.log('Worker created: ' + worker.url()));\n * page.on('workerdestroyed', worker => console.log('Worker destroyed: ' + worker.url()));\n *\n * console.log('Current workers:');\n * for (const worker of page.workers()) {\n *   console.log('  ' + worker.url());\n * }\n * ```\n *\n * @public\n */\nexport class WebWorker extends EventEmitter {\n    /**\n     *\n     * @internal\n     */\n    constructor(client, url, consoleAPICalled, exceptionThrown) {\n        super();\n        this._client = client;\n        this._url = url;\n        this._executionContextPromise = new Promise((x) => (this._executionContextCallback = x));\n        let jsHandleFactory;\n        this._client.once('Runtime.executionContextCreated', async (event) => {\n            // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n            jsHandleFactory = (remoteObject) => new JSHandle(executionContext, client, remoteObject);\n            const executionContext = new ExecutionContext(client, event.context, null);\n            this._executionContextCallback(executionContext);\n        });\n        // This might fail if the target is closed before we receive all execution contexts.\n        this._client.send('Runtime.enable').catch(debugError);\n        this._client.on('Runtime.consoleAPICalled', (event) => consoleAPICalled(event.type, event.args.map(jsHandleFactory), event.stackTrace));\n        this._client.on('Runtime.exceptionThrown', (exception) => exceptionThrown(exception.exceptionDetails));\n    }\n    /**\n     * @returns The URL of this web worker.\n     */\n    url() {\n        return this._url;\n    }\n    /**\n     * Returns the ExecutionContext the WebWorker runs in\n     * @returns The ExecutionContext the web worker runs in.\n     */\n    async executionContext() {\n        return this._executionContextPromise;\n    }\n    /**\n     * If the function passed to the `worker.evaluate` returns a Promise, then\n     * `worker.evaluate` would wait for the promise to resolve and return its\n     * value. If the function passed to the `worker.evaluate` returns a\n     * non-serializable value, then `worker.evaluate` resolves to `undefined`.\n     * DevTools Protocol also supports transferring some additional values that\n     * are not serializable by `JSON`: `-0`, `NaN`, `Infinity`, `-Infinity`, and\n     * bigint literals.\n     * Shortcut for `await worker.executionContext()).evaluate(pageFunction, ...args)`.\n     *\n     * @param pageFunction - Function to be evaluated in the worker context.\n     * @param args - Arguments to pass to `pageFunction`.\n     * @returns Promise which resolves to the return value of `pageFunction`.\n     */\n    async evaluate(pageFunction, ...args) {\n        return (await this._executionContextPromise).evaluate(pageFunction, ...args);\n    }\n    /**\n     * The only difference between `worker.evaluate` and `worker.evaluateHandle`\n     * is that `worker.evaluateHandle` returns in-page object (JSHandle). If the\n     * function passed to the `worker.evaluateHandle` returns a `Promise`, then\n     * `worker.evaluateHandle` would wait for the promise to resolve and return\n     * its value. Shortcut for\n     * `await worker.executionContext()).evaluateHandle(pageFunction, ...args)`\n     *\n     * @param pageFunction - Function to be evaluated in the page context.\n     * @param args - Arguments to pass to `pageFunction`.\n     * @returns Promise which resolves to the return value of `pageFunction`.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return (await this._executionContextPromise).evaluateHandle(pageFunction, ...args);\n    }\n}\n//# sourceMappingURL=WebWorker.js.map"]},"metadata":{},"sourceType":"module"}