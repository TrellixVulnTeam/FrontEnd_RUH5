{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _asyncToGenerator = require(\"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Page = void 0;\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n\nconst Connection_js_1 = require(\"./Connection.js\");\n\nconst Dialog_js_1 = require(\"./Dialog.js\");\n\nconst EmulationManager_js_1 = require(\"./EmulationManager.js\");\n\nconst FrameManager_js_1 = require(\"./FrameManager.js\");\n\nconst Input_js_1 = require(\"./Input.js\");\n\nconst Tracing_js_1 = require(\"./Tracing.js\");\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst Coverage_js_1 = require(\"./Coverage.js\");\n\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\n\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\n\nconst NetworkManager_js_1 = require(\"./NetworkManager.js\");\n\nconst Accessibility_js_1 = require(\"./Accessibility.js\");\n\nconst TimeoutSettings_js_1 = require(\"./TimeoutSettings.js\");\n\nconst FileChooser_js_1 = require(\"./FileChooser.js\");\n\nconst ConsoleMessage_js_1 = require(\"./ConsoleMessage.js\");\n\nconst PDFOptions_js_1 = require(\"./PDFOptions.js\");\n\nconst environment_js_1 = require(\"../environment.js\");\n\nclass ScreenshotTaskQueue {\n  constructor() {\n    this._chain = Promise.resolve(undefined);\n  }\n\n  postTask(task) {\n    const result = this._chain.then(task);\n\n    this._chain = result.catch(() => {});\n    return result;\n  }\n\n}\n/**\n * Page provides methods to interact with a single tab or\n * {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * @example\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n *\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n * @public\n */\n\n\nclass Page extends EventEmitter_js_1.EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(client, target, ignoreHTTPSErrors) {\n    super();\n    this._closed = false;\n    this._timeoutSettings = new TimeoutSettings_js_1.TimeoutSettings();\n    this._pageBindings = new Map();\n    this._javascriptEnabled = true;\n    this._workers = new Map(); // TODO: improve this typedef - it's a function that takes a file chooser or\n    // something?\n\n    this._fileChooserInterceptors = new Set();\n    this._userDragInterceptionEnabled = false;\n    this._client = client;\n    this._target = target;\n    this._keyboard = new Input_js_1.Keyboard(client);\n    this._mouse = new Input_js_1.Mouse(client, this._keyboard);\n    this._touchscreen = new Input_js_1.Touchscreen(client, this._keyboard);\n    this._accessibility = new Accessibility_js_1.Accessibility(client);\n    this._frameManager = new FrameManager_js_1.FrameManager(client, this, ignoreHTTPSErrors, this._timeoutSettings);\n    this._emulationManager = new EmulationManager_js_1.EmulationManager(client);\n    this._tracing = new Tracing_js_1.Tracing(client);\n    this._coverage = new Coverage_js_1.Coverage(client);\n    this._screenshotTaskQueue = new ScreenshotTaskQueue();\n    this._viewport = null;\n    client.on('Target.attachedToTarget', event => {\n      if (event.targetInfo.type !== 'worker' && event.targetInfo.type !== 'iframe') {\n        // If we don't detach from service workers, they will never die.\n        // We still want to attach to workers for emitting events.\n        // We still want to attach to iframes so sessions may interact with them.\n        // We detach from all other types out of an abundance of caution.\n        // See https://source.chromium.org/chromium/chromium/src/+/master:content/browser/devtools/devtools_agent_host_impl.cc?q=f:devtools%20-f:out%20%22::kTypePage%5B%5D%22&ss=chromium\n        // for the complete list of available types.\n        client.send('Target.detachFromTarget', {\n          sessionId: event.sessionId\n        }).catch(helper_js_1.debugError);\n        return;\n      }\n\n      const session = Connection_js_1.Connection.fromSession(client).session(event.sessionId);\n      const worker = new WebWorker_js_1.WebWorker(session, event.targetInfo.url, this._addConsoleMessage.bind(this), this._handleException.bind(this));\n\n      this._workers.set(event.sessionId, worker);\n\n      this.emit(\"workercreated\"\n      /* WorkerCreated */\n      , worker);\n    });\n    client.on('Target.detachedFromTarget', event => {\n      const worker = this._workers.get(event.sessionId);\n\n      if (!worker) return;\n\n      this._workers.delete(event.sessionId);\n\n      this.emit(\"workerdestroyed\"\n      /* WorkerDestroyed */\n      , worker);\n    });\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameAttached, event => this.emit(\"frameattached\"\n    /* FrameAttached */\n    , event));\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameDetached, event => this.emit(\"framedetached\"\n    /* FrameDetached */\n    , event));\n\n    this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameNavigated, event => this.emit(\"framenavigated\"\n    /* FrameNavigated */\n    , event));\n\n    const networkManager = this._frameManager.networkManager();\n\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Request, event => this.emit(\"request\"\n    /* Request */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestServedFromCache, event => this.emit(\"requestservedfromcache\"\n    /* RequestServedFromCache */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Response, event => this.emit(\"response\"\n    /* Response */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFailed, event => this.emit(\"requestfailed\"\n    /* RequestFailed */\n    , event));\n    networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFinished, event => this.emit(\"requestfinished\"\n    /* RequestFinished */\n    , event));\n    this._fileChooserInterceptors = new Set();\n    client.on('Page.domContentEventFired', () => this.emit(\"domcontentloaded\"\n    /* DOMContentLoaded */\n    ));\n    client.on('Page.loadEventFired', () => this.emit(\"load\"\n    /* Load */\n    ));\n    client.on('Runtime.consoleAPICalled', event => this._onConsoleAPI(event));\n    client.on('Runtime.bindingCalled', event => this._onBindingCalled(event));\n    client.on('Page.javascriptDialogOpening', event => this._onDialog(event));\n    client.on('Runtime.exceptionThrown', exception => this._handleException(exception.exceptionDetails));\n    client.on('Inspector.targetCrashed', () => this._onTargetCrashed());\n    client.on('Performance.metrics', event => this._emitMetrics(event));\n    client.on('Log.entryAdded', event => this._onLogEntryAdded(event));\n    client.on('Page.fileChooserOpened', event => this._onFileChooser(event));\n\n    this._target._isClosedPromise.then(() => {\n      this.emit(\"close\"\n      /* Close */\n      );\n      this._closed = true;\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  static create(client, target, ignoreHTTPSErrors, defaultViewport) {\n    return _asyncToGenerator(function* () {\n      const page = new Page(client, target, ignoreHTTPSErrors);\n      yield page._initialize();\n      if (defaultViewport) yield page.setViewport(defaultViewport);\n      return page;\n    })();\n  }\n\n  _initialize() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all([_this._frameManager.initialize(), _this._client.send('Target.setAutoAttach', {\n        autoAttach: true,\n        waitForDebuggerOnStart: false,\n        flatten: true\n      }), _this._client.send('Performance.enable'), _this._client.send('Log.enable')]);\n    })();\n  }\n\n  _onFileChooser(event) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this2._fileChooserInterceptors.size) return;\n\n      const frame = _this2._frameManager.frame(event.frameId);\n\n      const context = yield frame.executionContext();\n      const element = yield context._adoptBackendNodeId(event.backendNodeId);\n      const interceptors = Array.from(_this2._fileChooserInterceptors);\n\n      _this2._fileChooserInterceptors.clear();\n\n      const fileChooser = new FileChooser_js_1.FileChooser(element, event);\n\n      for (const interceptor of interceptors) interceptor.call(null, fileChooser);\n    })();\n  }\n  /**\n   * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n   */\n\n\n  isJavaScriptEnabled() {\n    return this._javascriptEnabled;\n  }\n  /**\n   * Listen to page events.\n   */\n\n\n  on(eventName, handler) {\n    // Note: this method only exists to define the types; we delegate the impl\n    // to EventEmitter.\n    return super.on(eventName, handler);\n  }\n\n  once(eventName, handler) {\n    // Note: this method only exists to define the types; we delegate the impl\n    // to EventEmitter.\n    return super.once(eventName, handler);\n  }\n  /**\n   * This method is typically coupled with an action that triggers file\n   * choosing. The following example clicks a button that issues a file chooser\n   * and then responds with `/tmp/myfile.pdf` as if a user has selected this file.\n   *\n   * ```js\n   * const [fileChooser] = await Promise.all([\n   * page.waitForFileChooser(),\n   * page.click('#upload-file-button'),\n   * // some button that triggers file selection\n   * ]);\n   * await fileChooser.accept(['/tmp/myfile.pdf']);\n   * ```\n   *\n   * NOTE: This must be called before the file chooser is launched. It will not\n   * return a currently active file chooser.\n   * @param options - Optional waiting parameters\n   * @returns Resolves after a page requests a file picker.\n   * @remarks\n   * NOTE: In non-headless Chromium, this method results in the native file picker\n   * dialog `not showing up` for the user.\n   */\n\n\n  waitForFileChooser(options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3._fileChooserInterceptors.size) yield _this3._client.send('Page.setInterceptFileChooserDialog', {\n        enabled: true\n      });\n      const {\n        timeout = _this3._timeoutSettings.timeout()\n      } = options;\n      let callback;\n      const promise = new Promise(x => callback = x);\n\n      _this3._fileChooserInterceptors.add(callback);\n\n      return helper_js_1.helper.waitWithTimeout(promise, 'waiting for file chooser', timeout).catch(error => {\n        _this3._fileChooserInterceptors.delete(callback);\n\n        throw error;\n      });\n    })();\n  }\n  /**\n   * Sets the page's geolocation.\n   * @remarks\n   * NOTE: Consider using {@link BrowserContext.overridePermissions} to grant\n   * permissions for the page to read its geolocation.\n   * @example\n   * ```js\n   * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n   * ```\n   */\n\n\n  setGeolocation(options) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        longitude,\n        latitude,\n        accuracy = 0\n      } = options;\n      if (longitude < -180 || longitude > 180) throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n      if (latitude < -90 || latitude > 90) throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n      if (accuracy < 0) throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n      yield _this4._client.send('Emulation.setGeolocationOverride', {\n        longitude,\n        latitude,\n        accuracy\n      });\n    })();\n  }\n  /**\n   * @returns A target this page was created from.\n   */\n\n\n  target() {\n    return this._target;\n  }\n  /**\n   * Get the browser the page belongs to.\n   */\n\n\n  browser() {\n    return this._target.browser();\n  }\n  /**\n   * Get the browser context that the page belongs to.\n   */\n\n\n  browserContext() {\n    return this._target.browserContext();\n  }\n\n  _onTargetCrashed() {\n    this.emit('error', new Error('Page crashed!'));\n  }\n\n  _onLogEntryAdded(event) {\n    const {\n      level,\n      text,\n      args,\n      source,\n      url,\n      lineNumber\n    } = event.entry;\n    if (args) args.map(arg => helper_js_1.helper.releaseObject(this._client, arg));\n    if (source !== 'worker') this.emit(\"console\"\n    /* Console */\n    , new ConsoleMessage_js_1.ConsoleMessage(level, text, [], [{\n      url,\n      lineNumber\n    }]));\n  }\n  /**\n   * @returns The page's main frame.\n   * @remarks\n   * Page is guaranteed to have a main frame which persists during navigations.\n   */\n\n\n  mainFrame() {\n    return this._frameManager.mainFrame();\n  }\n\n  get keyboard() {\n    return this._keyboard;\n  }\n\n  get touchscreen() {\n    return this._touchscreen;\n  }\n\n  get coverage() {\n    return this._coverage;\n  }\n\n  get tracing() {\n    return this._tracing;\n  }\n\n  get accessibility() {\n    return this._accessibility;\n  }\n\n  get isDragInterceptionEnabled() {\n    return this._userDragInterceptionEnabled;\n  }\n  /**\n   * @returns An array of all frames attached to the page.\n   */\n\n\n  frames() {\n    return this._frameManager.frames();\n  }\n  /**\n   * @returns all of the dedicated\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n   * WebWorkers}\n   * associated with the page.\n   * @remarks\n   * NOTE: This does not contain ServiceWorkers\n   */\n\n\n  workers() {\n    return Array.from(this._workers.values());\n  }\n  /**\n   * @param value - Whether to enable request interception.\n   *\n   * @remarks\n   * Activating request interception enables {@link HTTPRequest.abort},\n   * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods.  This\n   * provides the capability to modify network requests that are made by a page.\n   *\n   * Once request interception is enabled, every request will stall unless it's\n   * continued, responded or aborted; or completed using the browser cache.\n   *\n   * @example\n   * An example of a naïve request interceptor that aborts all image requests:\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.setRequestInterception(true);\n   *   page.on('request', interceptedRequest => {\n   *     if (interceptedRequest.url().endsWith('.png') ||\n   *         interceptedRequest.url().endsWith('.jpg'))\n   *       interceptedRequest.abort();\n   *     else\n   *       interceptedRequest.continue();\n   *     });\n   *   await page.goto('https://example.com');\n   *   await browser.close();\n   * })();\n   * ```\n   * NOTE: Enabling request interception disables page caching.\n   */\n\n\n  setRequestInterception(value) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5._frameManager.networkManager().setRequestInterception(value);\n    })();\n  }\n  /**\n   * @param enabled - Whether to enable drag interception.\n   *\n   * @remarks\n   * Activating drag interception enables the {@link Input.drag},\n   * methods  This provides the capability to capture drag events emitted\n   * on the page, which can then be used to simulate drag-and-drop.\n   */\n\n\n  setDragInterception(enabled) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6._userDragInterceptionEnabled = enabled;\n      return _this6._client.send('Input.setInterceptDrags', {\n        enabled\n      });\n    })();\n  }\n  /**\n   * @param enabled - When `true`, enables offline mode for the page.\n   */\n\n\n  setOfflineMode(enabled) {\n    return this._frameManager.networkManager().setOfflineMode(enabled);\n  }\n  /**\n   * @param networkConditions - Passing `null` disables network condition emulation.\n   * @example\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const slow3G = puppeteer.networkConditions['Slow 3G'];\n   *\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * await page.emulateNetworkConditions(slow3G);\n   * await page.goto('https://www.google.com');\n   * // other actions...\n   * await browser.close();\n   * })();\n   * ```\n   * @remarks\n   * NOTE: This does not affect WebSockets and WebRTC PeerConnections (see\n   * https://crbug.com/563644)\n   */\n\n\n  emulateNetworkConditions(networkConditions) {\n    return this._frameManager.networkManager().emulateNetworkConditions(networkConditions);\n  }\n  /**\n   * This setting will change the default maximum navigation time for the\n   * following methods and related shortcuts:\n   *\n   * - {@link Page.goBack | page.goBack(options)}\n   *\n   * - {@link Page.goForward | page.goForward(options)}\n   *\n   * - {@link Page.goto | page.goto(url,options)}\n   *\n   * - {@link Page.reload | page.reload(options)}\n   *\n   * - {@link Page.setContent | page.setContent(html,options)}\n   *\n   * - {@link Page.waitForNavigation | page.waitForNavigation(options)}\n   * @param timeout - Maximum navigation time in milliseconds.\n   */\n\n\n  setDefaultNavigationTimeout(timeout) {\n    this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n  }\n  /**\n   * @param timeout - Maximum time in milliseconds.\n   */\n\n\n  setDefaultTimeout(timeout) {\n    this._timeoutSettings.setDefaultTimeout(timeout);\n  }\n  /**\n   * Runs `document.querySelector` within the page. If no element matches the\n   * selector, the return value resolves to `null`.\n   *\n   * @remarks\n   * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector) }.\n   *\n   * @param selector - A `selector` to query page for\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query page for.\n   */\n\n\n  $(selector) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7.mainFrame().$(selector);\n    })();\n  }\n  /**\n   * @remarks\n   *\n   * The only difference between {@link Page.evaluate | page.evaluate} and\n   * `page.evaluateHandle` is that `evaluateHandle` will return the value\n   * wrapped in an in-page object.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   * ```\n   * const aHandle = await page.evaluateHandle('document')\n   * ```\n   *\n   * @example\n   * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n   * ```\n   * const aHandle = await page.evaluateHandle(() => document.body);\n   * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n   * console.log(await resultHandle.jsonValue());\n   * await resultHandle.dispose();\n   * ```\n   *\n   * Most of the time this function returns a {@link JSHandle},\n   * but if `pageFunction` returns a reference to an element,\n   * you instead get an {@link ElementHandle} back:\n   *\n   * @example\n   * ```\n   * const button = await page.evaluateHandle(() => document.querySelector('button'));\n   * // can call `click` because `button` is an `ElementHandle`\n   * await button.click();\n   * ```\n   *\n   * The TypeScript definitions assume that `evaluateHandle` returns\n   *  a `JSHandle`, but if you know it's going to return an\n   * `ElementHandle`, pass it as the generic argument:\n   *\n   * ```\n   * const button = await page.evaluateHandle<ElementHandle>(...);\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   */\n\n\n  evaluateHandle(pageFunction, ...args) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const context = yield _this8.mainFrame().executionContext();\n      return context.evaluateHandle(pageFunction, ...args);\n    })();\n  }\n  /**\n   * This method iterates the JavaScript heap and finds all objects with the\n   * given prototype.\n   *\n   * @remarks\n   * Shortcut for\n   * {@link ExecutionContext.queryObjects |\n   * page.mainFrame().executionContext().queryObjects(prototypeHandle)}.\n   *\n   * @example\n   *\n   * ```js\n   * // Create a Map object\n   * await page.evaluate(() => window.map = new Map());\n   * // Get a handle to the Map object prototype\n   * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n   * // Query all map instances into an array\n   * const mapInstances = await page.queryObjects(mapPrototype);\n   * // Count amount of map objects in heap\n   * const count = await page.evaluate(maps => maps.length, mapInstances);\n   * await mapInstances.dispose();\n   * await mapPrototype.dispose();\n   * ```\n   * @param prototypeHandle - a handle to the object prototype.\n   * @returns Promise which resolves to a handle to an array of objects with\n   * this prototype.\n   */\n\n\n  queryObjects(prototypeHandle) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const context = yield _this9.mainFrame().executionContext();\n      return context.queryObjects(prototypeHandle);\n    })();\n  }\n  /**\n   * This method runs `document.querySelector` within the page and passes the\n   * result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   *\n   * If no element is found matching `selector`, the method will throw an error.\n   *\n   * If `pageFunction` returns a promise `$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```\n   * const searchValue = await page.$eval('#search', el => el.value);\n   * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n   * const html = await page.$eval('.main-container', el => el.outerHTML);\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$eval`:\n   *\n   * @example\n   *\n   * ```\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const searchValue = await page.$eval<string>(\n   *  '#search', (el: HTMLInputElement) => el.value\n   * );\n   * ```\n   *\n   * @param selector - the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction - the function to be evaluated in the page context.\n   * Will be passed the result of `document.querySelector(selector)` as its\n   * first argument.\n   * @param args - any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n\n\n  $eval(selector, pageFunction, ...args) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this10.mainFrame().$eval(selector, pageFunction, ...args);\n    })();\n  }\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within\n   * the page and passes the result as the first argument to the `pageFunction`.\n   *\n   * @remarks\n   *\n   * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n   * resolve and then return its value.\n   *\n   * @example\n   *\n   * ```\n   * // get the amount of divs on the page\n   * const divCount = await page.$$eval('div', divs => divs.length);\n   *\n   * // get the text content of all the `.options` elements:\n   * const options = await page.$$eval('div > span.options', options => {\n   *   return options.map(option => option.textContent)\n   * });\n   * ```\n   *\n   * If you are using TypeScript, you may have to provide an explicit type to the\n   * first argument of the `pageFunction`.\n   * By default it is typed as `Element[]`, but you may need to provide a more\n   * specific sub-type:\n   *\n   * @example\n   *\n   * ```\n   * // if you don't provide HTMLInputElement here, TS will error\n   * // as `value` is not on `Element`\n   * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n   *   return elements.map(e => e.value);\n   * });\n   * ```\n   *\n   * The compiler should be able to infer the return type\n   * from the `pageFunction` you provide. If it is unable to, you can use the generic\n   * type to tell the compiler what return type you expect from `$$eval`:\n   *\n   * @example\n   *\n   * ```\n   * // The compiler can infer the return type in this case, but if it can't\n   * // or if you want to be more explicit, provide it as the generic type.\n   * const allInputValues = await page.$$eval<string[]>(\n   *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n   * );\n   * ```\n   *\n   * @param selector - the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to query for\n   * @param pageFunction - the function to be evaluated in the page context. Will\n   * be passed the result of `Array.from(document.querySelectorAll(selector))`\n   * as its first argument.\n   * @param args - any additional arguments to pass through to `pageFunction`.\n   *\n   * @returns The result of calling `pageFunction`. If it returns an element it\n   * is wrapped in an {@link ElementHandle}, else the raw value itself is\n   * returned.\n   */\n\n\n  $$eval(selector, pageFunction, ...args) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this11.mainFrame().$$eval(selector, pageFunction, ...args);\n    })();\n  }\n  /**\n   * The method runs `document.querySelectorAll` within the page. If no elements\n   * match the selector, the return value resolves to `[]`.\n   * @remarks\n   * Shortcut for {@link Frame.$$ | Page.mainFrame().$$(selector) }.\n   * @param selector - A `selector` to query page for\n   */\n\n\n  $$(selector) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this12.mainFrame().$$(selector);\n    })();\n  }\n  /**\n   * The method evaluates the XPath expression relative to the page document as\n   * its context node. If there are no such elements, the method resolves to an\n   * empty array.\n   * @remarks\n   * Shortcut for {@link Frame.$x | Page.mainFrame().$x(expression) }.\n   * @param expression - Expression to evaluate\n   */\n\n\n  $x(expression) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this13.mainFrame().$x(expression);\n    })();\n  }\n  /**\n   * If no URLs are specified, this method returns cookies for the current page\n   * URL. If URLs are specified, only cookies for those URLs are returned.\n   */\n\n\n  cookies(...urls) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      const originalCookies = (yield _this14._client.send('Network.getCookies', {\n        urls: urls.length ? urls : [_this14.url()]\n      })).cookies;\n      const unsupportedCookieAttributes = ['priority'];\n\n      const filterUnsupportedAttributes = cookie => {\n        for (const attr of unsupportedCookieAttributes) delete cookie[attr];\n\n        return cookie;\n      };\n\n      return originalCookies.map(filterUnsupportedAttributes);\n    })();\n  }\n\n  deleteCookie(...cookies) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const pageURL = _this15.url();\n\n      for (const cookie of cookies) {\n        const item = Object.assign({}, cookie);\n        if (!cookie.url && pageURL.startsWith('http')) item.url = pageURL;\n        yield _this15._client.send('Network.deleteCookies', item);\n      }\n    })();\n  }\n  /**\n   * @example\n   * ```js\n   * await page.setCookie(cookieObject1, cookieObject2);\n   * ```\n   */\n\n\n  setCookie(...cookies) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const pageURL = _this16.url();\n\n      const startsWithHTTP = pageURL.startsWith('http');\n      const items = cookies.map(cookie => {\n        const item = Object.assign({}, cookie);\n        if (!item.url && startsWithHTTP) item.url = pageURL;\n        assert_js_1.assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n        assert_js_1.assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n        return item;\n      });\n      yield _this16.deleteCookie(...items);\n      if (items.length) yield _this16._client.send('Network.setCookies', {\n        cookies: items\n      });\n    })();\n  }\n  /**\n   * Adds a `<script>` tag into the page with the desired URL or content.\n   * @remarks\n   * Shortcut for {@link Frame.addScriptTag | page.mainFrame().addScriptTag(options) }.\n   * @returns Promise which resolves to the added tag when the script's onload fires or\n   * when the script content was injected into frame.\n   */\n\n\n  addScriptTag(options) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this17.mainFrame().addScriptTag(options);\n    })();\n  }\n  /**\n   * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or a\n   * `<style type=\"text/css\">` tag with the content.\n   * @returns Promise which resolves to the added tag when the stylesheet's\n   * onload fires or when the CSS content was injected into frame.\n   */\n\n\n  addStyleTag(options) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this18.mainFrame().addStyleTag(options);\n    })();\n  }\n  /**\n   * The method adds a function called `name` on the page's `window` object. When\n   * called, the function executes `puppeteerFunction` in node.js and returns a\n   * `Promise` which resolves to the return value of `puppeteerFunction`.\n   *\n   * If the puppeteerFunction returns a `Promise`, it will be awaited.\n   *\n   * NOTE: Functions installed via `page.exposeFunction` survive navigations.\n   * @param name - Name of the function on the window object\n   * @param puppeteerFunction -  Callback function which will be called in\n   * Puppeteer's context.\n   * @example\n   * An example of adding an `md5` function into the page:\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const crypto = require('crypto');\n   *\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * page.on('console', (msg) => console.log(msg.text()));\n   * await page.exposeFunction('md5', (text) =>\n   * crypto.createHash('md5').update(text).digest('hex')\n   * );\n   * await page.evaluate(async () => {\n   * // use window.md5 to compute hashes\n   * const myString = 'PUPPETEER';\n   * const myHash = await window.md5(myString);\n   * console.log(`md5 of ${myString} is ${myHash}`);\n   * });\n   * await browser.close();\n   * })();\n   * ```\n   * An example of adding a `window.readfile` function into the page:\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const fs = require('fs');\n   *\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * page.on('console', (msg) => console.log(msg.text()));\n   * await page.exposeFunction('readfile', async (filePath) => {\n   * return new Promise((resolve, reject) => {\n   * fs.readFile(filePath, 'utf8', (err, text) => {\n   *    if (err) reject(err);\n   *    else resolve(text);\n   *  });\n   * });\n   * });\n   * await page.evaluate(async () => {\n   * // use window.readfile to read contents of a file\n   * const content = await window.readfile('/etc/hosts');\n   * console.log(content);\n   * });\n   * await browser.close();\n   * })();\n   * ```\n   */\n\n\n  exposeFunction(name, puppeteerFunction) {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this19._pageBindings.has(name)) throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n\n      _this19._pageBindings.set(name, puppeteerFunction);\n\n      const expression = helper_js_1.helper.pageBindingInitString('exposedFun', name);\n      yield _this19._client.send('Runtime.addBinding', {\n        name: name\n      });\n      yield _this19._client.send('Page.addScriptToEvaluateOnNewDocument', {\n        source: expression\n      });\n      yield Promise.all(_this19.frames().map(frame => frame.evaluate(expression).catch(helper_js_1.debugError)));\n    })();\n  }\n  /**\n   * Provide credentials for `HTTP authentication`.\n   * @remarks To disable authentication, pass `null`.\n   */\n\n\n  authenticate(credentials) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this20._frameManager.networkManager().authenticate(credentials);\n    })();\n  }\n  /**\n   * The extra HTTP headers will be sent with every request the page initiates.\n   * NOTE: All HTTP header names are lowercased. (HTTP headers are\n   * case-insensitive, so this shouldn’t impact your server code.)\n   * NOTE: page.setExtraHTTPHeaders does not guarantee the order of headers in\n   * the outgoing requests.\n   * @param headers - An object containing additional HTTP headers to be sent\n   * with every request. All header values must be strings.\n   * @returns\n   */\n\n\n  setExtraHTTPHeaders(headers) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this21._frameManager.networkManager().setExtraHTTPHeaders(headers);\n    })();\n  }\n  /**\n   * @param userAgent - Specific user agent to use in this page\n   * @returns Promise which resolves when the user agent is set.\n   */\n\n\n  setUserAgent(userAgent) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this22._frameManager.networkManager().setUserAgent(userAgent);\n    })();\n  }\n  /**\n   * @returns Object containing metrics as key/value pairs.\n   *\n   * - `Timestamp` : <number> The timestamp when the metrics sample was taken.\n   *\n   * - `Documents` : <number> Number of documents in the page.\n   *\n   * - `Frames` : <number> Number of frames in the page.\n   *\n   * - `JSEventListeners` : <number> Number of events in the page.\n   *\n   * - `Nodes` : <number> Number of DOM nodes in the page.\n   *\n   * - `LayoutCount` : <number> Total number of full or partial page layout.\n   *\n   * - `RecalcStyleCount` : <number> Total number of page style recalculations.\n   *\n   * - `LayoutDuration` : <number> Combined durations of all page layouts.\n   *\n   * - `RecalcStyleDuration` : <number> Combined duration of all page style\n   *   recalculations.\n   *\n   * - `ScriptDuration` : <number> Combined duration of JavaScript execution.\n   *\n   * - `TaskDuration` : <number> Combined duration of all tasks performed by the browser.\n   *\n   * - `JSHeapUsedSize` : <number> Used JavaScript heap size.\n   *\n   * - `JSHeapTotalSize` : <number> Total JavaScript heap size.\n   * @remarks\n   * NOTE: All timestamps are in monotonic time: monotonically increasing time\n   * in seconds since an arbitrary point in the past.\n   */\n\n\n  metrics() {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this23._client.send('Performance.getMetrics');\n      return _this23._buildMetricsObject(response.metrics);\n    })();\n  }\n\n  _emitMetrics(event) {\n    this.emit(\"metrics\"\n    /* Metrics */\n    , {\n      title: event.title,\n      metrics: this._buildMetricsObject(event.metrics)\n    });\n  }\n\n  _buildMetricsObject(metrics) {\n    const result = {};\n\n    for (const metric of metrics || []) {\n      if (supportedMetrics.has(metric.name)) result[metric.name] = metric.value;\n    }\n\n    return result;\n  }\n\n  _handleException(exceptionDetails) {\n    const message = helper_js_1.helper.getExceptionMessage(exceptionDetails);\n    const err = new Error(message);\n    err.stack = ''; // Don't report clientside error with a node stack attached\n\n    this.emit(\"pageerror\"\n    /* PageError */\n    , err);\n  }\n\n  _onConsoleAPI(event) {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      if (event.executionContextId === 0) {\n        // DevTools protocol stores the last 1000 console messages. These\n        // messages are always reported even for removed execution contexts. In\n        // this case, they are marked with executionContextId = 0 and are\n        // reported upon enabling Runtime agent.\n        //\n        // Ignore these messages since:\n        // - there's no execution context we can use to operate with message\n        //   arguments\n        // - these messages are reported before Puppeteer clients can subscribe\n        //   to the 'console'\n        //   page event.\n        //\n        // @see https://github.com/puppeteer/puppeteer/issues/3865\n        return;\n      }\n\n      const context = _this24._frameManager.executionContextById(event.executionContextId);\n\n      const values = event.args.map(arg => JSHandle_js_1.createJSHandle(context, arg));\n\n      _this24._addConsoleMessage(event.type, values, event.stackTrace);\n    })();\n  }\n\n  _onBindingCalled(event) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      let payload;\n\n      try {\n        payload = JSON.parse(event.payload);\n      } catch {\n        // The binding was either called by something in the page or it was\n        // called before our wrapper was initialized.\n        return;\n      }\n\n      const {\n        type,\n        name,\n        seq,\n        args\n      } = payload;\n      if (type !== 'exposedFun' || !_this25._pageBindings.has(name)) return;\n      let expression = null;\n\n      try {\n        const result = yield _this25._pageBindings.get(name)(...args);\n        expression = helper_js_1.helper.pageBindingDeliverResultString(name, seq, result);\n      } catch (error) {\n        if (error instanceof Error) expression = helper_js_1.helper.pageBindingDeliverErrorString(name, seq, error.message, error.stack);else expression = helper_js_1.helper.pageBindingDeliverErrorValueString(name, seq, error);\n      }\n\n      _this25._client.send('Runtime.evaluate', {\n        expression,\n        contextId: event.executionContextId\n      }).catch(helper_js_1.debugError);\n    })();\n  }\n\n  _addConsoleMessage(type, args, stackTrace) {\n    if (!this.listenerCount(\"console\"\n    /* Console */\n    )) {\n      args.forEach(arg => arg.dispose());\n      return;\n    }\n\n    const textTokens = [];\n\n    for (const arg of args) {\n      const remoteObject = arg._remoteObject;\n      if (remoteObject.objectId) textTokens.push(arg.toString());else textTokens.push(helper_js_1.helper.valueFromRemoteObject(remoteObject));\n    }\n\n    const stackTraceLocations = [];\n\n    if (stackTrace) {\n      for (const callFrame of stackTrace.callFrames) {\n        stackTraceLocations.push({\n          url: callFrame.url,\n          lineNumber: callFrame.lineNumber,\n          columnNumber: callFrame.columnNumber\n        });\n      }\n    }\n\n    const message = new ConsoleMessage_js_1.ConsoleMessage(type, textTokens.join(' '), args, stackTraceLocations);\n    this.emit(\"console\"\n    /* Console */\n    , message);\n  }\n\n  _onDialog(event) {\n    let dialogType = null;\n    const validDialogTypes = new Set(['alert', 'confirm', 'prompt', 'beforeunload']);\n\n    if (validDialogTypes.has(event.type)) {\n      dialogType = event.type;\n    }\n\n    assert_js_1.assert(dialogType, 'Unknown javascript dialog type: ' + event.type);\n    const dialog = new Dialog_js_1.Dialog(this._client, dialogType, event.message, event.defaultPrompt);\n    this.emit(\"dialog\"\n    /* Dialog */\n    , dialog);\n  }\n  /**\n   * Resets default white background\n   */\n\n\n  _resetDefaultBackgroundColor() {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this26._client.send('Emulation.setDefaultBackgroundColorOverride');\n    })();\n  }\n  /**\n   * Hides default white background\n   */\n\n\n  _setTransparentBackgroundColor() {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this27._client.send('Emulation.setDefaultBackgroundColorOverride', {\n        color: {\n          r: 0,\n          g: 0,\n          b: 0,\n          a: 0\n        }\n      });\n    })();\n  }\n  /**\n   *\n   * @returns\n   * @remarks Shortcut for\n   * {@link Frame.url | page.mainFrame().url()}.\n   */\n\n\n  url() {\n    return this.mainFrame().url();\n  }\n\n  content() {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this28._frameManager.mainFrame().content();\n    })();\n  }\n  /**\n   * @param html - HTML markup to assign to the page.\n   * @param options - Parameters that has some properties.\n   * @remarks\n   * The parameter `options` might have the following options.\n   *\n   * - `timeout` : Maximum time in milliseconds for resources to load, defaults\n   *   to 30 seconds, pass `0` to disable timeout. The default value can be\n   *   changed by using the\n   *   {@link Page.setDefaultNavigationTimeout |\n   *   page.setDefaultNavigationTimeout(timeout)}\n   *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n   *   methods.\n   *\n   * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n   *   When to consider setting markup succeeded, defaults to `load`. Given an\n   *   array of event strings, setting content is considered to be successful\n   *   after all events have been fired. Events can be either:<br/>\n   *  - `load` : consider setting content to be finished when the `load` event is\n   *    fired.<br/>\n   *  - `domcontentloaded` : consider setting content to be finished when the\n   *   `DOMContentLoaded` event is fired.<br/>\n   *  - `networkidle0` : consider setting content to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   *  - `networkidle2` : consider setting content to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n\n\n  setContent(html, options = {}) {\n    var _this29 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this29._frameManager.mainFrame().setContent(html, options);\n    })();\n  }\n  /**\n   * @param url - URL to navigate page to. The URL should include scheme, e.g.\n   * `https://`\n   * @param options - Navigation Parameter\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the\n   *   {@link Page.setDefaultNavigationTimeout |\n   *   page.setDefaultNavigationTimeout(timeout)}\n   *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n   *   methods.\n   *\n   * - `waitUntil`:\n   *   <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array> When to\n   *   consider navigation succeeded, defaults to `load`. Given an array of\n   *   event strings, navigation is considered to be successful after all events\n   *   have been fired. Events can be either:<br/>\n   *  - `load` : consider navigation to be finished when the load event is\n   *    fired.<br/>\n   *  - `domcontentloaded` : consider navigation to be finished when the\n   *    DOMContentLoaded event is fired.<br/>\n   *  - `networkidle0` : consider navigation to be finished when there are no\n   *    more than 0 network connections for at least `500` ms.<br/>\n   *  - `networkidle2` : consider navigation to be finished when there are no\n   *    more than 2 network connections for at least `500` ms.\n   *\n   * - `referer` : Referer header value. If provided it will take preference\n   *   over the referer header value set by\n   *   {@link Page.setExtraHTTPHeaders |page.setExtraHTTPHeaders()}.\n   *\n   * `page.goto` will throw an error if:\n   * - there's an SSL error (e.g. in case of self-signed certificates).\n   * - target URL is invalid.\n   * - the timeout is exceeded during navigation.\n   * - the remote server does not respond or is unreachable.\n   * - the main resource failed to load.\n   *\n   * `page.goto` will not throw an error when any valid HTTP status code is\n   *   returned by the remote server, including 404 \"Not Found\" and 500\n   *   \"Internal Server Error\". The status code for such responses can be\n   *   retrieved by calling response.status().\n   *\n   * NOTE: `page.goto` either throws an error or returns a main resource\n   * response. The only exceptions are navigation to about:blank or navigation\n   * to the same URL with a different hash, which would succeed and return null.\n   *\n   * NOTE: Headless mode doesn't support navigation to a PDF document. See the\n   * {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295\n   * | upstream issue}.\n   *\n   * Shortcut for {@link Frame.goto | page.mainFrame().goto(url, options)}.\n   */\n\n\n  goto(url, options = {}) {\n    var _this30 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this30._frameManager.mainFrame().goto(url, options);\n    })();\n  }\n  /**\n   * @param options - Navigation parameters which might have the following\n   * properties:\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the\n   *   {@link Page.setDefaultNavigationTimeout |\n   *   page.setDefaultNavigationTimeout(timeout)}\n   *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n   *   methods.\n   *\n   * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n   *   When to consider navigation succeeded, defaults to `load`. Given an array\n   *   of event strings, navigation is considered to be successful after all\n   *   events have been fired. Events can be either:<br/>\n   *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n   *  - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   *  - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   *  - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n\n\n  reload(options) {\n    var _this31 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield Promise.all([_this31.waitForNavigation(options), _this31._client.send('Page.reload')]);\n      return result[0];\n    })();\n  }\n  /**\n   * This resolves when the page navigates to a new URL or reloads. It is useful\n   * when you run code that will indirectly cause the page to navigate. Consider\n   * this example:\n   * ```js\n   * const [response] = await Promise.all([\n   * page.waitForNavigation(), // The promise resolves after navigation has finished\n   * page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n   * ]);\n   * ```\n   *\n   * @param options - Navigation parameters which might have the following properties:\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect. In case of navigation to a different anchor or navigation\n   * due to History API usage, the navigation will resolve with `null`.\n   * @remarks\n   * NOTE: Usage of the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n   * to change the URL is considered a navigation.\n   *\n   * Shortcut for\n   * {@link Frame.waitForNavigation | page.mainFrame().waitForNavigation(options)}.\n   */\n\n\n  waitForNavigation(options = {}) {\n    var _this32 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this32._frameManager.mainFrame().waitForNavigation(options);\n    })();\n  }\n\n  _sessionClosePromise() {\n    if (!this._disconnectPromise) this._disconnectPromise = new Promise(fulfill => this._client.once(Connection_js_1.CDPSessionEmittedEvents.Disconnected, () => fulfill(new Error('Target closed'))));\n    return this._disconnectPromise;\n  }\n  /**\n   * @param urlOrPredicate - A URL or predicate to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves to the matched response\n   * @example\n   * ```js\n   * const firstResponse = await page.waitForResponse(\n   * 'https://example.com/resource'\n   * );\n   * const finalResponse = await page.waitForResponse(\n   * (response) =>\n   * response.url() === 'https://example.com' && response.status() === 200\n   * );\n   * const finalResponse = await page.waitForResponse(async (response) => {\n   * return (await response.text()).includes('<html>');\n   * });\n   * return finalResponse.ok();\n   * ```\n   * @remarks\n   * Optional Waiting Parameters have:\n   *\n   * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass\n   * `0` to disable the timeout. The default value can be changed by using the\n   * {@link Page.setDefaultTimeout} method.\n   */\n\n\n  waitForRequest(urlOrPredicate, options = {}) {\n    var _this33 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        timeout = _this33._timeoutSettings.timeout()\n      } = options;\n      return helper_js_1.helper.waitForEvent(_this33._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Request, request => {\n        if (helper_js_1.helper.isString(urlOrPredicate)) return urlOrPredicate === request.url();\n        if (typeof urlOrPredicate === 'function') return !!urlOrPredicate(request);\n        return false;\n      }, timeout, _this33._sessionClosePromise());\n    })();\n  }\n  /**\n   * @param urlOrPredicate - A URL or predicate to wait for.\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves to the matched response.\n   * @example\n   * ```js\n   * const firstResponse = await page.waitForResponse(\n   * 'https://example.com/resource'\n   * );\n   * const finalResponse = await page.waitForResponse(\n   * (response) =>\n   * response.url() === 'https://example.com' && response.status() === 200\n   * );\n   * const finalResponse = await page.waitForResponse(async (response) => {\n   * return (await response.text()).includes('<html>');\n   * });\n   * return finalResponse.ok();\n   * ```\n   * @remarks\n   * Optional Parameter have:\n   *\n   * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n   * pass `0` to disable the timeout. The default value can be changed by using\n   * the {@link Page.setDefaultTimeout} method.\n   */\n\n\n  waitForResponse(urlOrPredicate, options = {}) {\n    var _this34 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        timeout = _this34._timeoutSettings.timeout()\n      } = options;\n      return helper_js_1.helper.waitForEvent(_this34._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Response, /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          if (helper_js_1.helper.isString(urlOrPredicate)) return urlOrPredicate === response.url();\n          if (typeof urlOrPredicate === 'function') return !!(yield urlOrPredicate(response));\n          return false;\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), timeout, _this34._sessionClosePromise());\n    })();\n  }\n  /**\n   * This method navigate to the previous page in history.\n   * @param options - Navigation parameters\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect. If can not go back, resolves to `null`.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the\n   *   {@link Page.setDefaultNavigationTimeout\n   *   | page.setDefaultNavigationTimeout(timeout)}\n   *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n   *   methods.\n   *\n   * - `waitUntil` : <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n   *   When to consider navigation succeeded, defaults to `load`. Given an array\n   *   of event strings, navigation is considered to be successful after all\n   *   events have been fired. Events can be either:<br/>\n   *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n   *  - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   *  - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   *  - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n\n\n  goBack(options = {}) {\n    var _this35 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this35._go(-1, options);\n    })();\n  }\n  /**\n   * This method navigate to the next page in history.\n   * @param options - Navigation Parameter\n   * @returns Promise which resolves to the main resource response. In case of\n   * multiple redirects, the navigation will resolve with the response of the\n   * last redirect. If can not go forward, resolves to `null`.\n   * @remarks\n   * The argument `options` might have the following properties:\n   *\n   * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n   *   seconds, pass 0 to disable timeout. The default value can be changed by\n   *   using the\n   *   {@link Page.setDefaultNavigationTimeout\n   *   | page.setDefaultNavigationTimeout(timeout)}\n   *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n   *   methods.\n   *\n   * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n   *   When to consider navigation succeeded, defaults to `load`. Given an array\n   *   of event strings, navigation is considered to be successful after all\n   *   events have been fired. Events can be either:<br/>\n   *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n   *  - `domcontentloaded` : consider navigation to be finished when the\n   *   DOMContentLoaded event is fired.<br/>\n   *  - `networkidle0` : consider navigation to be finished when there are no\n   *   more than 0 network connections for at least `500` ms.<br/>\n   *  - `networkidle2` : consider navigation to be finished when there are no\n   *   more than 2 network connections for at least `500` ms.\n   */\n\n\n  goForward(options = {}) {\n    var _this36 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this36._go(+1, options);\n    })();\n  }\n\n  _go(delta, options) {\n    var _this37 = this;\n\n    return _asyncToGenerator(function* () {\n      const history = yield _this37._client.send('Page.getNavigationHistory');\n      const entry = history.entries[history.currentIndex + delta];\n      if (!entry) return null;\n      const result = yield Promise.all([_this37.waitForNavigation(options), _this37._client.send('Page.navigateToHistoryEntry', {\n        entryId: entry.id\n      })]);\n      return result[0];\n    })();\n  }\n  /**\n   * Brings page to front (activates tab).\n   */\n\n\n  bringToFront() {\n    var _this38 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this38._client.send('Page.bringToFront');\n    })();\n  }\n  /**\n   * Emulates given device metrics and user agent. This method is a shortcut for\n   * calling two methods: {@link Page.setUserAgent} and {@link Page.setViewport}\n   * To aid emulation, Puppeteer provides a list of device descriptors that can\n   * be obtained via the {@link Puppeteer.devices} `page.emulate` will resize\n   * the page. A lot of websites don't expect phones to change size, so you\n   * should emulate before navigating to the page.\n   * @example\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const iPhone = puppeteer.devices['iPhone 6'];\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * await page.emulate(iPhone);\n   * await page.goto('https://www.google.com');\n   * // other actions...\n   * await browser.close();\n   * })();\n   * ```\n   * @remarks List of all available devices is available in the source code:\n   * {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n   */\n\n\n  emulate(options) {\n    var _this39 = this;\n\n    return _asyncToGenerator(function* () {\n      yield Promise.all([_this39.setViewport(options.viewport), _this39.setUserAgent(options.userAgent)]);\n    })();\n  }\n  /**\n   * @param enabled - Whether or not to enable JavaScript on the page.\n   * @returns\n   * @remarks\n   * NOTE: changing this value won't affect scripts that have already been run.\n   * It will take full effect on the next navigation.\n   */\n\n\n  setJavaScriptEnabled(enabled) {\n    var _this40 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this40._javascriptEnabled === enabled) return;\n      _this40._javascriptEnabled = enabled;\n      yield _this40._client.send('Emulation.setScriptExecutionDisabled', {\n        value: !enabled\n      });\n    })();\n  }\n  /**\n   * Toggles bypassing page's Content-Security-Policy.\n   * @param enabled - sets bypassing of page's Content-Security-Policy.\n   * @remarks\n   * NOTE: CSP bypassing happens at the moment of CSP initialization rather than\n   * evaluation. Usually, this means that `page.setBypassCSP` should be called\n   * before navigating to the domain.\n   */\n\n\n  setBypassCSP(enabled) {\n    var _this41 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this41._client.send('Page.setBypassCSP', {\n        enabled\n      });\n    })();\n  }\n  /**\n   * @param type - Changes the CSS media type of the page. The only allowed\n   * values are `screen`, `print` and `null`. Passing `null` disables CSS media\n   * emulation.\n   * @example\n   * ```\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → false\n   *\n   * await page.emulateMediaType('print');\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → false\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → true\n   *\n   * await page.emulateMediaType(null);\n   * await page.evaluate(() => matchMedia('screen').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('print').matches);\n   * // → false\n   * ```\n   */\n\n\n  emulateMediaType(type) {\n    var _this42 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(type === 'screen' || type === 'print' || type === null, 'Unsupported media type: ' + type);\n      yield _this42._client.send('Emulation.setEmulatedMedia', {\n        media: type || ''\n      });\n    })();\n  }\n\n  emulateCPUThrottling(factor) {\n    var _this43 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n      yield _this43._client.send('Emulation.setCPUThrottlingRate', {\n        rate: factor !== null ? factor : 1\n      });\n    })();\n  }\n  /**\n   * @param features - `<?Array<Object>>` Given an array of media feature\n   * objects, emulates CSS media features on the page. Each media feature object\n   * must have the following properties:\n   * @example\n   * ```js\n   * await page.emulateMediaFeatures([\n   * { name: 'prefers-color-scheme', value: 'dark' },\n   * ]);\n   * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n   * // → false\n   *\n   * await page.emulateMediaFeatures([\n   * { name: 'prefers-reduced-motion', value: 'reduce' },\n   * ]);\n   * await page.evaluate(\n   * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n   * );\n   * // → false\n   *\n   * await page.emulateMediaFeatures([\n   * { name: 'prefers-color-scheme', value: 'dark' },\n   * { name: 'prefers-reduced-motion', value: 'reduce' },\n   * ]);\n   * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n   * // → false\n   * await page.evaluate(\n   * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n   * );\n   * // → true\n   * await page.evaluate(\n   * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n   * );\n   * // → false\n   *\n   * await page.emulateMediaFeatures([{ name: 'color-gamut', value: 'p3' }]);\n   * await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n   * // → true\n   * await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n   * // → false\n   * ```\n   */\n\n\n  emulateMediaFeatures(features) {\n    var _this44 = this;\n\n    return _asyncToGenerator(function* () {\n      if (features === null) yield _this44._client.send('Emulation.setEmulatedMedia', {\n        features: null\n      });\n\n      if (Array.isArray(features)) {\n        features.every(mediaFeature => {\n          const name = mediaFeature.name;\n          assert_js_1.assert(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n          return true;\n        });\n        yield _this44._client.send('Emulation.setEmulatedMedia', {\n          features: features\n        });\n      }\n    })();\n  }\n  /**\n   * @param timezoneId - Changes the timezone of the page. See\n   * {@link https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt}\n   * for a list of supported timezone IDs. Passing\n   * `null` disables timezone emulation.\n   */\n\n\n  emulateTimezone(timezoneId) {\n    var _this45 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this45._client.send('Emulation.setTimezoneOverride', {\n          timezoneId: timezoneId || ''\n        });\n      } catch (error) {\n        if (error.message.includes('Invalid timezone')) throw new Error(`Invalid timezone ID: ${timezoneId}`);\n        throw error;\n      }\n    })();\n  }\n  /**\n   * Emulates the idle state.\n   * If no arguments set, clears idle state emulation.\n   *\n   * @example\n   * ```js\n   * // set idle emulation\n   * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n   *\n   * // do some checks here\n   * ...\n   *\n   * // clear idle emulation\n   * await page.emulateIdleState();\n   * ```\n   *\n   * @param overrides - Mock idle state. If not set, clears idle overrides\n   */\n\n\n  emulateIdleState(overrides) {\n    var _this46 = this;\n\n    return _asyncToGenerator(function* () {\n      if (overrides) {\n        yield _this46._client.send('Emulation.setIdleOverride', {\n          isUserActive: overrides.isUserActive,\n          isScreenUnlocked: overrides.isScreenUnlocked\n        });\n      } else {\n        yield _this46._client.send('Emulation.clearIdleOverride');\n      }\n    })();\n  }\n  /**\n   * Simulates the given vision deficiency on the page.\n   *\n   * @example\n   * ```js\n   * const puppeteer = require('puppeteer');\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.goto('https://v8.dev/blog/10-years');\n   *\n   *   await page.emulateVisionDeficiency('achromatopsia');\n   *   await page.screenshot({ path: 'achromatopsia.png' });\n   *\n   *   await page.emulateVisionDeficiency('deuteranopia');\n   *   await page.screenshot({ path: 'deuteranopia.png' });\n   *\n   *   await page.emulateVisionDeficiency('blurredVision');\n   *   await page.screenshot({ path: 'blurred-vision.png' });\n   *\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   * @param type - the type of deficiency to simulate, or `'none'` to reset.\n   */\n\n\n  emulateVisionDeficiency(type) {\n    var _this47 = this;\n\n    return _asyncToGenerator(function* () {\n      const visionDeficiencies = new Set(['none', 'achromatopsia', 'blurredVision', 'deuteranopia', 'protanopia', 'tritanopia']);\n\n      try {\n        assert_js_1.assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n        yield _this47._client.send('Emulation.setEmulatedVisionDeficiency', {\n          type: type || 'none'\n        });\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }\n  /**\n   * `page.setViewport` will resize the page. A lot of websites don't expect\n   * phones to change size, so you should set the viewport before navigating to\n   * the page.\n   *\n   * In the case of multiple pages in a single browser, each page can have its\n   * own viewport size.\n   * @example\n   * ```js\n   * const page = await browser.newPage();\n   * await page.setViewport({\n   * width: 640,\n   * height: 480,\n   * deviceScaleFactor: 1,\n   * });\n   * await page.goto('https://example.com');\n   * ```\n   *\n   * @param viewport\n   * @remarks\n   * Argument viewport have following properties:\n   *\n   * - `width`: page width in pixels. required\n   *\n   * - `height`: page height in pixels. required\n   *\n   * - `deviceScaleFactor`: Specify device scale factor (can be thought of as\n   *   DPR). Defaults to `1`.\n   *\n   * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n   *   to `false`.\n   *\n   * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`\n   *\n   * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to false.\n   *\n   * NOTE: in certain cases, setting viewport will reload the page in order to\n   * set the isMobile or hasTouch properties.\n   */\n\n\n  setViewport(viewport) {\n    var _this48 = this;\n\n    return _asyncToGenerator(function* () {\n      const needsReload = yield _this48._emulationManager.emulateViewport(viewport);\n      _this48._viewport = viewport;\n      if (needsReload) yield _this48.reload();\n    })();\n  }\n  /**\n   * @returns\n   *\n   * - `width`: page's width in pixels\n   *\n   * - `height`: page's height in pixels\n   *\n   * - `deviceScalarFactor`: Specify device scale factor (can be though of as\n   *   dpr). Defaults to `1`.\n   *\n   * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n   *   to `false`.\n   *\n   * - `hasTouch`: Specifies if viewport supports touch events. Defaults to\n   *   `false`.\n   *\n   * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to\n   *   `false`.\n   */\n\n\n  viewport() {\n    return this._viewport;\n  }\n  /**\n   * @remarks\n   *\n   * Evaluates a function in the page's context and returns the result.\n   *\n   * If the function passed to `page.evaluteHandle` returns a Promise, the\n   * function will wait for the promise to resolve and return its value.\n   *\n   * @example\n   *\n   * ```js\n   * const result = await frame.evaluate(() => {\n   *   return Promise.resolve(8 * 7);\n   * });\n   * console.log(result); // prints \"56\"\n   * ```\n   *\n   * You can pass a string instead of a function (although functions are\n   * recommended as they are easier to debug and use with TypeScript):\n   *\n   * @example\n   * ```\n   * const aHandle = await page.evaluate('1 + 2');\n   * ```\n   *\n   * To get the best TypeScript experience, you should pass in as the\n   * generic the type of `pageFunction`:\n   *\n   * ```\n   * const aHandle = await page.evaluate<() => number>(() => 2);\n   * ```\n   *\n   * @example\n   *\n   * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n   * as arguments to the `pageFunction`:\n   *\n   * ```\n   * const bodyHandle = await page.$('body');\n   * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n   * await bodyHandle.dispose();\n   * ```\n   *\n   * @param pageFunction - a function that is run within the page\n   * @param args - arguments to be passed to the pageFunction\n   *\n   * @returns the return value of `pageFunction`.\n   */\n\n\n  evaluate(pageFunction, ...args) {\n    var _this49 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this49._frameManager.mainFrame().evaluate(pageFunction, ...args);\n    })();\n  }\n  /**\n   * Adds a function which would be invoked in one of the following scenarios:\n   *\n   * - whenever the page is navigated\n   *\n   * - whenever the child frame is attached or navigated. In this case, the\n   * function is invoked in the context of the newly attached frame.\n   *\n   * The function is invoked after the document was created but before any of\n   * its scripts were run. This is useful to amend the JavaScript environment,\n   * e.g. to seed `Math.random`.\n   * @param pageFunction - Function to be evaluated in browser context\n   * @param args - Arguments to pass to `pageFunction`\n   * @example\n   * An example of overriding the navigator.languages property before the page loads:\n   * ```js\n   * // preload.js\n   *\n   * // overwrite the `languages` property to use a custom getter\n   * Object.defineProperty(navigator, 'languages', {\n   * get: function () {\n   * return ['en-US', 'en', 'bn'];\n   * },\n   * });\n   *\n   * // In your puppeteer script, assuming the preload.js file is\n   * in same folder of our script\n   * const preloadFile = fs.readFileSync('./preload.js', 'utf8');\n   * await page.evaluateOnNewDocument(preloadFile);\n   * ```\n   */\n\n\n  evaluateOnNewDocument(pageFunction, ...args) {\n    var _this50 = this;\n\n    return _asyncToGenerator(function* () {\n      const source = helper_js_1.helper.evaluationString(pageFunction, ...args);\n      yield _this50._client.send('Page.addScriptToEvaluateOnNewDocument', {\n        source\n      });\n    })();\n  }\n  /**\n   * Toggles ignoring cache for each request based on the enabled state. By\n   * default, caching is enabled.\n   * @param enabled - sets the `enabled` state of cache\n   */\n\n\n  setCacheEnabled(enabled = true) {\n    var _this51 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this51._frameManager.networkManager().setCacheEnabled(enabled);\n    })();\n  }\n  /**\n   * @remarks\n   * Options object which might have the following properties:\n   *\n   * - `path` : <string> The file path to save the image to. The screenshot type\n   *   will be inferred from file extension. If `path` is a relative path, then\n   *   it is resolved relative to\n   *   {@link https://nodejs.org/api/process.html#process_process_cwd\n   *   | current working directory}.\n   *   If no path is provided, the image won't be saved to the disk.\n   *\n   * - `type` : <string> Specify screenshot type, can be either `jpeg` or `png`.\n   *   Defaults to 'png'.\n   *\n   * - `quality` : <number> The quality of the image, between 0-100. Not\n   *   applicable to `png` images.\n   *\n   * - `fullPage` : <boolean> When true, takes a screenshot of the full\n   *   scrollable page. Defaults to `false`\n   *\n   * - `clip` : <Object> An object which specifies clipping region of the page.\n   *   Should have the following fields:<br/>\n   *  - `x` : <number> x-coordinate of top-left corner of clip area.<br/>\n   *  - `y` :  <number> y-coordinate of top-left corner of clip area.<br/>\n   *  - `width` : <number> width of clipping area.<br/>\n   *  - `height` : <number> height of clipping area.\n   *\n   * - `omitBackground` : <boolean> Hides default white background and allows\n   *   capturing screenshots with transparency. Defaults to `false`\n   *\n   * - `encoding` : <string> The encoding of the image, can be either base64 or\n   *   binary. Defaults to `binary`.\n   *\n   *\n   * NOTE: Screenshots take at least 1/6 second on OS X. See\n   * {@link https://crbug.com/741689} for discussion.\n   * @returns Promise which resolves to buffer or a base64 string (depending on\n   * the value of `encoding`) with captured screenshot.\n   */\n\n\n  screenshot(options = {}) {\n    var _this52 = this;\n\n    return _asyncToGenerator(function* () {\n      let screenshotType = null; // options.type takes precedence over inferring the type from options.path\n      // because it may be a 0-length file with no extension created beforehand\n      // (i.e. as a temp file).\n\n      if (options.type) {\n        assert_js_1.assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);\n        screenshotType = options.type;\n      } else if (options.path) {\n        const filePath = options.path;\n        const extension = filePath.slice(filePath.lastIndexOf('.') + 1).toLowerCase();\n        if (extension === 'png') screenshotType = 'png';else if (extension === 'jpg' || extension === 'jpeg') screenshotType = 'jpeg';\n        assert_js_1.assert(screenshotType, `Unsupported screenshot type for extension \\`.${extension}\\``);\n      }\n\n      if (!screenshotType) screenshotType = 'png';\n\n      if (options.quality) {\n        assert_js_1.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' + screenshotType + ' screenshots');\n        assert_js_1.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' + typeof options.quality);\n        assert_js_1.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n        assert_js_1.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' + options.quality);\n      }\n\n      assert_js_1.assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n\n      if (options.clip) {\n        assert_js_1.assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' + typeof options.clip.x);\n        assert_js_1.assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' + typeof options.clip.y);\n        assert_js_1.assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' + typeof options.clip.width);\n        assert_js_1.assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' + typeof options.clip.height);\n        assert_js_1.assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n        assert_js_1.assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n      }\n\n      return _this52._screenshotTaskQueue.postTask(() => _this52._screenshotTask(screenshotType, options));\n    })();\n  }\n\n  _screenshotTask(format, options) {\n    var _this53 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this53._client.send('Target.activateTarget', {\n        targetId: _this53._target._targetId\n      });\n      let clip = options.clip ? processClip(options.clip) : undefined;\n      let {\n        captureBeyondViewport = true\n      } = options;\n      captureBeyondViewport = typeof captureBeyondViewport === 'boolean' ? captureBeyondViewport : true;\n\n      if (options.fullPage) {\n        const metrics = yield _this53._client.send('Page.getLayoutMetrics');\n        const width = Math.ceil(metrics.contentSize.width);\n        const height = Math.ceil(metrics.contentSize.height); // Overwrite clip for full page.\n\n        clip = {\n          x: 0,\n          y: 0,\n          width,\n          height,\n          scale: 1\n        };\n\n        if (!captureBeyondViewport) {\n          const {\n            isMobile = false,\n            deviceScaleFactor = 1,\n            isLandscape = false\n          } = _this53._viewport || {};\n          const screenOrientation = isLandscape ? {\n            angle: 90,\n            type: 'landscapePrimary'\n          } : {\n            angle: 0,\n            type: 'portraitPrimary'\n          };\n          yield _this53._client.send('Emulation.setDeviceMetricsOverride', {\n            mobile: isMobile,\n            width,\n            height,\n            deviceScaleFactor,\n            screenOrientation\n          });\n        }\n      }\n\n      const shouldSetDefaultBackground = options.omitBackground && format === 'png';\n\n      if (shouldSetDefaultBackground) {\n        yield _this53._setTransparentBackgroundColor();\n      }\n\n      const result = yield _this53._client.send('Page.captureScreenshot', {\n        format,\n        quality: options.quality,\n        clip,\n        captureBeyondViewport\n      });\n\n      if (shouldSetDefaultBackground) {\n        yield _this53._resetDefaultBackgroundColor();\n      }\n\n      if (options.fullPage && _this53._viewport) yield _this53.setViewport(_this53._viewport);\n      const buffer = options.encoding === 'base64' ? result.data : Buffer.from(result.data, 'base64');\n\n      if (options.path) {\n        if (!environment_js_1.isNode) {\n          throw new Error('Screenshots can only be written to a file path in a Node environment.');\n        }\n\n        const fs = yield helper_js_1.helper.importFSModule();\n        yield fs.promises.writeFile(options.path, buffer);\n      }\n\n      return buffer;\n\n      function processClip(clip) {\n        const x = Math.round(clip.x);\n        const y = Math.round(clip.y);\n        const width = Math.round(clip.width + clip.x - x);\n        const height = Math.round(clip.height + clip.y - y);\n        return {\n          x,\n          y,\n          width,\n          height,\n          scale: 1\n        };\n      }\n    })();\n  }\n  /**\n   * Generatees a PDF of the page with the `print` CSS media type.\n   * @remarks\n   *\n   * NOTE: PDF generation is only supported in Chrome headless mode.\n   *\n   * To generate a PDF with the `screen` media type, call\n   * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n   * calling `page.pdf()`.\n   *\n   * By default, `page.pdf()` generates a pdf with modified colors for printing.\n   * Use the\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n   * property to force rendering of exact colors.\n   *\n   *\n   * @param options - options for generating the PDF.\n   */\n\n\n  createPDFStream(options = {}) {\n    var _this54 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        scale = 1,\n        displayHeaderFooter = false,\n        headerTemplate = '',\n        footerTemplate = '',\n        printBackground = false,\n        landscape = false,\n        pageRanges = '',\n        preferCSSPageSize = false,\n        margin = {},\n        omitBackground = false\n      } = options;\n      let paperWidth = 8.5;\n      let paperHeight = 11;\n\n      if (options.format) {\n        const format = PDFOptions_js_1.paperFormats[options.format.toLowerCase()];\n        assert_js_1.assert(format, 'Unknown paper format: ' + options.format);\n        paperWidth = format.width;\n        paperHeight = format.height;\n      } else {\n        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n      }\n\n      const marginTop = convertPrintParameterToInches(margin.top) || 0;\n      const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n      const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n      const marginRight = convertPrintParameterToInches(margin.right) || 0;\n\n      if (omitBackground) {\n        yield _this54._setTransparentBackgroundColor();\n      }\n\n      const result = yield _this54._client.send('Page.printToPDF', {\n        transferMode: 'ReturnAsStream',\n        landscape,\n        displayHeaderFooter,\n        headerTemplate,\n        footerTemplate,\n        printBackground,\n        scale,\n        paperWidth,\n        paperHeight,\n        marginTop,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        pageRanges,\n        preferCSSPageSize\n      });\n\n      if (omitBackground) {\n        yield _this54._resetDefaultBackgroundColor();\n      }\n\n      return helper_js_1.helper.getReadableFromProtocolStream(_this54._client, result.stream);\n    })();\n  }\n  /**\n   * @param {!PDFOptions=} options\n   * @returns {!Promise<!Buffer>}\n   */\n\n\n  pdf(options = {}) {\n    var _this55 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        path = undefined\n      } = options;\n      const readable = yield _this55.createPDFStream(options);\n      return yield helper_js_1.helper.getReadableAsBuffer(readable, path);\n    })();\n  }\n  /**\n   * @returns The page's title\n   * @remarks\n   * Shortcut for {@link Frame.title | page.mainFrame().title()}.\n   */\n\n\n  title() {\n    var _this56 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this56.mainFrame().title();\n    })();\n  }\n\n  close(options = {\n    runBeforeUnload: undefined\n  }) {\n    var _this57 = this;\n\n    return _asyncToGenerator(function* () {\n      assert_js_1.assert(!!_this57._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n      const runBeforeUnload = !!options.runBeforeUnload;\n\n      if (runBeforeUnload) {\n        yield _this57._client.send('Page.close');\n      } else {\n        yield _this57._client._connection.send('Target.closeTarget', {\n          targetId: _this57._target._targetId\n        });\n        yield _this57._target._isClosedPromise;\n      }\n    })();\n  }\n  /**\n   * Indicates that the page has been closed.\n   * @returns\n   */\n\n\n  isClosed() {\n    return this._closed;\n  }\n\n  get mouse() {\n    return this._mouse;\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.mouse} to click in the center of the\n   * element. If there's no element matching `selector`, the method throws an\n   * error.\n   * @remarks Bear in mind that if `click()` triggers a navigation event and\n   * there's a separate `page.waitForNavigation()` promise to be resolved, you\n   * may end up with a race condition that yields unexpected results. The\n   * correct pattern for click and wait for navigation is the following:\n   * ```js\n   * const [response] = await Promise.all([\n   * page.waitForNavigation(waitOptions),\n   * page.click(selector, clickOptions),\n   * ]);\n   * ```\n   * Shortcut for {@link Frame.click | page.mainFrame().click(selector[, options]) }.\n   * @param selector - A `selector` to search for element to click. If there are\n   * multiple elements satisfying the `selector`, the first will be clicked\n   * @param options - `Object`\n   * @returns Promise which resolves when the element matching `selector` is\n   * successfully clicked. The Promise will be rejected if there is no element\n   * matching `selector`.\n   */\n\n\n  click(selector, options = {}) {\n    return this.mainFrame().click(selector, options);\n  }\n  /**\n   * This method fetches an element with `selector` and focuses it. If there's no\n   * element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector }\n   * of an element to focus. If there are multiple elements satisfying the\n   * selector, the first will be focused.\n   * @returns  Promise which resolves when the element matching selector is\n   * successfully focused. The promise will be rejected if there is no element\n   * matching selector.\n   * @remarks\n   * Shortcut for {@link Frame.focus | page.mainFrame().focus(selector)}.\n   */\n\n\n  focus(selector) {\n    return this.mainFrame().focus(selector);\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.mouse} to hover over the center of the element.\n   * If there's no element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * to search for element to hover. If there are multiple elements satisfying\n   * the selector, the first will be hovered.\n   * @returns Promise which resolves when the element matching `selector` is\n   * successfully hovered. Promise gets rejected if there's no element matching\n   * `selector`.\n   * @remarks\n   * Shortcut for {@link Page.hover | page.mainFrame().hover(selector)}.\n   */\n\n\n  hover(selector) {\n    return this.mainFrame().hover(selector);\n  }\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been\n   * selected. If there's no `<select>` element matching `selector`, the method\n   * throws an error.\n   *\n   * @example\n   * ```js\n   * page.select('select#colors', 'blue'); // single selection\n   * page.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n   * ```\n   * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/\n   * CSS_Selectors | Selector} to query the page for\n   * @param values - Values of options to select. If the `<select>` has the\n   * `multiple` attribute, all values are considered, otherwise only the first one\n   * is taken into account.\n   * @returns\n   *\n   * @remarks\n   * Shortcut for {@link Frame.select | page.mainFrame().select()}\n   */\n\n\n  select(selector, ...values) {\n    return this.mainFrame().select(selector, ...values);\n  }\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if\n   * needed, and then uses {@link Page.touchscreen} to tap in the center of the element.\n   * If there's no element matching `selector`, the method throws an error.\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n   * to search for element to tap. If there are multiple elements satisfying the\n   * selector, the first will be tapped.\n   * @returns\n   * @remarks\n   * Shortcut for {@link Frame.tap | page.mainFrame().tap(selector)}.\n   */\n\n\n  tap(selector) {\n    return this.mainFrame().tap(selector);\n  }\n  /**\n   * Sends a `keydown`, `keypress/input`, and `keyup` event for each character\n   * in the text.\n   *\n   * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n   * @example\n   * ```\n   * await page.type('#mytextarea', 'Hello');\n   * // Types instantly\n   * await page.type('#mytextarea', 'World', { delay: 100 });\n   * // Types slower, like a user\n   * ```\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * of an element to type into. If there are multiple elements satisfying the\n   * selector, the first will be used.\n   * @param text - A text to type into a focused element.\n   * @param options - have property `delay` which is the Time to wait between\n   * key presses in milliseconds. Defaults to `0`.\n   * @returns\n   * {@link page.mainFrame().type(selector, text[, options])}\n   */\n\n\n  type(selector, text, options) {\n    return this.mainFrame().type(selector, text, options);\n  }\n  /**\n   * @remarks\n   *\n   * This method behaves differently depending on the first parameter. If it's a\n   * `string`, it will be treated as a `selector` or `xpath` (if the string\n   * starts with `//`). This method then is a shortcut for\n   * {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n   *\n   * If the first argument is a function this method is a shortcut for\n   * {@link Page.waitForFunction}.\n   *\n   * If the first argument is a `number`, it's treated as a timeout in\n   * milliseconds and the method returns a promise which resolves after the\n   * timeout.\n   *\n   * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n   * wait for.\n   * @param options - optional waiting parameters.\n   * @param args - arguments to pass to `pageFunction`.\n   *\n   * @deprecated Don't use this method directly. Instead use the more explicit\n   * methods available: {@link Page.waitForSelector},\n   * {@link Page.waitForXPath}, {@link Page.waitForFunction} or\n   * {@link Page.waitForTimeout}.\n   */\n\n\n  waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n    return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);\n  }\n  /**\n   * Causes your script to wait for the given number of milliseconds.\n   *\n   * @remarks\n   *\n   * It's generally recommended to not wait for a number of seconds, but instead\n   * use {@link Page.waitForSelector}, {@link Page.waitForXPath} or\n   * {@link Page.waitForFunction} to wait for exactly the conditions you want.\n   *\n   * @example\n   *\n   * Wait for 1 second:\n   *\n   * ```\n   * await page.waitForTimeout(1000);\n   * ```\n   *\n   * @param milliseconds - the number of milliseconds to wait.\n   */\n\n\n  waitForTimeout(milliseconds) {\n    return this.mainFrame().waitForTimeout(milliseconds);\n  }\n  /**\n   * Wait for the `selector` to appear in page. If at the moment of calling the\n   * method the `selector` already exists, the method will return immediately. If\n   * the `selector` doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * This method works across navigations:\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * let currentURL;\n   * page\n   * .waitForSelector('img')\n   * .then(() => console.log('First URL with image: ' + currentURL));\n   * for (currentURL of [\n   * 'https://example.com',\n   * 'https://google.com',\n   * 'https://bbc.com',\n   * ]) {\n   * await page.goto(currentURL);\n   * }\n   * await browser.close();\n   * })();\n   * ```\n   * @param selector - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n   * of an element to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when element specified by selector string\n   * is added to DOM. Resolves to `null` if waiting for hidden: `true` and\n   * selector is not found in DOM.\n   * @remarks\n   * The optional Parameter in Arguments `options` are :\n   *\n   * - `Visible`: A boolean wait for element to be present in DOM and to be\n   * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n   * properties. Defaults to `false`.\n   *\n   * - `hidden`: ait for element to not be found in the DOM or to be hidden,\n   * i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to\n   * `false`.\n   *\n   * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n   * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n   * by using the {@link Page.setDefaultTimeout} method.\n   */\n\n\n  waitForSelector(selector, options = {}) {\n    return this.mainFrame().waitForSelector(selector, options);\n  }\n  /**\n   * Wait for the `xpath` to appear in page. If at the moment of calling the\n   * method the `xpath` already exists, the method will return immediately. If\n   * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n   * function will throw.\n   *\n   * This method works across navigation\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * let currentURL;\n   * page\n   * .waitForXPath('//img')\n   * .then(() => console.log('First URL with image: ' + currentURL));\n   * for (currentURL of [\n   * 'https://example.com',\n   * 'https://google.com',\n   * 'https://bbc.com',\n   * ]) {\n   * await page.goto(currentURL);\n   * }\n   * await browser.close();\n   * })();\n   * ```\n   * @param xpath - A\n   * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n   * element to wait for\n   * @param options - Optional waiting parameters\n   * @returns Promise which resolves when element specified by xpath string is\n   * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n   * not found in DOM.\n   * @remarks\n   * The optional Argument `options` have properties:\n   *\n   * - `visible`: A boolean to wait for element to be present in DOM and to be\n   * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n   * properties. Defaults to `false`.\n   *\n   * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n   * hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n   * Defaults to `false`.\n   *\n   * - `timeout`: A number which is maximum time to wait for in milliseconds.\n   * Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\n   * value can be changed by using the {@link Page.setDefaultTimeout} method.\n   */\n\n\n  waitForXPath(xpath, options = {}) {\n    return this.mainFrame().waitForXPath(xpath, options);\n  }\n  /**\n   * The `waitForFunction` can be used to observe viewport size change:\n   *\n   * ```\n   * const puppeteer = require('puppeteer');\n   * (async () => {\n   * const browser = await puppeteer.launch();\n   * const page = await browser.newPage();\n   * const watchDog = page.waitForFunction('window.innerWidth < 100');\n   * await page.setViewport({ width: 50, height: 50 });\n   * await watchDog;\n   * await browser.close();\n   * })();\n   * ```\n   * To pass arguments from node.js to the predicate of `page.waitForFunction` function:\n   * ```\n   * const selector = '.foo';\n   * await page.waitForFunction(\n   * (selector) => !!document.querySelector(selector),\n   * {},\n   * selector\n   * );\n   * ```\n   * The predicate of `page.waitForFunction` can be asynchronous too:\n   * ```\n   * const username = 'github-username';\n   * await page.waitForFunction(\n   * async (username) => {\n   * const githubResponse = await fetch(\n   *  `https://api.github.com/users/${username}`\n   * );\n   * const githubUser = await githubResponse.json();\n   * // show the avatar\n   * const img = document.createElement('img');\n   * img.src = githubUser.avatar_url;\n   * // wait 3 seconds\n   * await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n   * img.remove();\n   * },\n   * {},\n   * username\n   * );\n   * ```\n   * @param pageFunction - Function to be evaluated in browser context\n   * @param options - Optional waiting parameters\n   * @param args -  Arguments to pass to `pageFunction`\n   * @returns Promise which resolves when the `pageFunction` returns a truthy\n   * value. It resolves to a JSHandle of the truthy value.\n   *\n   * The optional waiting parameter can be:\n   *\n   * - `Polling`: An interval at which the `pageFunction` is executed, defaults to\n   *   `raf`. If `polling` is a number, then it is treated as an interval in\n   *   milliseconds at which the function would be executed. If polling is a\n   *   string, then it can be one of the following values:<br/>\n   *    - `raf`: to constantly execute `pageFunction` in `requestAnimationFrame`\n   *      callback. This is the tightest polling mode which is suitable to\n   *      observe styling changes.<br/>\n   *    - `mutation`: to execute pageFunction on every DOM mutation.\n   *\n   * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n   * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n   * by using the\n   * {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} method.\n   *\n   */\n\n\n  waitForFunction(pageFunction, options = {}, ...args) {\n    return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n  }\n\n}\n\nexports.Page = Page;\nconst supportedMetrics = new Set(['Timestamp', 'Documents', 'Frames', 'JSEventListeners', 'Nodes', 'LayoutCount', 'RecalcStyleCount', 'LayoutDuration', 'RecalcStyleDuration', 'ScriptDuration', 'TaskDuration', 'JSHeapUsedSize', 'JSHeapTotalSize']);\nconst unitToPixels = {\n  px: 1,\n  in: 96,\n  cm: 37.8,\n  mm: 3.78\n};\n\nfunction convertPrintParameterToInches(parameter) {\n  if (typeof parameter === 'undefined') return undefined;\n  let pixels;\n\n  if (helper_js_1.helper.isNumber(parameter)) {\n    // Treat numbers as pixel values to be aligned with phantom's paperSize.\n    pixels =\n    /** @type {number} */\n    parameter;\n  } else if (helper_js_1.helper.isString(parameter)) {\n    const text =\n    /** @type {string} */\n    parameter;\n    let unit = text.substring(text.length - 2).toLowerCase();\n    let valueText = '';\n\n    if (unitToPixels.hasOwnProperty(unit)) {\n      valueText = text.substring(0, text.length - 2);\n    } else {\n      // In case of unknown unit try to parse the whole parameter as number of pixels.\n      // This is consistent with phantom's paperSize behavior.\n      unit = 'px';\n      valueText = text;\n    }\n\n    const value = Number(valueText);\n    assert_js_1.assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n    pixels = value * unitToPixels[unit];\n  } else {\n    throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n  }\n\n  return pixels / 96;\n} //# sourceMappingURL=Page.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/cjs/puppeteer/common/Page.js"],"names":["Object","defineProperty","exports","value","Page","EventEmitter_js_1","require","Connection_js_1","Dialog_js_1","EmulationManager_js_1","FrameManager_js_1","Input_js_1","Tracing_js_1","assert_js_1","helper_js_1","Coverage_js_1","WebWorker_js_1","JSHandle_js_1","NetworkManager_js_1","Accessibility_js_1","TimeoutSettings_js_1","FileChooser_js_1","ConsoleMessage_js_1","PDFOptions_js_1","environment_js_1","ScreenshotTaskQueue","constructor","_chain","Promise","resolve","undefined","postTask","task","result","then","catch","EventEmitter","client","target","ignoreHTTPSErrors","_closed","_timeoutSettings","TimeoutSettings","_pageBindings","Map","_javascriptEnabled","_workers","_fileChooserInterceptors","Set","_userDragInterceptionEnabled","_client","_target","_keyboard","Keyboard","_mouse","Mouse","_touchscreen","Touchscreen","_accessibility","Accessibility","_frameManager","FrameManager","_emulationManager","EmulationManager","_tracing","Tracing","_coverage","Coverage","_screenshotTaskQueue","_viewport","on","event","targetInfo","type","send","sessionId","debugError","session","Connection","fromSession","worker","WebWorker","url","_addConsoleMessage","bind","_handleException","set","emit","get","delete","FrameManagerEmittedEvents","FrameAttached","FrameDetached","FrameNavigated","networkManager","NetworkManagerEmittedEvents","Request","RequestServedFromCache","Response","RequestFailed","RequestFinished","_onConsoleAPI","_onBindingCalled","_onDialog","exception","exceptionDetails","_onTargetCrashed","_emitMetrics","_onLogEntryAdded","_onFileChooser","_isClosedPromise","create","defaultViewport","page","_initialize","setViewport","all","initialize","autoAttach","waitForDebuggerOnStart","flatten","size","frame","frameId","context","executionContext","element","_adoptBackendNodeId","backendNodeId","interceptors","Array","from","clear","fileChooser","FileChooser","interceptor","call","isJavaScriptEnabled","eventName","handler","once","waitForFileChooser","options","enabled","timeout","callback","promise","x","add","helper","waitWithTimeout","error","setGeolocation","longitude","latitude","accuracy","Error","browser","browserContext","level","text","args","source","lineNumber","entry","map","arg","releaseObject","ConsoleMessage","mainFrame","keyboard","touchscreen","coverage","tracing","accessibility","isDragInterceptionEnabled","frames","workers","values","setRequestInterception","setDragInterception","setOfflineMode","emulateNetworkConditions","networkConditions","setDefaultNavigationTimeout","setDefaultTimeout","$","selector","evaluateHandle","pageFunction","queryObjects","prototypeHandle","$eval","$$eval","$$","$x","expression","cookies","urls","originalCookies","length","unsupportedCookieAttributes","filterUnsupportedAttributes","cookie","attr","deleteCookie","pageURL","item","assign","startsWith","setCookie","startsWithHTTP","items","assert","name","String","prototype","addScriptTag","addStyleTag","exposeFunction","puppeteerFunction","has","pageBindingInitString","evaluate","authenticate","credentials","setExtraHTTPHeaders","headers","setUserAgent","userAgent","metrics","response","_buildMetricsObject","title","metric","supportedMetrics","message","getExceptionMessage","err","stack","executionContextId","executionContextById","createJSHandle","stackTrace","payload","JSON","parse","seq","pageBindingDeliverResultString","pageBindingDeliverErrorString","pageBindingDeliverErrorValueString","contextId","listenerCount","forEach","dispose","textTokens","remoteObject","_remoteObject","objectId","push","toString","valueFromRemoteObject","stackTraceLocations","callFrame","callFrames","columnNumber","join","dialogType","validDialogTypes","dialog","Dialog","defaultPrompt","_resetDefaultBackgroundColor","_setTransparentBackgroundColor","color","r","g","b","a","content","setContent","html","goto","reload","waitForNavigation","_sessionClosePromise","_disconnectPromise","fulfill","CDPSessionEmittedEvents","Disconnected","waitForRequest","urlOrPredicate","waitForEvent","request","isString","waitForResponse","goBack","_go","goForward","delta","history","entries","currentIndex","entryId","id","bringToFront","emulate","viewport","setJavaScriptEnabled","setBypassCSP","emulateMediaType","media","emulateCPUThrottling","factor","rate","emulateMediaFeatures","features","isArray","every","mediaFeature","test","emulateTimezone","timezoneId","includes","emulateIdleState","overrides","isUserActive","isScreenUnlocked","emulateVisionDeficiency","visionDeficiencies","needsReload","emulateViewport","evaluateOnNewDocument","evaluationString","setCacheEnabled","screenshot","screenshotType","path","filePath","extension","slice","lastIndexOf","toLowerCase","quality","Number","isInteger","clip","fullPage","y","width","height","_screenshotTask","format","targetId","_targetId","processClip","captureBeyondViewport","Math","ceil","contentSize","scale","isMobile","deviceScaleFactor","isLandscape","screenOrientation","angle","mobile","shouldSetDefaultBackground","omitBackground","buffer","encoding","data","Buffer","isNode","fs","importFSModule","promises","writeFile","round","createPDFStream","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","landscape","pageRanges","preferCSSPageSize","margin","paperWidth","paperHeight","paperFormats","convertPrintParameterToInches","marginTop","top","marginLeft","left","marginBottom","bottom","marginRight","right","transferMode","getReadableFromProtocolStream","stream","pdf","readable","getReadableAsBuffer","close","runBeforeUnload","_connection","isClosed","mouse","click","focus","hover","select","tap","waitFor","selectorOrFunctionOrTimeout","waitForTimeout","milliseconds","waitForSelector","waitForXPath","xpath","waitForFunction","unitToPixels","px","in","cm","mm","parameter","pixels","isNumber","unit","substring","valueText","hasOwnProperty","isNaN"],"mappings":"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AD,EAAU;AAAA;;AAAA;AAC/B,MAAA,MAAI,CAAC9F,4BAAL,GAAoC8F,OAApC;AACA,aAAO,MAAI,CAAC7F,OAAL,CAAawB,IAAb,CAAkB,yBAAlB,EAA6C;AAAEqE,QAAAA;AAAF,OAA7C,CAAP;AAF+B;AAGlC;AACD;AACJ;AACA;;;AACIsC,EAAAA,cAAc,CAACtC,OAAD,EAAU;AACpB,WAAO,KAAKnF,aAAL,CAAmBkC,cAAnB,GAAoCuF,cAApC,CAAmDtC,OAAnD,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIuC,EAAAA,wBAAwB,CAACC,iBAAD,EAAoB;AACxC,WAAO,KAAK3H,aAAL,CACFkC,cADE,GAEFwF,wBAFE,CAEuBC,iBAFvB,CAAP;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,2BAA2B,CAACxC,OAAD,EAAU;AACjC,SAAKvG,gBAAL,CAAsB+I,2BAAtB,CAAkDxC,OAAlD;AACH;AACD;AACJ;AACA;;;AACIyC,EAAAA,iBAAiB,CAACzC,OAAD,EAAU;AACvB,SAAKvG,gBAAL,CAAsBgJ,iBAAtB,CAAwCzC,OAAxC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU0C,EAAAA,CAAC,CAACC,QAAD,EAAW;AAAA;;AAAA;AACd,aAAO,MAAI,CAAClB,SAAL,GAAiBiB,CAAjB,CAAmBC,QAAnB,CAAP;AADc;AAEjB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,cAAc,CAACC,YAAD,EAAe,GAAG5B,IAAlB,EAAwB;AAAA;;AAAA;AACxC,YAAMrC,OAAO,SAAS,MAAI,CAAC6C,SAAL,GAAiB5C,gBAAjB,EAAtB;AACA,aAAOD,OAAO,CAACgE,cAAR,CAAuBC,YAAvB,EAAqC,GAAG5B,IAAxC,CAAP;AAFwC;AAG3C;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU6B,EAAAA,YAAY,CAACC,eAAD,EAAkB;AAAA;;AAAA;AAChC,YAAMnE,OAAO,SAAS,MAAI,CAAC6C,SAAL,GAAiB5C,gBAAjB,EAAtB;AACA,aAAOD,OAAO,CAACkE,YAAR,CAAqBC,eAArB,CAAP;AAFgC;AAGnC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,KAAK,CAACL,QAAD,EAAWE,YAAX,EAAyB,GAAG5B,IAA5B,EAAkC;AAAA;;AAAA;AACzC,aAAO,OAAI,CAACQ,SAAL,GAAiBuB,KAAjB,CAAuBL,QAAvB,EAAiCE,YAAjC,EAA+C,GAAG5B,IAAlD,CAAP;AADyC;AAE5C;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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,YAAM,OAAI,CAAC9N,OAAL,CAAawB,IAAb,CAAkB,6CAAlB,CAAN;AADiC;AAEpC;AACD;AACJ;AACA;;;AACUuM,EAAAA,8BAA8B,GAAG;AAAA;;AAAA;AACnC,YAAM,OAAI,CAAC/N,OAAL,CAAawB,IAAb,CAAkB,6CAAlB,EAAiE;AACnEwM,QAAAA,KAAK,EAAE;AAAEC,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE,CAAX;AAAcC,UAAAA,CAAC,EAAE,CAAjB;AAAoBC,UAAAA,CAAC,EAAE;AAAvB;AAD4D,OAAjE,CAAN;AADmC;AAItC;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIpM,EAAAA,GAAG,GAAG;AACF,WAAO,KAAKuF,SAAL,GAAiBvF,GAAjB,EAAP;AACH;;AACKqM,EAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,mBAAa,OAAI,CAAC3N,aAAL,CAAmB6G,SAAnB,GAA+B8G,OAA/B,EAAb;AADY;AAEf;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,UAAU,CAACC,IAAD,EAAO3I,OAAO,GAAG,EAAjB,EAAqB;AAAA;;AAAA;AACjC,YAAM,OAAI,CAAClF,aAAL,CAAmB6G,SAAnB,GAA+B+G,UAA/B,CAA0CC,IAA1C,EAAgD3I,OAAhD,CAAN;AADiC;AAEpC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU4I,EAAAA,IAAI,CAACxM,GAAD,EAAM4D,OAAO,GAAG,EAAhB,EA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,IAAb,CAAkB,uCAAlB,EAA2D;AAC7DD,UAAAA,IAAI,EAAEA,IAAI,IAAI;AAD+C,SAA3D,CAAN;AAGH,OALD,CAMA,OAAO8E,KAAP,EAAc;AACV,cAAMA,KAAN;AACH;AAjB+B;AAkBnC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUpC,EAAAA,WAAW,CAACgM,QAAD,EAAW;AAAA;;AAAA;AACxB,YAAMuB,WAAW,SAAS,OAAI,CAAC5Q,iBAAL,CAAuB6Q,eAAvB,CAAuCxB,QAAvC,CAA1B;AACA,MAAA,OAAI,CAAC9O,SAAL,GAAiB8O,QAAjB;AACA,UAAIuB,WAAJ,EACI,MAAM,OAAI,CAAC/C,MAAL,EAAN;AAJoB;AAK3B;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIwB,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAK9O,SAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACU0J,EAAAA,QAAQ,CAAClC,YAAD,EAAe,GAAG5B,IAAlB,EAAwB;AAAA;;AAAA;AAClC,aAAO,OAAI,CAACrG,aAAL,CAAmB6G,SAAnB,GAA+BsD,QAA/B,CAAwClC,YAAxC,EAAsD,GAAG5B,IAAzD,CAAP;AADkC;AAErC;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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H;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIlH,EAAAA,IAAI,CAACkH,QAAD,EAAW3B,IAAX,EAAiBlB,OAAjB,EAA0B;AAC1B,WAAO,KAAK2B,SAAL,GAAiBhG,IAAjB,CAAsBkH,QAAtB,EAAgC3B,IAAhC,EAAsClB,OAAtC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIkR,EAAAA,OAAO,CAACC,2BAAD,EAA8BnR,OAAO,GAAG,EAAxC,EAA4C,GAAGmB,IAA/C,EAAqD;AACxD,WAAO,KAAKQ,SAAL,GAAiBuP,OAAjB,CAAyBC,2BAAzB,EAAsDnR,OAAtD,EAA+D,GAAGmB,IAAlE,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIiQ,EAAAA,cAAc,CAACC,YAAD,EAAe;AACzB,WAAO,KAAK1P,SAAL,GAAiByP,cAAjB,CAAgCC,YAAhC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACzO,QAAD,EAAW7C,OAAO,GAAG,EAArB,EAAyB;AACpC,WAAO,KAAK2B,SAAL,GAAiB2P,eAAjB,CAAiCzO,QAAjC,EAA2C7C,OAA3C,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Page = void 0;\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\nconst Connection_js_1 = require(\"./Connection.js\");\nconst Dialog_js_1 = require(\"./Dialog.js\");\nconst EmulationManager_js_1 = require(\"./EmulationManager.js\");\nconst FrameManager_js_1 = require(\"./FrameManager.js\");\nconst Input_js_1 = require(\"./Input.js\");\nconst Tracing_js_1 = require(\"./Tracing.js\");\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\nconst Coverage_js_1 = require(\"./Coverage.js\");\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\nconst JSHandle_js_1 = require(\"./JSHandle.js\");\nconst NetworkManager_js_1 = require(\"./NetworkManager.js\");\nconst Accessibility_js_1 = require(\"./Accessibility.js\");\nconst TimeoutSettings_js_1 = require(\"./TimeoutSettings.js\");\nconst FileChooser_js_1 = require(\"./FileChooser.js\");\nconst ConsoleMessage_js_1 = require(\"./ConsoleMessage.js\");\nconst PDFOptions_js_1 = require(\"./PDFOptions.js\");\nconst environment_js_1 = require(\"../environment.js\");\nclass ScreenshotTaskQueue {\n    constructor() {\n        this._chain = Promise.resolve(undefined);\n    }\n    postTask(task) {\n        const result = this._chain.then(task);\n        this._chain = result.catch(() => { });\n        return result;\n    }\n}\n/**\n * Page provides methods to interact with a single tab or\n * {@link https://developer.chrome.com/extensions/background_pages | extension background page} in Chromium.\n *\n * @remarks\n *\n * One Browser instance might have multiple Page instances.\n *\n * @example\n * This example creates a page, navigates it to a URL, and then * saves a screenshot:\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   await page.goto('https://example.com');\n *   await page.screenshot({path: 'screenshot.png'});\n *   await browser.close();\n * })();\n * ```\n *\n * The Page class extends from Puppeteer's {@link EventEmitter} class and will\n * emit various events which are documented in the {@link PageEmittedEvents} enum.\n *\n * @example\n * This example logs a message for a single page `load` event:\n * ```js\n * page.once('load', () => console.log('Page loaded!'));\n * ```\n *\n * To unsubscribe from events use the `off` method:\n *\n * ```js\n * function logRequest(interceptedRequest) {\n *   console.log('A request was made:', interceptedRequest.url());\n * }\n * page.on('request', logRequest);\n * // Sometime later...\n * page.off('request', logRequest);\n * ```\n * @public\n */\nclass Page extends EventEmitter_js_1.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(client, target, ignoreHTTPSErrors) {\n        super();\n        this._closed = false;\n        this._timeoutSettings = new TimeoutSettings_js_1.TimeoutSettings();\n        this._pageBindings = new Map();\n        this._javascriptEnabled = true;\n        this._workers = new Map();\n        // TODO: improve this typedef - it's a function that takes a file chooser or\n        // something?\n        this._fileChooserInterceptors = new Set();\n        this._userDragInterceptionEnabled = false;\n        this._client = client;\n        this._target = target;\n        this._keyboard = new Input_js_1.Keyboard(client);\n        this._mouse = new Input_js_1.Mouse(client, this._keyboard);\n        this._touchscreen = new Input_js_1.Touchscreen(client, this._keyboard);\n        this._accessibility = new Accessibility_js_1.Accessibility(client);\n        this._frameManager = new FrameManager_js_1.FrameManager(client, this, ignoreHTTPSErrors, this._timeoutSettings);\n        this._emulationManager = new EmulationManager_js_1.EmulationManager(client);\n        this._tracing = new Tracing_js_1.Tracing(client);\n        this._coverage = new Coverage_js_1.Coverage(client);\n        this._screenshotTaskQueue = new ScreenshotTaskQueue();\n        this._viewport = null;\n        client.on('Target.attachedToTarget', (event) => {\n            if (event.targetInfo.type !== 'worker' &&\n                event.targetInfo.type !== 'iframe') {\n                // If we don't detach from service workers, they will never die.\n                // We still want to attach to workers for emitting events.\n                // We still want to attach to iframes so sessions may interact with them.\n                // We detach from all other types out of an abundance of caution.\n                // See https://source.chromium.org/chromium/chromium/src/+/master:content/browser/devtools/devtools_agent_host_impl.cc?q=f:devtools%20-f:out%20%22::kTypePage%5B%5D%22&ss=chromium\n                // for the complete list of available types.\n                client\n                    .send('Target.detachFromTarget', {\n                    sessionId: event.sessionId,\n                })\n                    .catch(helper_js_1.debugError);\n                return;\n            }\n            const session = Connection_js_1.Connection.fromSession(client).session(event.sessionId);\n            const worker = new WebWorker_js_1.WebWorker(session, event.targetInfo.url, this._addConsoleMessage.bind(this), this._handleException.bind(this));\n            this._workers.set(event.sessionId, worker);\n            this.emit(\"workercreated\" /* WorkerCreated */, worker);\n        });\n        client.on('Target.detachedFromTarget', (event) => {\n            const worker = this._workers.get(event.sessionId);\n            if (!worker)\n                return;\n            this._workers.delete(event.sessionId);\n            this.emit(\"workerdestroyed\" /* WorkerDestroyed */, worker);\n        });\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameAttached, (event) => this.emit(\"frameattached\" /* FrameAttached */, event));\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameDetached, (event) => this.emit(\"framedetached\" /* FrameDetached */, event));\n        this._frameManager.on(FrameManager_js_1.FrameManagerEmittedEvents.FrameNavigated, (event) => this.emit(\"framenavigated\" /* FrameNavigated */, event));\n        const networkManager = this._frameManager.networkManager();\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Request, (event) => this.emit(\"request\" /* Request */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestServedFromCache, (event) => this.emit(\"requestservedfromcache\" /* RequestServedFromCache */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.Response, (event) => this.emit(\"response\" /* Response */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFailed, (event) => this.emit(\"requestfailed\" /* RequestFailed */, event));\n        networkManager.on(NetworkManager_js_1.NetworkManagerEmittedEvents.RequestFinished, (event) => this.emit(\"requestfinished\" /* RequestFinished */, event));\n        this._fileChooserInterceptors = new Set();\n        client.on('Page.domContentEventFired', () => this.emit(\"domcontentloaded\" /* DOMContentLoaded */));\n        client.on('Page.loadEventFired', () => this.emit(\"load\" /* Load */));\n        client.on('Runtime.consoleAPICalled', (event) => this._onConsoleAPI(event));\n        client.on('Runtime.bindingCalled', (event) => this._onBindingCalled(event));\n        client.on('Page.javascriptDialogOpening', (event) => this._onDialog(event));\n        client.on('Runtime.exceptionThrown', (exception) => this._handleException(exception.exceptionDetails));\n        client.on('Inspector.targetCrashed', () => this._onTargetCrashed());\n        client.on('Performance.metrics', (event) => this._emitMetrics(event));\n        client.on('Log.entryAdded', (event) => this._onLogEntryAdded(event));\n        client.on('Page.fileChooserOpened', (event) => this._onFileChooser(event));\n        this._target._isClosedPromise.then(() => {\n            this.emit(\"close\" /* Close */);\n            this._closed = true;\n        });\n    }\n    /**\n     * @internal\n     */\n    static async create(client, target, ignoreHTTPSErrors, defaultViewport) {\n        const page = new Page(client, target, ignoreHTTPSErrors);\n        await page._initialize();\n        if (defaultViewport)\n            await page.setViewport(defaultViewport);\n        return page;\n    }\n    async _initialize() {\n        await Promise.all([\n            this._frameManager.initialize(),\n            this._client.send('Target.setAutoAttach', {\n                autoAttach: true,\n                waitForDebuggerOnStart: false,\n                flatten: true,\n            }),\n            this._client.send('Performance.enable'),\n            this._client.send('Log.enable'),\n        ]);\n    }\n    async _onFileChooser(event) {\n        if (!this._fileChooserInterceptors.size)\n            return;\n        const frame = this._frameManager.frame(event.frameId);\n        const context = await frame.executionContext();\n        const element = await context._adoptBackendNodeId(event.backendNodeId);\n        const interceptors = Array.from(this._fileChooserInterceptors);\n        this._fileChooserInterceptors.clear();\n        const fileChooser = new FileChooser_js_1.FileChooser(element, event);\n        for (const interceptor of interceptors)\n            interceptor.call(null, fileChooser);\n    }\n    /**\n     * @returns `true` if the page has JavaScript enabled, `false` otherwise.\n     */\n    isJavaScriptEnabled() {\n        return this._javascriptEnabled;\n    }\n    /**\n     * Listen to page events.\n     */\n    on(eventName, handler) {\n        // Note: this method only exists to define the types; we delegate the impl\n        // to EventEmitter.\n        return super.on(eventName, handler);\n    }\n    once(eventName, handler) {\n        // Note: this method only exists to define the types; we delegate the impl\n        // to EventEmitter.\n        return super.once(eventName, handler);\n    }\n    /**\n     * This method is typically coupled with an action that triggers file\n     * choosing. The following example clicks a button that issues a file chooser\n     * and then responds with `/tmp/myfile.pdf` as if a user has selected this file.\n     *\n     * ```js\n     * const [fileChooser] = await Promise.all([\n     * page.waitForFileChooser(),\n     * page.click('#upload-file-button'),\n     * // some button that triggers file selection\n     * ]);\n     * await fileChooser.accept(['/tmp/myfile.pdf']);\n     * ```\n     *\n     * NOTE: This must be called before the file chooser is launched. It will not\n     * return a currently active file chooser.\n     * @param options - Optional waiting parameters\n     * @returns Resolves after a page requests a file picker.\n     * @remarks\n     * NOTE: In non-headless Chromium, this method results in the native file picker\n     * dialog `not showing up` for the user.\n     */\n    async waitForFileChooser(options = {}) {\n        if (!this._fileChooserInterceptors.size)\n            await this._client.send('Page.setInterceptFileChooserDialog', {\n                enabled: true,\n            });\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        let callback;\n        const promise = new Promise((x) => (callback = x));\n        this._fileChooserInterceptors.add(callback);\n        return helper_js_1.helper\n            .waitWithTimeout(promise, 'waiting for file chooser', timeout)\n            .catch((error) => {\n            this._fileChooserInterceptors.delete(callback);\n            throw error;\n        });\n    }\n    /**\n     * Sets the page's geolocation.\n     * @remarks\n     * NOTE: Consider using {@link BrowserContext.overridePermissions} to grant\n     * permissions for the page to read its geolocation.\n     * @example\n     * ```js\n     * await page.setGeolocation({latitude: 59.95, longitude: 30.31667});\n     * ```\n     */\n    async setGeolocation(options) {\n        const { longitude, latitude, accuracy = 0 } = options;\n        if (longitude < -180 || longitude > 180)\n            throw new Error(`Invalid longitude \"${longitude}\": precondition -180 <= LONGITUDE <= 180 failed.`);\n        if (latitude < -90 || latitude > 90)\n            throw new Error(`Invalid latitude \"${latitude}\": precondition -90 <= LATITUDE <= 90 failed.`);\n        if (accuracy < 0)\n            throw new Error(`Invalid accuracy \"${accuracy}\": precondition 0 <= ACCURACY failed.`);\n        await this._client.send('Emulation.setGeolocationOverride', {\n            longitude,\n            latitude,\n            accuracy,\n        });\n    }\n    /**\n     * @returns A target this page was created from.\n     */\n    target() {\n        return this._target;\n    }\n    /**\n     * Get the browser the page belongs to.\n     */\n    browser() {\n        return this._target.browser();\n    }\n    /**\n     * Get the browser context that the page belongs to.\n     */\n    browserContext() {\n        return this._target.browserContext();\n    }\n    _onTargetCrashed() {\n        this.emit('error', new Error('Page crashed!'));\n    }\n    _onLogEntryAdded(event) {\n        const { level, text, args, source, url, lineNumber } = event.entry;\n        if (args)\n            args.map((arg) => helper_js_1.helper.releaseObject(this._client, arg));\n        if (source !== 'worker')\n            this.emit(\"console\" /* Console */, new ConsoleMessage_js_1.ConsoleMessage(level, text, [], [{ url, lineNumber }]));\n    }\n    /**\n     * @returns The page's main frame.\n     * @remarks\n     * Page is guaranteed to have a main frame which persists during navigations.\n     */\n    mainFrame() {\n        return this._frameManager.mainFrame();\n    }\n    get keyboard() {\n        return this._keyboard;\n    }\n    get touchscreen() {\n        return this._touchscreen;\n    }\n    get coverage() {\n        return this._coverage;\n    }\n    get tracing() {\n        return this._tracing;\n    }\n    get accessibility() {\n        return this._accessibility;\n    }\n    get isDragInterceptionEnabled() {\n        return this._userDragInterceptionEnabled;\n    }\n    /**\n     * @returns An array of all frames attached to the page.\n     */\n    frames() {\n        return this._frameManager.frames();\n    }\n    /**\n     * @returns all of the dedicated\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |\n     * WebWorkers}\n     * associated with the page.\n     * @remarks\n     * NOTE: This does not contain ServiceWorkers\n     */\n    workers() {\n        return Array.from(this._workers.values());\n    }\n    /**\n     * @param value - Whether to enable request interception.\n     *\n     * @remarks\n     * Activating request interception enables {@link HTTPRequest.abort},\n     * {@link HTTPRequest.continue} and {@link HTTPRequest.respond} methods.  This\n     * provides the capability to modify network requests that are made by a page.\n     *\n     * Once request interception is enabled, every request will stall unless it's\n     * continued, responded or aborted; or completed using the browser cache.\n     *\n     * @example\n     * An example of a naïve request interceptor that aborts all image requests:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.setRequestInterception(true);\n     *   page.on('request', interceptedRequest => {\n     *     if (interceptedRequest.url().endsWith('.png') ||\n     *         interceptedRequest.url().endsWith('.jpg'))\n     *       interceptedRequest.abort();\n     *     else\n     *       interceptedRequest.continue();\n     *     });\n     *   await page.goto('https://example.com');\n     *   await browser.close();\n     * })();\n     * ```\n     * NOTE: Enabling request interception disables page caching.\n     */\n    async setRequestInterception(value) {\n        return this._frameManager.networkManager().setRequestInterception(value);\n    }\n    /**\n     * @param enabled - Whether to enable drag interception.\n     *\n     * @remarks\n     * Activating drag interception enables the {@link Input.drag},\n     * methods  This provides the capability to capture drag events emitted\n     * on the page, which can then be used to simulate drag-and-drop.\n     */\n    async setDragInterception(enabled) {\n        this._userDragInterceptionEnabled = enabled;\n        return this._client.send('Input.setInterceptDrags', { enabled });\n    }\n    /**\n     * @param enabled - When `true`, enables offline mode for the page.\n     */\n    setOfflineMode(enabled) {\n        return this._frameManager.networkManager().setOfflineMode(enabled);\n    }\n    /**\n     * @param networkConditions - Passing `null` disables network condition emulation.\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const slow3G = puppeteer.networkConditions['Slow 3G'];\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * await page.emulateNetworkConditions(slow3G);\n     * await page.goto('https://www.google.com');\n     * // other actions...\n     * await browser.close();\n     * })();\n     * ```\n     * @remarks\n     * NOTE: This does not affect WebSockets and WebRTC PeerConnections (see\n     * https://crbug.com/563644)\n     */\n    emulateNetworkConditions(networkConditions) {\n        return this._frameManager\n            .networkManager()\n            .emulateNetworkConditions(networkConditions);\n    }\n    /**\n     * This setting will change the default maximum navigation time for the\n     * following methods and related shortcuts:\n     *\n     * - {@link Page.goBack | page.goBack(options)}\n     *\n     * - {@link Page.goForward | page.goForward(options)}\n     *\n     * - {@link Page.goto | page.goto(url,options)}\n     *\n     * - {@link Page.reload | page.reload(options)}\n     *\n     * - {@link Page.setContent | page.setContent(html,options)}\n     *\n     * - {@link Page.waitForNavigation | page.waitForNavigation(options)}\n     * @param timeout - Maximum navigation time in milliseconds.\n     */\n    setDefaultNavigationTimeout(timeout) {\n        this._timeoutSettings.setDefaultNavigationTimeout(timeout);\n    }\n    /**\n     * @param timeout - Maximum time in milliseconds.\n     */\n    setDefaultTimeout(timeout) {\n        this._timeoutSettings.setDefaultTimeout(timeout);\n    }\n    /**\n     * Runs `document.querySelector` within the page. If no element matches the\n     * selector, the return value resolves to `null`.\n     *\n     * @remarks\n     * Shortcut for {@link Frame.$ | Page.mainFrame().$(selector) }.\n     *\n     * @param selector - A `selector` to query page for\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query page for.\n     */\n    async $(selector) {\n        return this.mainFrame().$(selector);\n    }\n    /**\n     * @remarks\n     *\n     * The only difference between {@link Page.evaluate | page.evaluate} and\n     * `page.evaluateHandle` is that `evaluateHandle` will return the value\n     * wrapped in an in-page object.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluateHandle('document')\n     * ```\n     *\n     * @example\n     * {@link JSHandle} instances can be passed as arguments to the `pageFunction`:\n     * ```\n     * const aHandle = await page.evaluateHandle(() => document.body);\n     * const resultHandle = await page.evaluateHandle(body => body.innerHTML, aHandle);\n     * console.log(await resultHandle.jsonValue());\n     * await resultHandle.dispose();\n     * ```\n     *\n     * Most of the time this function returns a {@link JSHandle},\n     * but if `pageFunction` returns a reference to an element,\n     * you instead get an {@link ElementHandle} back:\n     *\n     * @example\n     * ```\n     * const button = await page.evaluateHandle(() => document.querySelector('button'));\n     * // can call `click` because `button` is an `ElementHandle`\n     * await button.click();\n     * ```\n     *\n     * The TypeScript definitions assume that `evaluateHandle` returns\n     *  a `JSHandle`, but if you know it's going to return an\n     * `ElementHandle`, pass it as the generic argument:\n     *\n     * ```\n     * const button = await page.evaluateHandle<ElementHandle>(...);\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        const context = await this.mainFrame().executionContext();\n        return context.evaluateHandle(pageFunction, ...args);\n    }\n    /**\n     * This method iterates the JavaScript heap and finds all objects with the\n     * given prototype.\n     *\n     * @remarks\n     * Shortcut for\n     * {@link ExecutionContext.queryObjects |\n     * page.mainFrame().executionContext().queryObjects(prototypeHandle)}.\n     *\n     * @example\n     *\n     * ```js\n     * // Create a Map object\n     * await page.evaluate(() => window.map = new Map());\n     * // Get a handle to the Map object prototype\n     * const mapPrototype = await page.evaluateHandle(() => Map.prototype);\n     * // Query all map instances into an array\n     * const mapInstances = await page.queryObjects(mapPrototype);\n     * // Count amount of map objects in heap\n     * const count = await page.evaluate(maps => maps.length, mapInstances);\n     * await mapInstances.dispose();\n     * await mapPrototype.dispose();\n     * ```\n     * @param prototypeHandle - a handle to the object prototype.\n     * @returns Promise which resolves to a handle to an array of objects with\n     * this prototype.\n     */\n    async queryObjects(prototypeHandle) {\n        const context = await this.mainFrame().executionContext();\n        return context.queryObjects(prototypeHandle);\n    }\n    /**\n     * This method runs `document.querySelector` within the page and passes the\n     * result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If no element is found matching `selector`, the method will throw an error.\n     *\n     * If `pageFunction` returns a promise `$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * const searchValue = await page.$eval('#search', el => el.value);\n     * const preloadHref = await page.$eval('link[rel=preload]', el => el.href);\n     * const html = await page.$eval('.main-container', el => el.outerHTML);\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * const searchValue = await page.$eval('#search', (el: HTMLInputElement) => el.value);\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const searchValue = await page.$eval<string>(\n     *  '#search', (el: HTMLInputElement) => el.value\n     * );\n     * ```\n     *\n     * @param selector - the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction - the function to be evaluated in the page context.\n     * Will be passed the result of `document.querySelector(selector)` as its\n     * first argument.\n     * @param args - any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * This method runs `Array.from(document.querySelectorAll(selector))` within\n     * the page and passes the result as the first argument to the `pageFunction`.\n     *\n     * @remarks\n     *\n     * If `pageFunction` returns a promise `$$eval` will wait for the promise to\n     * resolve and then return its value.\n     *\n     * @example\n     *\n     * ```\n     * // get the amount of divs on the page\n     * const divCount = await page.$$eval('div', divs => divs.length);\n     *\n     * // get the text content of all the `.options` elements:\n     * const options = await page.$$eval('div > span.options', options => {\n     *   return options.map(option => option.textContent)\n     * });\n     * ```\n     *\n     * If you are using TypeScript, you may have to provide an explicit type to the\n     * first argument of the `pageFunction`.\n     * By default it is typed as `Element[]`, but you may need to provide a more\n     * specific sub-type:\n     *\n     * @example\n     *\n     * ```\n     * // if you don't provide HTMLInputElement here, TS will error\n     * // as `value` is not on `Element`\n     * await page.$$eval('input', (elements: HTMLInputElement[]) => {\n     *   return elements.map(e => e.value);\n     * });\n     * ```\n     *\n     * The compiler should be able to infer the return type\n     * from the `pageFunction` you provide. If it is unable to, you can use the generic\n     * type to tell the compiler what return type you expect from `$$eval`:\n     *\n     * @example\n     *\n     * ```\n     * // The compiler can infer the return type in this case, but if it can't\n     * // or if you want to be more explicit, provide it as the generic type.\n     * const allInputValues = await page.$$eval<string[]>(\n     *  'input', (elements: HTMLInputElement[]) => elements.map(e => e.textContent)\n     * );\n     * ```\n     *\n     * @param selector - the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to query for\n     * @param pageFunction - the function to be evaluated in the page context. Will\n     * be passed the result of `Array.from(document.querySelectorAll(selector))`\n     * as its first argument.\n     * @param args - any additional arguments to pass through to `pageFunction`.\n     *\n     * @returns The result of calling `pageFunction`. If it returns an element it\n     * is wrapped in an {@link ElementHandle}, else the raw value itself is\n     * returned.\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        return this.mainFrame().$$eval(selector, pageFunction, ...args);\n    }\n    /**\n     * The method runs `document.querySelectorAll` within the page. If no elements\n     * match the selector, the return value resolves to `[]`.\n     * @remarks\n     * Shortcut for {@link Frame.$$ | Page.mainFrame().$$(selector) }.\n     * @param selector - A `selector` to query page for\n     */\n    async $$(selector) {\n        return this.mainFrame().$$(selector);\n    }\n    /**\n     * The method evaluates the XPath expression relative to the page document as\n     * its context node. If there are no such elements, the method resolves to an\n     * empty array.\n     * @remarks\n     * Shortcut for {@link Frame.$x | Page.mainFrame().$x(expression) }.\n     * @param expression - Expression to evaluate\n     */\n    async $x(expression) {\n        return this.mainFrame().$x(expression);\n    }\n    /**\n     * If no URLs are specified, this method returns cookies for the current page\n     * URL. If URLs are specified, only cookies for those URLs are returned.\n     */\n    async cookies(...urls) {\n        const originalCookies = (await this._client.send('Network.getCookies', {\n            urls: urls.length ? urls : [this.url()],\n        })).cookies;\n        const unsupportedCookieAttributes = ['priority'];\n        const filterUnsupportedAttributes = (cookie) => {\n            for (const attr of unsupportedCookieAttributes)\n                delete cookie[attr];\n            return cookie;\n        };\n        return originalCookies.map(filterUnsupportedAttributes);\n    }\n    async deleteCookie(...cookies) {\n        const pageURL = this.url();\n        for (const cookie of cookies) {\n            const item = Object.assign({}, cookie);\n            if (!cookie.url && pageURL.startsWith('http'))\n                item.url = pageURL;\n            await this._client.send('Network.deleteCookies', item);\n        }\n    }\n    /**\n     * @example\n     * ```js\n     * await page.setCookie(cookieObject1, cookieObject2);\n     * ```\n     */\n    async setCookie(...cookies) {\n        const pageURL = this.url();\n        const startsWithHTTP = pageURL.startsWith('http');\n        const items = cookies.map((cookie) => {\n            const item = Object.assign({}, cookie);\n            if (!item.url && startsWithHTTP)\n                item.url = pageURL;\n            assert_js_1.assert(item.url !== 'about:blank', `Blank page can not have cookie \"${item.name}\"`);\n            assert_js_1.assert(!String.prototype.startsWith.call(item.url || '', 'data:'), `Data URL page can not have cookie \"${item.name}\"`);\n            return item;\n        });\n        await this.deleteCookie(...items);\n        if (items.length)\n            await this._client.send('Network.setCookies', { cookies: items });\n    }\n    /**\n     * Adds a `<script>` tag into the page with the desired URL or content.\n     * @remarks\n     * Shortcut for {@link Frame.addScriptTag | page.mainFrame().addScriptTag(options) }.\n     * @returns Promise which resolves to the added tag when the script's onload fires or\n     * when the script content was injected into frame.\n     */\n    async addScriptTag(options) {\n        return this.mainFrame().addScriptTag(options);\n    }\n    /**\n     * Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or a\n     * `<style type=\"text/css\">` tag with the content.\n     * @returns Promise which resolves to the added tag when the stylesheet's\n     * onload fires or when the CSS content was injected into frame.\n     */\n    async addStyleTag(options) {\n        return this.mainFrame().addStyleTag(options);\n    }\n    /**\n     * The method adds a function called `name` on the page's `window` object. When\n     * called, the function executes `puppeteerFunction` in node.js and returns a\n     * `Promise` which resolves to the return value of `puppeteerFunction`.\n     *\n     * If the puppeteerFunction returns a `Promise`, it will be awaited.\n     *\n     * NOTE: Functions installed via `page.exposeFunction` survive navigations.\n     * @param name - Name of the function on the window object\n     * @param puppeteerFunction -  Callback function which will be called in\n     * Puppeteer's context.\n     * @example\n     * An example of adding an `md5` function into the page:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const crypto = require('crypto');\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * page.on('console', (msg) => console.log(msg.text()));\n     * await page.exposeFunction('md5', (text) =>\n     * crypto.createHash('md5').update(text).digest('hex')\n     * );\n     * await page.evaluate(async () => {\n     * // use window.md5 to compute hashes\n     * const myString = 'PUPPETEER';\n     * const myHash = await window.md5(myString);\n     * console.log(`md5 of ${myString} is ${myHash}`);\n     * });\n     * await browser.close();\n     * })();\n     * ```\n     * An example of adding a `window.readfile` function into the page:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const fs = require('fs');\n     *\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * page.on('console', (msg) => console.log(msg.text()));\n     * await page.exposeFunction('readfile', async (filePath) => {\n     * return new Promise((resolve, reject) => {\n     * fs.readFile(filePath, 'utf8', (err, text) => {\n     *    if (err) reject(err);\n     *    else resolve(text);\n     *  });\n     * });\n     * });\n     * await page.evaluate(async () => {\n     * // use window.readfile to read contents of a file\n     * const content = await window.readfile('/etc/hosts');\n     * console.log(content);\n     * });\n     * await browser.close();\n     * })();\n     * ```\n     */\n    async exposeFunction(name, puppeteerFunction) {\n        if (this._pageBindings.has(name))\n            throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);\n        this._pageBindings.set(name, puppeteerFunction);\n        const expression = helper_js_1.helper.pageBindingInitString('exposedFun', name);\n        await this._client.send('Runtime.addBinding', { name: name });\n        await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n            source: expression,\n        });\n        await Promise.all(this.frames().map((frame) => frame.evaluate(expression).catch(helper_js_1.debugError)));\n    }\n    /**\n     * Provide credentials for `HTTP authentication`.\n     * @remarks To disable authentication, pass `null`.\n     */\n    async authenticate(credentials) {\n        return this._frameManager.networkManager().authenticate(credentials);\n    }\n    /**\n     * The extra HTTP headers will be sent with every request the page initiates.\n     * NOTE: All HTTP header names are lowercased. (HTTP headers are\n     * case-insensitive, so this shouldn’t impact your server code.)\n     * NOTE: page.setExtraHTTPHeaders does not guarantee the order of headers in\n     * the outgoing requests.\n     * @param headers - An object containing additional HTTP headers to be sent\n     * with every request. All header values must be strings.\n     * @returns\n     */\n    async setExtraHTTPHeaders(headers) {\n        return this._frameManager.networkManager().setExtraHTTPHeaders(headers);\n    }\n    /**\n     * @param userAgent - Specific user agent to use in this page\n     * @returns Promise which resolves when the user agent is set.\n     */\n    async setUserAgent(userAgent) {\n        return this._frameManager.networkManager().setUserAgent(userAgent);\n    }\n    /**\n     * @returns Object containing metrics as key/value pairs.\n     *\n     * - `Timestamp` : <number> The timestamp when the metrics sample was taken.\n     *\n     * - `Documents` : <number> Number of documents in the page.\n     *\n     * - `Frames` : <number> Number of frames in the page.\n     *\n     * - `JSEventListeners` : <number> Number of events in the page.\n     *\n     * - `Nodes` : <number> Number of DOM nodes in the page.\n     *\n     * - `LayoutCount` : <number> Total number of full or partial page layout.\n     *\n     * - `RecalcStyleCount` : <number> Total number of page style recalculations.\n     *\n     * - `LayoutDuration` : <number> Combined durations of all page layouts.\n     *\n     * - `RecalcStyleDuration` : <number> Combined duration of all page style\n     *   recalculations.\n     *\n     * - `ScriptDuration` : <number> Combined duration of JavaScript execution.\n     *\n     * - `TaskDuration` : <number> Combined duration of all tasks performed by the browser.\n     *\n     * - `JSHeapUsedSize` : <number> Used JavaScript heap size.\n     *\n     * - `JSHeapTotalSize` : <number> Total JavaScript heap size.\n     * @remarks\n     * NOTE: All timestamps are in monotonic time: monotonically increasing time\n     * in seconds since an arbitrary point in the past.\n     */\n    async metrics() {\n        const response = await this._client.send('Performance.getMetrics');\n        return this._buildMetricsObject(response.metrics);\n    }\n    _emitMetrics(event) {\n        this.emit(\"metrics\" /* Metrics */, {\n            title: event.title,\n            metrics: this._buildMetricsObject(event.metrics),\n        });\n    }\n    _buildMetricsObject(metrics) {\n        const result = {};\n        for (const metric of metrics || []) {\n            if (supportedMetrics.has(metric.name))\n                result[metric.name] = metric.value;\n        }\n        return result;\n    }\n    _handleException(exceptionDetails) {\n        const message = helper_js_1.helper.getExceptionMessage(exceptionDetails);\n        const err = new Error(message);\n        err.stack = ''; // Don't report clientside error with a node stack attached\n        this.emit(\"pageerror\" /* PageError */, err);\n    }\n    async _onConsoleAPI(event) {\n        if (event.executionContextId === 0) {\n            // DevTools protocol stores the last 1000 console messages. These\n            // messages are always reported even for removed execution contexts. In\n            // this case, they are marked with executionContextId = 0 and are\n            // reported upon enabling Runtime agent.\n            //\n            // Ignore these messages since:\n            // - there's no execution context we can use to operate with message\n            //   arguments\n            // - these messages are reported before Puppeteer clients can subscribe\n            //   to the 'console'\n            //   page event.\n            //\n            // @see https://github.com/puppeteer/puppeteer/issues/3865\n            return;\n        }\n        const context = this._frameManager.executionContextById(event.executionContextId);\n        const values = event.args.map((arg) => JSHandle_js_1.createJSHandle(context, arg));\n        this._addConsoleMessage(event.type, values, event.stackTrace);\n    }\n    async _onBindingCalled(event) {\n        let payload;\n        try {\n            payload = JSON.parse(event.payload);\n        }\n        catch {\n            // The binding was either called by something in the page or it was\n            // called before our wrapper was initialized.\n            return;\n        }\n        const { type, name, seq, args } = payload;\n        if (type !== 'exposedFun' || !this._pageBindings.has(name))\n            return;\n        let expression = null;\n        try {\n            const result = await this._pageBindings.get(name)(...args);\n            expression = helper_js_1.helper.pageBindingDeliverResultString(name, seq, result);\n        }\n        catch (error) {\n            if (error instanceof Error)\n                expression = helper_js_1.helper.pageBindingDeliverErrorString(name, seq, error.message, error.stack);\n            else\n                expression = helper_js_1.helper.pageBindingDeliverErrorValueString(name, seq, error);\n        }\n        this._client\n            .send('Runtime.evaluate', {\n            expression,\n            contextId: event.executionContextId,\n        })\n            .catch(helper_js_1.debugError);\n    }\n    _addConsoleMessage(type, args, stackTrace) {\n        if (!this.listenerCount(\"console\" /* Console */)) {\n            args.forEach((arg) => arg.dispose());\n            return;\n        }\n        const textTokens = [];\n        for (const arg of args) {\n            const remoteObject = arg._remoteObject;\n            if (remoteObject.objectId)\n                textTokens.push(arg.toString());\n            else\n                textTokens.push(helper_js_1.helper.valueFromRemoteObject(remoteObject));\n        }\n        const stackTraceLocations = [];\n        if (stackTrace) {\n            for (const callFrame of stackTrace.callFrames) {\n                stackTraceLocations.push({\n                    url: callFrame.url,\n                    lineNumber: callFrame.lineNumber,\n                    columnNumber: callFrame.columnNumber,\n                });\n            }\n        }\n        const message = new ConsoleMessage_js_1.ConsoleMessage(type, textTokens.join(' '), args, stackTraceLocations);\n        this.emit(\"console\" /* Console */, message);\n    }\n    _onDialog(event) {\n        let dialogType = null;\n        const validDialogTypes = new Set([\n            'alert',\n            'confirm',\n            'prompt',\n            'beforeunload',\n        ]);\n        if (validDialogTypes.has(event.type)) {\n            dialogType = event.type;\n        }\n        assert_js_1.assert(dialogType, 'Unknown javascript dialog type: ' + event.type);\n        const dialog = new Dialog_js_1.Dialog(this._client, dialogType, event.message, event.defaultPrompt);\n        this.emit(\"dialog\" /* Dialog */, dialog);\n    }\n    /**\n     * Resets default white background\n     */\n    async _resetDefaultBackgroundColor() {\n        await this._client.send('Emulation.setDefaultBackgroundColorOverride');\n    }\n    /**\n     * Hides default white background\n     */\n    async _setTransparentBackgroundColor() {\n        await this._client.send('Emulation.setDefaultBackgroundColorOverride', {\n            color: { r: 0, g: 0, b: 0, a: 0 },\n        });\n    }\n    /**\n     *\n     * @returns\n     * @remarks Shortcut for\n     * {@link Frame.url | page.mainFrame().url()}.\n     */\n    url() {\n        return this.mainFrame().url();\n    }\n    async content() {\n        return await this._frameManager.mainFrame().content();\n    }\n    /**\n     * @param html - HTML markup to assign to the page.\n     * @param options - Parameters that has some properties.\n     * @remarks\n     * The parameter `options` might have the following options.\n     *\n     * - `timeout` : Maximum time in milliseconds for resources to load, defaults\n     *   to 30 seconds, pass `0` to disable timeout. The default value can be\n     *   changed by using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n     *   When to consider setting markup succeeded, defaults to `load`. Given an\n     *   array of event strings, setting content is considered to be successful\n     *   after all events have been fired. Events can be either:<br/>\n     *  - `load` : consider setting content to be finished when the `load` event is\n     *    fired.<br/>\n     *  - `domcontentloaded` : consider setting content to be finished when the\n     *   `DOMContentLoaded` event is fired.<br/>\n     *  - `networkidle0` : consider setting content to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider setting content to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async setContent(html, options = {}) {\n        await this._frameManager.mainFrame().setContent(html, options);\n    }\n    /**\n     * @param url - URL to navigate page to. The URL should include scheme, e.g.\n     * `https://`\n     * @param options - Navigation Parameter\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`:\n     *   <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array> When to\n     *   consider navigation succeeded, defaults to `load`. Given an array of\n     *   event strings, navigation is considered to be successful after all events\n     *   have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is\n     *    fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *    DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *    more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *    more than 2 network connections for at least `500` ms.\n     *\n     * - `referer` : Referer header value. If provided it will take preference\n     *   over the referer header value set by\n     *   {@link Page.setExtraHTTPHeaders |page.setExtraHTTPHeaders()}.\n     *\n     * `page.goto` will throw an error if:\n     * - there's an SSL error (e.g. in case of self-signed certificates).\n     * - target URL is invalid.\n     * - the timeout is exceeded during navigation.\n     * - the remote server does not respond or is unreachable.\n     * - the main resource failed to load.\n     *\n     * `page.goto` will not throw an error when any valid HTTP status code is\n     *   returned by the remote server, including 404 \"Not Found\" and 500\n     *   \"Internal Server Error\". The status code for such responses can be\n     *   retrieved by calling response.status().\n     *\n     * NOTE: `page.goto` either throws an error or returns a main resource\n     * response. The only exceptions are navigation to about:blank or navigation\n     * to the same URL with a different hash, which would succeed and return null.\n     *\n     * NOTE: Headless mode doesn't support navigation to a PDF document. See the\n     * {@link https://bugs.chromium.org/p/chromium/issues/detail?id=761295\n     * | upstream issue}.\n     *\n     * Shortcut for {@link Frame.goto | page.mainFrame().goto(url, options)}.\n     */\n    async goto(url, options = {}) {\n        return await this._frameManager.mainFrame().goto(url, options);\n    }\n    /**\n     * @param options - Navigation parameters which might have the following\n     * properties:\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout |\n     *   page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n     *   When to consider navigation succeeded, defaults to `load`. Given an array\n     *   of event strings, navigation is considered to be successful after all\n     *   events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async reload(options) {\n        const result = await Promise.all([\n            this.waitForNavigation(options),\n            this._client.send('Page.reload'),\n        ]);\n        return result[0];\n    }\n    /**\n     * This resolves when the page navigates to a new URL or reloads. It is useful\n     * when you run code that will indirectly cause the page to navigate. Consider\n     * this example:\n     * ```js\n     * const [response] = await Promise.all([\n     * page.waitForNavigation(), // The promise resolves after navigation has finished\n     * page.click('a.my-link'), // Clicking the link will indirectly cause a navigation\n     * ]);\n     * ```\n     *\n     * @param options - Navigation parameters which might have the following properties:\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. In case of navigation to a different anchor or navigation\n     * due to History API usage, the navigation will resolve with `null`.\n     * @remarks\n     * NOTE: Usage of the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/History_API | History API}\n     * to change the URL is considered a navigation.\n     *\n     * Shortcut for\n     * {@link Frame.waitForNavigation | page.mainFrame().waitForNavigation(options)}.\n     */\n    async waitForNavigation(options = {}) {\n        return await this._frameManager.mainFrame().waitForNavigation(options);\n    }\n    _sessionClosePromise() {\n        if (!this._disconnectPromise)\n            this._disconnectPromise = new Promise((fulfill) => this._client.once(Connection_js_1.CDPSessionEmittedEvents.Disconnected, () => fulfill(new Error('Target closed'))));\n        return this._disconnectPromise;\n    }\n    /**\n     * @param urlOrPredicate - A URL or predicate to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves to the matched response\n     * @example\n     * ```js\n     * const firstResponse = await page.waitForResponse(\n     * 'https://example.com/resource'\n     * );\n     * const finalResponse = await page.waitForResponse(\n     * (response) =>\n     * response.url() === 'https://example.com' && response.status() === 200\n     * );\n     * const finalResponse = await page.waitForResponse(async (response) => {\n     * return (await response.text()).includes('<html>');\n     * });\n     * return finalResponse.ok();\n     * ```\n     * @remarks\n     * Optional Waiting Parameters have:\n     *\n     * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds, pass\n     * `0` to disable the timeout. The default value can be changed by using the\n     * {@link Page.setDefaultTimeout} method.\n     */\n    async waitForRequest(urlOrPredicate, options = {}) {\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Request, (request) => {\n            if (helper_js_1.helper.isString(urlOrPredicate))\n                return urlOrPredicate === request.url();\n            if (typeof urlOrPredicate === 'function')\n                return !!urlOrPredicate(request);\n            return false;\n        }, timeout, this._sessionClosePromise());\n    }\n    /**\n     * @param urlOrPredicate - A URL or predicate to wait for.\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves to the matched response.\n     * @example\n     * ```js\n     * const firstResponse = await page.waitForResponse(\n     * 'https://example.com/resource'\n     * );\n     * const finalResponse = await page.waitForResponse(\n     * (response) =>\n     * response.url() === 'https://example.com' && response.status() === 200\n     * );\n     * const finalResponse = await page.waitForResponse(async (response) => {\n     * return (await response.text()).includes('<html>');\n     * });\n     * return finalResponse.ok();\n     * ```\n     * @remarks\n     * Optional Parameter have:\n     *\n     * - `timeout`: Maximum wait time in milliseconds, defaults to `30` seconds,\n     * pass `0` to disable the timeout. The default value can be changed by using\n     * the {@link Page.setDefaultTimeout} method.\n     */\n    async waitForResponse(urlOrPredicate, options = {}) {\n        const { timeout = this._timeoutSettings.timeout() } = options;\n        return helper_js_1.helper.waitForEvent(this._frameManager.networkManager(), NetworkManager_js_1.NetworkManagerEmittedEvents.Response, async (response) => {\n            if (helper_js_1.helper.isString(urlOrPredicate))\n                return urlOrPredicate === response.url();\n            if (typeof urlOrPredicate === 'function')\n                return !!(await urlOrPredicate(response));\n            return false;\n        }, timeout, this._sessionClosePromise());\n    }\n    /**\n     * This method navigate to the previous page in history.\n     * @param options - Navigation parameters\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. If can not go back, resolves to `null`.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout\n     *   | page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil` : <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n     *   When to consider navigation succeeded, defaults to `load`. Given an array\n     *   of event strings, navigation is considered to be successful after all\n     *   events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async goBack(options = {}) {\n        return this._go(-1, options);\n    }\n    /**\n     * This method navigate to the next page in history.\n     * @param options - Navigation Parameter\n     * @returns Promise which resolves to the main resource response. In case of\n     * multiple redirects, the navigation will resolve with the response of the\n     * last redirect. If can not go forward, resolves to `null`.\n     * @remarks\n     * The argument `options` might have the following properties:\n     *\n     * - `timeout` : Maximum navigation time in milliseconds, defaults to 30\n     *   seconds, pass 0 to disable timeout. The default value can be changed by\n     *   using the\n     *   {@link Page.setDefaultNavigationTimeout\n     *   | page.setDefaultNavigationTimeout(timeout)}\n     *   or {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)}\n     *   methods.\n     *\n     * - `waitUntil`: <\"load\"|\"domcontentloaded\"|\"networkidle0\"|\"networkidle2\"|Array>\n     *   When to consider navigation succeeded, defaults to `load`. Given an array\n     *   of event strings, navigation is considered to be successful after all\n     *   events have been fired. Events can be either:<br/>\n     *  - `load` : consider navigation to be finished when the load event is fired.<br/>\n     *  - `domcontentloaded` : consider navigation to be finished when the\n     *   DOMContentLoaded event is fired.<br/>\n     *  - `networkidle0` : consider navigation to be finished when there are no\n     *   more than 0 network connections for at least `500` ms.<br/>\n     *  - `networkidle2` : consider navigation to be finished when there are no\n     *   more than 2 network connections for at least `500` ms.\n     */\n    async goForward(options = {}) {\n        return this._go(+1, options);\n    }\n    async _go(delta, options) {\n        const history = await this._client.send('Page.getNavigationHistory');\n        const entry = history.entries[history.currentIndex + delta];\n        if (!entry)\n            return null;\n        const result = await Promise.all([\n            this.waitForNavigation(options),\n            this._client.send('Page.navigateToHistoryEntry', { entryId: entry.id }),\n        ]);\n        return result[0];\n    }\n    /**\n     * Brings page to front (activates tab).\n     */\n    async bringToFront() {\n        await this._client.send('Page.bringToFront');\n    }\n    /**\n     * Emulates given device metrics and user agent. This method is a shortcut for\n     * calling two methods: {@link Page.setUserAgent} and {@link Page.setViewport}\n     * To aid emulation, Puppeteer provides a list of device descriptors that can\n     * be obtained via the {@link Puppeteer.devices} `page.emulate` will resize\n     * the page. A lot of websites don't expect phones to change size, so you\n     * should emulate before navigating to the page.\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const iPhone = puppeteer.devices['iPhone 6'];\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * await page.emulate(iPhone);\n     * await page.goto('https://www.google.com');\n     * // other actions...\n     * await browser.close();\n     * })();\n     * ```\n     * @remarks List of all available devices is available in the source code:\n     * {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n     */\n    async emulate(options) {\n        await Promise.all([\n            this.setViewport(options.viewport),\n            this.setUserAgent(options.userAgent),\n        ]);\n    }\n    /**\n     * @param enabled - Whether or not to enable JavaScript on the page.\n     * @returns\n     * @remarks\n     * NOTE: changing this value won't affect scripts that have already been run.\n     * It will take full effect on the next navigation.\n     */\n    async setJavaScriptEnabled(enabled) {\n        if (this._javascriptEnabled === enabled)\n            return;\n        this._javascriptEnabled = enabled;\n        await this._client.send('Emulation.setScriptExecutionDisabled', {\n            value: !enabled,\n        });\n    }\n    /**\n     * Toggles bypassing page's Content-Security-Policy.\n     * @param enabled - sets bypassing of page's Content-Security-Policy.\n     * @remarks\n     * NOTE: CSP bypassing happens at the moment of CSP initialization rather than\n     * evaluation. Usually, this means that `page.setBypassCSP` should be called\n     * before navigating to the domain.\n     */\n    async setBypassCSP(enabled) {\n        await this._client.send('Page.setBypassCSP', { enabled });\n    }\n    /**\n     * @param type - Changes the CSS media type of the page. The only allowed\n     * values are `screen`, `print` and `null`. Passing `null` disables CSS media\n     * emulation.\n     * @example\n     * ```\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → false\n     *\n     * await page.emulateMediaType('print');\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → false\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → true\n     *\n     * await page.emulateMediaType(null);\n     * await page.evaluate(() => matchMedia('screen').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('print').matches);\n     * // → false\n     * ```\n     */\n    async emulateMediaType(type) {\n        assert_js_1.assert(type === 'screen' || type === 'print' || type === null, 'Unsupported media type: ' + type);\n        await this._client.send('Emulation.setEmulatedMedia', {\n            media: type || '',\n        });\n    }\n    async emulateCPUThrottling(factor) {\n        assert_js_1.assert(factor === null || factor >= 1, 'Throttling rate should be greater or equal to 1');\n        await this._client.send('Emulation.setCPUThrottlingRate', {\n            rate: factor !== null ? factor : 1,\n        });\n    }\n    /**\n     * @param features - `<?Array<Object>>` Given an array of media feature\n     * objects, emulates CSS media features on the page. Each media feature object\n     * must have the following properties:\n     * @example\n     * ```js\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-color-scheme', value: 'dark' },\n     * ]);\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n     * // → false\n     *\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-reduced-motion', value: 'reduce' },\n     * ]);\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n     * );\n     * // → true\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n     * );\n     * // → false\n     *\n     * await page.emulateMediaFeatures([\n     * { name: 'prefers-color-scheme', value: 'dark' },\n     * { name: 'prefers-reduced-motion', value: 'reduce' },\n     * ]);\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: dark)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(prefers-color-scheme: light)').matches);\n     * // → false\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: reduce)').matches\n     * );\n     * // → true\n     * await page.evaluate(\n     * () => matchMedia('(prefers-reduced-motion: no-preference)').matches\n     * );\n     * // → false\n     *\n     * await page.emulateMediaFeatures([{ name: 'color-gamut', value: 'p3' }]);\n     * await page.evaluate(() => matchMedia('(color-gamut: srgb)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(color-gamut: p3)').matches);\n     * // → true\n     * await page.evaluate(() => matchMedia('(color-gamut: rec2020)').matches);\n     * // → false\n     * ```\n     */\n    async emulateMediaFeatures(features) {\n        if (features === null)\n            await this._client.send('Emulation.setEmulatedMedia', { features: null });\n        if (Array.isArray(features)) {\n            features.every((mediaFeature) => {\n                const name = mediaFeature.name;\n                assert_js_1.assert(/^(?:prefers-(?:color-scheme|reduced-motion)|color-gamut)$/.test(name), 'Unsupported media feature: ' + name);\n                return true;\n            });\n            await this._client.send('Emulation.setEmulatedMedia', {\n                features: features,\n            });\n        }\n    }\n    /**\n     * @param timezoneId - Changes the timezone of the page. See\n     * {@link https://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt}\n     * for a list of supported timezone IDs. Passing\n     * `null` disables timezone emulation.\n     */\n    async emulateTimezone(timezoneId) {\n        try {\n            await this._client.send('Emulation.setTimezoneOverride', {\n                timezoneId: timezoneId || '',\n            });\n        }\n        catch (error) {\n            if (error.message.includes('Invalid timezone'))\n                throw new Error(`Invalid timezone ID: ${timezoneId}`);\n            throw error;\n        }\n    }\n    /**\n     * Emulates the idle state.\n     * If no arguments set, clears idle state emulation.\n     *\n     * @example\n     * ```js\n     * // set idle emulation\n     * await page.emulateIdleState({isUserActive: true, isScreenUnlocked: false});\n     *\n     * // do some checks here\n     * ...\n     *\n     * // clear idle emulation\n     * await page.emulateIdleState();\n     * ```\n     *\n     * @param overrides - Mock idle state. If not set, clears idle overrides\n     */\n    async emulateIdleState(overrides) {\n        if (overrides) {\n            await this._client.send('Emulation.setIdleOverride', {\n                isUserActive: overrides.isUserActive,\n                isScreenUnlocked: overrides.isScreenUnlocked,\n            });\n        }\n        else {\n            await this._client.send('Emulation.clearIdleOverride');\n        }\n    }\n    /**\n     * Simulates the given vision deficiency on the page.\n     *\n     * @example\n     * ```js\n     * const puppeteer = require('puppeteer');\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.goto('https://v8.dev/blog/10-years');\n     *\n     *   await page.emulateVisionDeficiency('achromatopsia');\n     *   await page.screenshot({ path: 'achromatopsia.png' });\n     *\n     *   await page.emulateVisionDeficiency('deuteranopia');\n     *   await page.screenshot({ path: 'deuteranopia.png' });\n     *\n     *   await page.emulateVisionDeficiency('blurredVision');\n     *   await page.screenshot({ path: 'blurred-vision.png' });\n     *\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     * @param type - the type of deficiency to simulate, or `'none'` to reset.\n     */\n    async emulateVisionDeficiency(type) {\n        const visionDeficiencies = new Set([\n            'none',\n            'achromatopsia',\n            'blurredVision',\n            'deuteranopia',\n            'protanopia',\n            'tritanopia',\n        ]);\n        try {\n            assert_js_1.assert(!type || visionDeficiencies.has(type), `Unsupported vision deficiency: ${type}`);\n            await this._client.send('Emulation.setEmulatedVisionDeficiency', {\n                type: type || 'none',\n            });\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    /**\n     * `page.setViewport` will resize the page. A lot of websites don't expect\n     * phones to change size, so you should set the viewport before navigating to\n     * the page.\n     *\n     * In the case of multiple pages in a single browser, each page can have its\n     * own viewport size.\n     * @example\n     * ```js\n     * const page = await browser.newPage();\n     * await page.setViewport({\n     * width: 640,\n     * height: 480,\n     * deviceScaleFactor: 1,\n     * });\n     * await page.goto('https://example.com');\n     * ```\n     *\n     * @param viewport\n     * @remarks\n     * Argument viewport have following properties:\n     *\n     * - `width`: page width in pixels. required\n     *\n     * - `height`: page height in pixels. required\n     *\n     * - `deviceScaleFactor`: Specify device scale factor (can be thought of as\n     *   DPR). Defaults to `1`.\n     *\n     * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n     *   to `false`.\n     *\n     * - `hasTouch`: Specifies if viewport supports touch events. Defaults to `false`\n     *\n     * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to false.\n     *\n     * NOTE: in certain cases, setting viewport will reload the page in order to\n     * set the isMobile or hasTouch properties.\n     */\n    async setViewport(viewport) {\n        const needsReload = await this._emulationManager.emulateViewport(viewport);\n        this._viewport = viewport;\n        if (needsReload)\n            await this.reload();\n    }\n    /**\n     * @returns\n     *\n     * - `width`: page's width in pixels\n     *\n     * - `height`: page's height in pixels\n     *\n     * - `deviceScalarFactor`: Specify device scale factor (can be though of as\n     *   dpr). Defaults to `1`.\n     *\n     * - `isMobile`: Whether the meta viewport tag is taken into account. Defaults\n     *   to `false`.\n     *\n     * - `hasTouch`: Specifies if viewport supports touch events. Defaults to\n     *   `false`.\n     *\n     * - `isLandScape`: Specifies if viewport is in landscape mode. Defaults to\n     *   `false`.\n     */\n    viewport() {\n        return this._viewport;\n    }\n    /**\n     * @remarks\n     *\n     * Evaluates a function in the page's context and returns the result.\n     *\n     * If the function passed to `page.evaluteHandle` returns a Promise, the\n     * function will wait for the promise to resolve and return its value.\n     *\n     * @example\n     *\n     * ```js\n     * const result = await frame.evaluate(() => {\n     *   return Promise.resolve(8 * 7);\n     * });\n     * console.log(result); // prints \"56\"\n     * ```\n     *\n     * You can pass a string instead of a function (although functions are\n     * recommended as they are easier to debug and use with TypeScript):\n     *\n     * @example\n     * ```\n     * const aHandle = await page.evaluate('1 + 2');\n     * ```\n     *\n     * To get the best TypeScript experience, you should pass in as the\n     * generic the type of `pageFunction`:\n     *\n     * ```\n     * const aHandle = await page.evaluate<() => number>(() => 2);\n     * ```\n     *\n     * @example\n     *\n     * {@link ElementHandle} instances (including {@link JSHandle}s) can be passed\n     * as arguments to the `pageFunction`:\n     *\n     * ```\n     * const bodyHandle = await page.$('body');\n     * const html = await page.evaluate(body => body.innerHTML, bodyHandle);\n     * await bodyHandle.dispose();\n     * ```\n     *\n     * @param pageFunction - a function that is run within the page\n     * @param args - arguments to be passed to the pageFunction\n     *\n     * @returns the return value of `pageFunction`.\n     */\n    async evaluate(pageFunction, ...args) {\n        return this._frameManager.mainFrame().evaluate(pageFunction, ...args);\n    }\n    /**\n     * Adds a function which would be invoked in one of the following scenarios:\n     *\n     * - whenever the page is navigated\n     *\n     * - whenever the child frame is attached or navigated. In this case, the\n     * function is invoked in the context of the newly attached frame.\n     *\n     * The function is invoked after the document was created but before any of\n     * its scripts were run. This is useful to amend the JavaScript environment,\n     * e.g. to seed `Math.random`.\n     * @param pageFunction - Function to be evaluated in browser context\n     * @param args - Arguments to pass to `pageFunction`\n     * @example\n     * An example of overriding the navigator.languages property before the page loads:\n     * ```js\n     * // preload.js\n     *\n     * // overwrite the `languages` property to use a custom getter\n     * Object.defineProperty(navigator, 'languages', {\n     * get: function () {\n     * return ['en-US', 'en', 'bn'];\n     * },\n     * });\n     *\n     * // In your puppeteer script, assuming the preload.js file is\n     * in same folder of our script\n     * const preloadFile = fs.readFileSync('./preload.js', 'utf8');\n     * await page.evaluateOnNewDocument(preloadFile);\n     * ```\n     */\n    async evaluateOnNewDocument(pageFunction, ...args) {\n        const source = helper_js_1.helper.evaluationString(pageFunction, ...args);\n        await this._client.send('Page.addScriptToEvaluateOnNewDocument', {\n            source,\n        });\n    }\n    /**\n     * Toggles ignoring cache for each request based on the enabled state. By\n     * default, caching is enabled.\n     * @param enabled - sets the `enabled` state of cache\n     */\n    async setCacheEnabled(enabled = true) {\n        await this._frameManager.networkManager().setCacheEnabled(enabled);\n    }\n    /**\n     * @remarks\n     * Options object which might have the following properties:\n     *\n     * - `path` : <string> The file path to save the image to. The screenshot type\n     *   will be inferred from file extension. If `path` is a relative path, then\n     *   it is resolved relative to\n     *   {@link https://nodejs.org/api/process.html#process_process_cwd\n     *   | current working directory}.\n     *   If no path is provided, the image won't be saved to the disk.\n     *\n     * - `type` : <string> Specify screenshot type, can be either `jpeg` or `png`.\n     *   Defaults to 'png'.\n     *\n     * - `quality` : <number> The quality of the image, between 0-100. Not\n     *   applicable to `png` images.\n     *\n     * - `fullPage` : <boolean> When true, takes a screenshot of the full\n     *   scrollable page. Defaults to `false`\n     *\n     * - `clip` : <Object> An object which specifies clipping region of the page.\n     *   Should have the following fields:<br/>\n     *  - `x` : <number> x-coordinate of top-left corner of clip area.<br/>\n     *  - `y` :  <number> y-coordinate of top-left corner of clip area.<br/>\n     *  - `width` : <number> width of clipping area.<br/>\n     *  - `height` : <number> height of clipping area.\n     *\n     * - `omitBackground` : <boolean> Hides default white background and allows\n     *   capturing screenshots with transparency. Defaults to `false`\n     *\n     * - `encoding` : <string> The encoding of the image, can be either base64 or\n     *   binary. Defaults to `binary`.\n     *\n     *\n     * NOTE: Screenshots take at least 1/6 second on OS X. See\n     * {@link https://crbug.com/741689} for discussion.\n     * @returns Promise which resolves to buffer or a base64 string (depending on\n     * the value of `encoding`) with captured screenshot.\n     */\n    async screenshot(options = {}) {\n        let screenshotType = null;\n        // options.type takes precedence over inferring the type from options.path\n        // because it may be a 0-length file with no extension created beforehand\n        // (i.e. as a temp file).\n        if (options.type) {\n            assert_js_1.assert(options.type === 'png' || options.type === 'jpeg', 'Unknown options.type value: ' + options.type);\n            screenshotType = options.type;\n        }\n        else if (options.path) {\n            const filePath = options.path;\n            const extension = filePath\n                .slice(filePath.lastIndexOf('.') + 1)\n                .toLowerCase();\n            if (extension === 'png')\n                screenshotType = 'png';\n            else if (extension === 'jpg' || extension === 'jpeg')\n                screenshotType = 'jpeg';\n            assert_js_1.assert(screenshotType, `Unsupported screenshot type for extension \\`.${extension}\\``);\n        }\n        if (!screenshotType)\n            screenshotType = 'png';\n        if (options.quality) {\n            assert_js_1.assert(screenshotType === 'jpeg', 'options.quality is unsupported for the ' +\n                screenshotType +\n                ' screenshots');\n            assert_js_1.assert(typeof options.quality === 'number', 'Expected options.quality to be a number but found ' +\n                typeof options.quality);\n            assert_js_1.assert(Number.isInteger(options.quality), 'Expected options.quality to be an integer');\n            assert_js_1.assert(options.quality >= 0 && options.quality <= 100, 'Expected options.quality to be between 0 and 100 (inclusive), got ' +\n                options.quality);\n        }\n        assert_js_1.assert(!options.clip || !options.fullPage, 'options.clip and options.fullPage are exclusive');\n        if (options.clip) {\n            assert_js_1.assert(typeof options.clip.x === 'number', 'Expected options.clip.x to be a number but found ' +\n                typeof options.clip.x);\n            assert_js_1.assert(typeof options.clip.y === 'number', 'Expected options.clip.y to be a number but found ' +\n                typeof options.clip.y);\n            assert_js_1.assert(typeof options.clip.width === 'number', 'Expected options.clip.width to be a number but found ' +\n                typeof options.clip.width);\n            assert_js_1.assert(typeof options.clip.height === 'number', 'Expected options.clip.height to be a number but found ' +\n                typeof options.clip.height);\n            assert_js_1.assert(options.clip.width !== 0, 'Expected options.clip.width not to be 0.');\n            assert_js_1.assert(options.clip.height !== 0, 'Expected options.clip.height not to be 0.');\n        }\n        return this._screenshotTaskQueue.postTask(() => this._screenshotTask(screenshotType, options));\n    }\n    async _screenshotTask(format, options) {\n        await this._client.send('Target.activateTarget', {\n            targetId: this._target._targetId,\n        });\n        let clip = options.clip ? processClip(options.clip) : undefined;\n        let { captureBeyondViewport = true } = options;\n        captureBeyondViewport =\n            typeof captureBeyondViewport === 'boolean' ? captureBeyondViewport : true;\n        if (options.fullPage) {\n            const metrics = await this._client.send('Page.getLayoutMetrics');\n            const width = Math.ceil(metrics.contentSize.width);\n            const height = Math.ceil(metrics.contentSize.height);\n            // Overwrite clip for full page.\n            clip = { x: 0, y: 0, width, height, scale: 1 };\n            if (!captureBeyondViewport) {\n                const { isMobile = false, deviceScaleFactor = 1, isLandscape = false, } = this._viewport || {};\n                const screenOrientation = isLandscape\n                    ? { angle: 90, type: 'landscapePrimary' }\n                    : { angle: 0, type: 'portraitPrimary' };\n                await this._client.send('Emulation.setDeviceMetricsOverride', {\n                    mobile: isMobile,\n                    width,\n                    height,\n                    deviceScaleFactor,\n                    screenOrientation,\n                });\n            }\n        }\n        const shouldSetDefaultBackground = options.omitBackground && format === 'png';\n        if (shouldSetDefaultBackground) {\n            await this._setTransparentBackgroundColor();\n        }\n        const result = await this._client.send('Page.captureScreenshot', {\n            format,\n            quality: options.quality,\n            clip,\n            captureBeyondViewport,\n        });\n        if (shouldSetDefaultBackground) {\n            await this._resetDefaultBackgroundColor();\n        }\n        if (options.fullPage && this._viewport)\n            await this.setViewport(this._viewport);\n        const buffer = options.encoding === 'base64'\n            ? result.data\n            : Buffer.from(result.data, 'base64');\n        if (options.path) {\n            if (!environment_js_1.isNode) {\n                throw new Error('Screenshots can only be written to a file path in a Node environment.');\n            }\n            const fs = await helper_js_1.helper.importFSModule();\n            await fs.promises.writeFile(options.path, buffer);\n        }\n        return buffer;\n        function processClip(clip) {\n            const x = Math.round(clip.x);\n            const y = Math.round(clip.y);\n            const width = Math.round(clip.width + clip.x - x);\n            const height = Math.round(clip.height + clip.y - y);\n            return { x, y, width, height, scale: 1 };\n        }\n    }\n    /**\n     * Generatees a PDF of the page with the `print` CSS media type.\n     * @remarks\n     *\n     * NOTE: PDF generation is only supported in Chrome headless mode.\n     *\n     * To generate a PDF with the `screen` media type, call\n     * {@link Page.emulateMediaType | `page.emulateMediaType('screen')`} before\n     * calling `page.pdf()`.\n     *\n     * By default, `page.pdf()` generates a pdf with modified colors for printing.\n     * Use the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-print-color-adjust | `-webkit-print-color-adjust`}\n     * property to force rendering of exact colors.\n     *\n     *\n     * @param options - options for generating the PDF.\n     */\n    async createPDFStream(options = {}) {\n        const { scale = 1, displayHeaderFooter = false, headerTemplate = '', footerTemplate = '', printBackground = false, landscape = false, pageRanges = '', preferCSSPageSize = false, margin = {}, omitBackground = false, } = options;\n        let paperWidth = 8.5;\n        let paperHeight = 11;\n        if (options.format) {\n            const format = PDFOptions_js_1.paperFormats[options.format.toLowerCase()];\n            assert_js_1.assert(format, 'Unknown paper format: ' + options.format);\n            paperWidth = format.width;\n            paperHeight = format.height;\n        }\n        else {\n            paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n            paperHeight =\n                convertPrintParameterToInches(options.height) || paperHeight;\n        }\n        const marginTop = convertPrintParameterToInches(margin.top) || 0;\n        const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n        const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n        const marginRight = convertPrintParameterToInches(margin.right) || 0;\n        if (omitBackground) {\n            await this._setTransparentBackgroundColor();\n        }\n        const result = await this._client.send('Page.printToPDF', {\n            transferMode: 'ReturnAsStream',\n            landscape,\n            displayHeaderFooter,\n            headerTemplate,\n            footerTemplate,\n            printBackground,\n            scale,\n            paperWidth,\n            paperHeight,\n            marginTop,\n            marginBottom,\n            marginLeft,\n            marginRight,\n            pageRanges,\n            preferCSSPageSize,\n        });\n        if (omitBackground) {\n            await this._resetDefaultBackgroundColor();\n        }\n        return helper_js_1.helper.getReadableFromProtocolStream(this._client, result.stream);\n    }\n    /**\n     * @param {!PDFOptions=} options\n     * @returns {!Promise<!Buffer>}\n     */\n    async pdf(options = {}) {\n        const { path = undefined } = options;\n        const readable = await this.createPDFStream(options);\n        return await helper_js_1.helper.getReadableAsBuffer(readable, path);\n    }\n    /**\n     * @returns The page's title\n     * @remarks\n     * Shortcut for {@link Frame.title | page.mainFrame().title()}.\n     */\n    async title() {\n        return this.mainFrame().title();\n    }\n    async close(options = { runBeforeUnload: undefined }) {\n        assert_js_1.assert(!!this._client._connection, 'Protocol error: Connection closed. Most likely the page has been closed.');\n        const runBeforeUnload = !!options.runBeforeUnload;\n        if (runBeforeUnload) {\n            await this._client.send('Page.close');\n        }\n        else {\n            await this._client._connection.send('Target.closeTarget', {\n                targetId: this._target._targetId,\n            });\n            await this._target._isClosedPromise;\n        }\n    }\n    /**\n     * Indicates that the page has been closed.\n     * @returns\n     */\n    isClosed() {\n        return this._closed;\n    }\n    get mouse() {\n        return this._mouse;\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.mouse} to click in the center of the\n     * element. If there's no element matching `selector`, the method throws an\n     * error.\n     * @remarks Bear in mind that if `click()` triggers a navigation event and\n     * there's a separate `page.waitForNavigation()` promise to be resolved, you\n     * may end up with a race condition that yields unexpected results. The\n     * correct pattern for click and wait for navigation is the following:\n     * ```js\n     * const [response] = await Promise.all([\n     * page.waitForNavigation(waitOptions),\n     * page.click(selector, clickOptions),\n     * ]);\n     * ```\n     * Shortcut for {@link Frame.click | page.mainFrame().click(selector[, options]) }.\n     * @param selector - A `selector` to search for element to click. If there are\n     * multiple elements satisfying the `selector`, the first will be clicked\n     * @param options - `Object`\n     * @returns Promise which resolves when the element matching `selector` is\n     * successfully clicked. The Promise will be rejected if there is no element\n     * matching `selector`.\n     */\n    click(selector, options = {}) {\n        return this.mainFrame().click(selector, options);\n    }\n    /**\n     * This method fetches an element with `selector` and focuses it. If there's no\n     * element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector }\n     * of an element to focus. If there are multiple elements satisfying the\n     * selector, the first will be focused.\n     * @returns  Promise which resolves when the element matching selector is\n     * successfully focused. The promise will be rejected if there is no element\n     * matching selector.\n     * @remarks\n     * Shortcut for {@link Frame.focus | page.mainFrame().focus(selector)}.\n     */\n    focus(selector) {\n        return this.mainFrame().focus(selector);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.mouse} to hover over the center of the element.\n     * If there's no element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * to search for element to hover. If there are multiple elements satisfying\n     * the selector, the first will be hovered.\n     * @returns Promise which resolves when the element matching `selector` is\n     * successfully hovered. Promise gets rejected if there's no element matching\n     * `selector`.\n     * @remarks\n     * Shortcut for {@link Page.hover | page.mainFrame().hover(selector)}.\n     */\n    hover(selector) {\n        return this.mainFrame().hover(selector);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have been\n     * selected. If there's no `<select>` element matching `selector`, the method\n     * throws an error.\n     *\n     * @example\n     * ```js\n     * page.select('select#colors', 'blue'); // single selection\n     * page.select('select#colors', 'red', 'green', 'blue'); // multiple selections\n     * ```\n     * @param selector - A {@link https://developer.mozilla.org/en-US/docs/Web/CSS/\n     * CSS_Selectors | Selector} to query the page for\n     * @param values - Values of options to select. If the `<select>` has the\n     * `multiple` attribute, all values are considered, otherwise only the first one\n     * is taken into account.\n     * @returns\n     *\n     * @remarks\n     * Shortcut for {@link Frame.select | page.mainFrame().select()}\n     */\n    select(selector, ...values) {\n        return this.mainFrame().select(selector, ...values);\n    }\n    /**\n     * This method fetches an element with `selector`, scrolls it into view if\n     * needed, and then uses {@link Page.touchscreen} to tap in the center of the element.\n     * If there's no element matching `selector`, the method throws an error.\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | Selector}\n     * to search for element to tap. If there are multiple elements satisfying the\n     * selector, the first will be tapped.\n     * @returns\n     * @remarks\n     * Shortcut for {@link Frame.tap | page.mainFrame().tap(selector)}.\n     */\n    tap(selector) {\n        return this.mainFrame().tap(selector);\n    }\n    /**\n     * Sends a `keydown`, `keypress/input`, and `keyup` event for each character\n     * in the text.\n     *\n     * To press a special key, like `Control` or `ArrowDown`, use {@link Keyboard.press}.\n     * @example\n     * ```\n     * await page.type('#mytextarea', 'Hello');\n     * // Types instantly\n     * await page.type('#mytextarea', 'World', { delay: 100 });\n     * // Types slower, like a user\n     * ```\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * of an element to type into. If there are multiple elements satisfying the\n     * selector, the first will be used.\n     * @param text - A text to type into a focused element.\n     * @param options - have property `delay` which is the Time to wait between\n     * key presses in milliseconds. Defaults to `0`.\n     * @returns\n     * {@link page.mainFrame().type(selector, text[, options])}\n     */\n    type(selector, text, options) {\n        return this.mainFrame().type(selector, text, options);\n    }\n    /**\n     * @remarks\n     *\n     * This method behaves differently depending on the first parameter. If it's a\n     * `string`, it will be treated as a `selector` or `xpath` (if the string\n     * starts with `//`). This method then is a shortcut for\n     * {@link Page.waitForSelector} or {@link Page.waitForXPath}.\n     *\n     * If the first argument is a function this method is a shortcut for\n     * {@link Page.waitForFunction}.\n     *\n     * If the first argument is a `number`, it's treated as a timeout in\n     * milliseconds and the method returns a promise which resolves after the\n     * timeout.\n     *\n     * @param selectorOrFunctionOrTimeout - a selector, predicate or timeout to\n     * wait for.\n     * @param options - optional waiting parameters.\n     * @param args - arguments to pass to `pageFunction`.\n     *\n     * @deprecated Don't use this method directly. Instead use the more explicit\n     * methods available: {@link Page.waitForSelector},\n     * {@link Page.waitForXPath}, {@link Page.waitForFunction} or\n     * {@link Page.waitForTimeout}.\n     */\n    waitFor(selectorOrFunctionOrTimeout, options = {}, ...args) {\n        return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);\n    }\n    /**\n     * Causes your script to wait for the given number of milliseconds.\n     *\n     * @remarks\n     *\n     * It's generally recommended to not wait for a number of seconds, but instead\n     * use {@link Page.waitForSelector}, {@link Page.waitForXPath} or\n     * {@link Page.waitForFunction} to wait for exactly the conditions you want.\n     *\n     * @example\n     *\n     * Wait for 1 second:\n     *\n     * ```\n     * await page.waitForTimeout(1000);\n     * ```\n     *\n     * @param milliseconds - the number of milliseconds to wait.\n     */\n    waitForTimeout(milliseconds) {\n        return this.mainFrame().waitForTimeout(milliseconds);\n    }\n    /**\n     * Wait for the `selector` to appear in page. If at the moment of calling the\n     * method the `selector` already exists, the method will return immediately. If\n     * the `selector` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * This method works across navigations:\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * let currentURL;\n     * page\n     * .waitForSelector('img')\n     * .then(() => console.log('First URL with image: ' + currentURL));\n     * for (currentURL of [\n     * 'https://example.com',\n     * 'https://google.com',\n     * 'https://bbc.com',\n     * ]) {\n     * await page.goto(currentURL);\n     * }\n     * await browser.close();\n     * })();\n     * ```\n     * @param selector - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}\n     * of an element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by selector string\n     * is added to DOM. Resolves to `null` if waiting for hidden: `true` and\n     * selector is not found in DOM.\n     * @remarks\n     * The optional Parameter in Arguments `options` are :\n     *\n     * - `Visible`: A boolean wait for element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: ait for element to not be found in the DOM or to be hidden,\n     * i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to\n     * `false`.\n     *\n     * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n     * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n     * by using the {@link Page.setDefaultTimeout} method.\n     */\n    waitForSelector(selector, options = {}) {\n        return this.mainFrame().waitForSelector(selector, options);\n    }\n    /**\n     * Wait for the `xpath` to appear in page. If at the moment of calling the\n     * method the `xpath` already exists, the method will return immediately. If\n     * the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the\n     * function will throw.\n     *\n     * This method works across navigation\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * let currentURL;\n     * page\n     * .waitForXPath('//img')\n     * .then(() => console.log('First URL with image: ' + currentURL));\n     * for (currentURL of [\n     * 'https://example.com',\n     * 'https://google.com',\n     * 'https://bbc.com',\n     * ]) {\n     * await page.goto(currentURL);\n     * }\n     * await browser.close();\n     * })();\n     * ```\n     * @param xpath - A\n     * {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an\n     * element to wait for\n     * @param options - Optional waiting parameters\n     * @returns Promise which resolves when element specified by xpath string is\n     * added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is\n     * not found in DOM.\n     * @remarks\n     * The optional Argument `options` have properties:\n     *\n     * - `visible`: A boolean to wait for element to be present in DOM and to be\n     * visible, i.e. to not have `display: none` or `visibility: hidden` CSS\n     * properties. Defaults to `false`.\n     *\n     * - `hidden`: A boolean wait for element to not be found in the DOM or to be\n     * hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.\n     * Defaults to `false`.\n     *\n     * - `timeout`: A number which is maximum time to wait for in milliseconds.\n     * Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default\n     * value can be changed by using the {@link Page.setDefaultTimeout} method.\n     */\n    waitForXPath(xpath, options = {}) {\n        return this.mainFrame().waitForXPath(xpath, options);\n    }\n    /**\n     * The `waitForFunction` can be used to observe viewport size change:\n     *\n     * ```\n     * const puppeteer = require('puppeteer');\n     * (async () => {\n     * const browser = await puppeteer.launch();\n     * const page = await browser.newPage();\n     * const watchDog = page.waitForFunction('window.innerWidth < 100');\n     * await page.setViewport({ width: 50, height: 50 });\n     * await watchDog;\n     * await browser.close();\n     * })();\n     * ```\n     * To pass arguments from node.js to the predicate of `page.waitForFunction` function:\n     * ```\n     * const selector = '.foo';\n     * await page.waitForFunction(\n     * (selector) => !!document.querySelector(selector),\n     * {},\n     * selector\n     * );\n     * ```\n     * The predicate of `page.waitForFunction` can be asynchronous too:\n     * ```\n     * const username = 'github-username';\n     * await page.waitForFunction(\n     * async (username) => {\n     * const githubResponse = await fetch(\n     *  `https://api.github.com/users/${username}`\n     * );\n     * const githubUser = await githubResponse.json();\n     * // show the avatar\n     * const img = document.createElement('img');\n     * img.src = githubUser.avatar_url;\n     * // wait 3 seconds\n     * await new Promise((resolve, reject) => setTimeout(resolve, 3000));\n     * img.remove();\n     * },\n     * {},\n     * username\n     * );\n     * ```\n     * @param pageFunction - Function to be evaluated in browser context\n     * @param options - Optional waiting parameters\n     * @param args -  Arguments to pass to `pageFunction`\n     * @returns Promise which resolves when the `pageFunction` returns a truthy\n     * value. It resolves to a JSHandle of the truthy value.\n     *\n     * The optional waiting parameter can be:\n     *\n     * - `Polling`: An interval at which the `pageFunction` is executed, defaults to\n     *   `raf`. If `polling` is a number, then it is treated as an interval in\n     *   milliseconds at which the function would be executed. If polling is a\n     *   string, then it can be one of the following values:<br/>\n     *    - `raf`: to constantly execute `pageFunction` in `requestAnimationFrame`\n     *      callback. This is the tightest polling mode which is suitable to\n     *      observe styling changes.<br/>\n     *    - `mutation`: to execute pageFunction on every DOM mutation.\n     *\n     * - `timeout`: maximum time to wait for in milliseconds. Defaults to `30000`\n     * (30 seconds). Pass `0` to disable timeout. The default value can be changed\n     * by using the\n     * {@link Page.setDefaultTimeout | page.setDefaultTimeout(timeout)} method.\n     *\n     */\n    waitForFunction(pageFunction, options = {}, ...args) {\n        return this.mainFrame().waitForFunction(pageFunction, options, ...args);\n    }\n}\nexports.Page = Page;\nconst supportedMetrics = new Set([\n    'Timestamp',\n    'Documents',\n    'Frames',\n    'JSEventListeners',\n    'Nodes',\n    'LayoutCount',\n    'RecalcStyleCount',\n    'LayoutDuration',\n    'RecalcStyleDuration',\n    'ScriptDuration',\n    'TaskDuration',\n    'JSHeapUsedSize',\n    'JSHeapTotalSize',\n]);\nconst unitToPixels = {\n    px: 1,\n    in: 96,\n    cm: 37.8,\n    mm: 3.78,\n};\nfunction convertPrintParameterToInches(parameter) {\n    if (typeof parameter === 'undefined')\n        return undefined;\n    let pixels;\n    if (helper_js_1.helper.isNumber(parameter)) {\n        // Treat numbers as pixel values to be aligned with phantom's paperSize.\n        pixels = /** @type {number} */ parameter;\n    }\n    else if (helper_js_1.helper.isString(parameter)) {\n        const text = /** @type {string} */ parameter;\n        let unit = text.substring(text.length - 2).toLowerCase();\n        let valueText = '';\n        if (unitToPixels.hasOwnProperty(unit)) {\n            valueText = text.substring(0, text.length - 2);\n        }\n        else {\n            // In case of unknown unit try to parse the whole parameter as number of pixels.\n            // This is consistent with phantom's paperSize behavior.\n            unit = 'px';\n            valueText = text;\n        }\n        const value = Number(valueText);\n        assert_js_1.assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n        pixels = value * unitToPixels[unit];\n    }\n    else {\n        throw new Error('page.pdf() Cannot handle parameter type: ' + typeof parameter);\n    }\n    return pixels / 96;\n}\n//# sourceMappingURL=Page.js.map"]},"metadata":{},"sourceType":"script"}