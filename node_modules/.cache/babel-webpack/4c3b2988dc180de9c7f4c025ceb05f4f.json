{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\nimport { helper, debugError } from './helper.js';\nimport { getQueryHandlerAndSelector } from './QueryHandler.js';\nimport { isNode } from '../environment.js';\n/**\n * @internal\n */\n\nexport function createJSHandle(context, remoteObject) {\n  const frame = context.frame();\n\n  if (remoteObject.subtype === 'node' && frame) {\n    const frameManager = frame._frameManager;\n    return new ElementHandle(context, context._client, remoteObject, frameManager.page(), frameManager);\n  }\n\n  return new JSHandle(context, context._client, remoteObject);\n}\n/**\n * Represents an in-page JavaScript object. JSHandles can be created with the\n * {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected\n * unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto-\n * disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval},\n * {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\n\nexport class JSHandle {\n  /**\n   * @internal\n   */\n  constructor(context, client, remoteObject) {\n    /**\n     * @internal\n     */\n    this._disposed = false;\n    this._context = context;\n    this._client = client;\n    this._remoteObject = remoteObject;\n  }\n  /** Returns the execution context the handle belongs to.\n   */\n\n\n  executionContext() {\n    return this._context;\n  }\n  /**\n   * This method passes this handle as the first argument to `pageFunction`.\n   * If `pageFunction` returns a Promise, then `handle.evaluate` would wait\n   * for the promise to resolve and return its value.\n   *\n   * @example\n   * ```js\n   * const tweetHandle = await page.$('.tweet .retweets');\n   * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n   * ```\n   */\n\n\n  evaluate(pageFunction, ...args) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this.executionContext().evaluate(pageFunction, _this, ...args);\n    })();\n  }\n  /**\n   * This method passes this handle as the first argument to `pageFunction`.\n   *\n   * @remarks\n   *\n   * The only difference between `jsHandle.evaluate` and\n   * `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`\n   * returns an in-page object (JSHandle).\n   *\n   * If the function passed to `jsHandle.evaluateHandle` returns a Promise,\n   * then `evaluateHandle.evaluateHandle` waits for the promise to resolve and\n   * returns its value.\n   *\n   * See {@link Page.evaluateHandle} for more details.\n   */\n\n\n  evaluateHandle(pageFunction, ...args) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this2.executionContext().evaluateHandle(pageFunction, _this2, ...args);\n    })();\n  }\n  /** Fetches a single property from the referenced object.\n   */\n\n\n  getProperty(propertyName) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const objectHandle = yield _this3.evaluateHandle((object, propertyName) => {\n        const result = {\n          __proto__: null\n        };\n        result[propertyName] = object[propertyName];\n        return result;\n      }, propertyName);\n      const properties = yield objectHandle.getProperties();\n      const result = properties.get(propertyName) || null;\n      yield objectHandle.dispose();\n      return result;\n    })();\n  }\n  /**\n   * The method returns a map with property names as keys and JSHandle\n   * instances for the property values.\n   *\n   * @example\n   * ```js\n   * const listHandle = await page.evaluateHandle(() => document.body.children);\n   * const properties = await listHandle.getProperties();\n   * const children = [];\n   * for (const property of properties.values()) {\n   *   const element = property.asElement();\n   *   if (element)\n   *     children.push(element);\n   * }\n   * children; // holds elementHandles to all children of document.body\n   * ```\n   */\n\n\n  getProperties() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this4._client.send('Runtime.getProperties', {\n        objectId: _this4._remoteObject.objectId,\n        ownProperties: true\n      });\n      const result = new Map();\n\n      for (const property of response.result) {\n        if (!property.enumerable) continue;\n        result.set(property.name, createJSHandle(_this4._context, property.value));\n      }\n\n      return result;\n    })();\n  }\n  /**\n   * @returns Returns a JSON representation of the object.If the object has a\n   * `toJSON` function, it will not be called.\n   * @remarks\n   *\n   * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify}\n   * on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer.\n   * **NOTE** The method throws if the referenced object is not stringifiable.\n   */\n\n\n  jsonValue() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5._remoteObject.objectId) {\n        const response = yield _this5._client.send('Runtime.callFunctionOn', {\n          functionDeclaration: 'function() { return this; }',\n          objectId: _this5._remoteObject.objectId,\n          returnByValue: true,\n          awaitPromise: true\n        });\n        return helper.valueFromRemoteObject(response.result);\n      }\n\n      return helper.valueFromRemoteObject(_this5._remoteObject);\n    })();\n  }\n  /**\n   * @returns Either `null` or the object handle itself, if the object\n   * handle is an instance of {@link ElementHandle}.\n   */\n\n\n  asElement() {\n    /*  This always returns null, but subclasses can override this and return an\n        ElementHandle.\n    */\n    return null;\n  }\n  /**\n   * Stops referencing the element handle, and resolves when the object handle is\n   * successfully disposed of.\n   */\n\n\n  dispose() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this6._disposed) return;\n      _this6._disposed = true;\n      yield helper.releaseObject(_this6._client, _this6._remoteObject);\n    })();\n  }\n  /**\n   * Returns a string representation of the JSHandle.\n   *\n   * @remarks Useful during debugging.\n   */\n\n\n  toString() {\n    if (this._remoteObject.objectId) {\n      const type = this._remoteObject.subtype || this._remoteObject.type;\n      return 'JSHandle@' + type;\n    }\n\n    return 'JSHandle:' + helper.valueFromRemoteObject(this._remoteObject);\n  }\n\n}\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\n\nexport class ElementHandle extends JSHandle {\n  /**\n   * @internal\n   */\n  constructor(context, client, remoteObject, page, frameManager) {\n    super(context, client, remoteObject);\n    this._client = client;\n    this._remoteObject = remoteObject;\n    this._page = page;\n    this._frameManager = frameManager;\n  }\n\n  asElement() {\n    return this;\n  }\n  /**\n   * Resolves to the content frame for element handles referencing\n   * iframe nodes, or null otherwise\n   */\n\n\n  contentFrame() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const nodeInfo = yield _this7._client.send('DOM.describeNode', {\n        objectId: _this7._remoteObject.objectId\n      });\n      if (typeof nodeInfo.node.frameId !== 'string') return null;\n      return _this7._frameManager.frame(nodeInfo.node.frameId);\n    })();\n  }\n\n  _scrollIntoViewIfNeeded() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const error = yield _this8.evaluate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (element, pageJavascriptEnabled) {\n          if (!element.isConnected) return 'Node is detached from document';\n          if (element.nodeType !== Node.ELEMENT_NODE) return 'Node is not of type HTMLElement'; // force-scroll if page's javascript is disabled.\n\n          if (!pageJavascriptEnabled) {\n            element.scrollIntoView({\n              block: 'center',\n              inline: 'center',\n              // @ts-expect-error Chrome still supports behavior: instant but\n              // it's not in the spec so TS shouts We don't want to make this\n              // breaking change in Puppeteer yet so we'll ignore the line.\n              behavior: 'instant'\n            });\n            return false;\n          }\n\n          const visibleRatio = yield new Promise(resolve => {\n            const observer = new IntersectionObserver(entries => {\n              resolve(entries[0].intersectionRatio);\n              observer.disconnect();\n            });\n            observer.observe(element);\n          });\n\n          if (visibleRatio !== 1.0) {\n            element.scrollIntoView({\n              block: 'center',\n              inline: 'center',\n              // @ts-expect-error Chrome still supports behavior: instant but\n              // it's not in the spec so TS shouts We don't want to make this\n              // breaking change in Puppeteer yet so we'll ignore the line.\n              behavior: 'instant'\n            });\n          }\n\n          return false;\n        });\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }(), _this8._page.isJavaScriptEnabled());\n      if (error) throw new Error(error);\n    })();\n  }\n\n  clickablePoint() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const [result, layoutMetrics] = yield Promise.all([_this9._client.send('DOM.getContentQuads', {\n        objectId: _this9._remoteObject.objectId\n      }).catch(debugError), _this9._client.send('Page.getLayoutMetrics')]);\n      if (!result || !result.quads.length) throw new Error('Node is either not visible or not an HTMLElement'); // Filter out quads that have too small area to click into.\n\n      const {\n        clientWidth,\n        clientHeight\n      } = layoutMetrics.layoutViewport;\n      const quads = result.quads.map(quad => _this9._fromProtocolQuad(quad)).map(quad => _this9._intersectQuadWithViewport(quad, clientWidth, clientHeight)).filter(quad => computeQuadArea(quad) > 1);\n      if (!quads.length) throw new Error('Node is either not visible or not an HTMLElement'); // Return the middle point of the first quad.\n\n      const quad = quads[0];\n      let x = 0;\n      let y = 0;\n\n      for (const point of quad) {\n        x += point.x;\n        y += point.y;\n      }\n\n      return {\n        x: x / 4,\n        y: y / 4\n      };\n    })();\n  }\n\n  _getBoxModel() {\n    const params = {\n      objectId: this._remoteObject.objectId\n    };\n    return this._client.send('DOM.getBoxModel', params).catch(error => debugError(error));\n  }\n\n  _fromProtocolQuad(quad) {\n    return [{\n      x: quad[0],\n      y: quad[1]\n    }, {\n      x: quad[2],\n      y: quad[3]\n    }, {\n      x: quad[4],\n      y: quad[5]\n    }, {\n      x: quad[6],\n      y: quad[7]\n    }];\n  }\n\n  _intersectQuadWithViewport(quad, width, height) {\n    return quad.map(point => ({\n      x: Math.min(Math.max(point.x, 0), width),\n      y: Math.min(Math.max(point.y, 0), height)\n    }));\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to hover over the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  hover() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this10._scrollIntoViewIfNeeded();\n      const {\n        x,\n        y\n      } = yield _this10.clickablePoint();\n      yield _this10._page.mouse.move(x, y);\n    })();\n  }\n  /**\n   * This method scrolls element into view if needed, and then\n   * uses {@link Page.mouse} to click in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  click(options = {}) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this11._scrollIntoViewIfNeeded();\n      const {\n        x,\n        y\n      } = yield _this11.clickablePoint();\n      yield _this11._page.mouse.click(x, y, options);\n    })();\n  }\n  /**\n   * This method creates and captures a dragevent from the element.\n   */\n\n\n  drag(target) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      assert(_this12._page.isDragInterceptionEnabled, 'Drag Interception is not enabled!');\n      yield _this12._scrollIntoViewIfNeeded();\n      const start = yield _this12.clickablePoint();\n      return yield _this12._page.mouse.drag(start, target);\n    })();\n  }\n  /**\n   * This method creates a `dragenter` event on the element.\n   */\n\n\n  dragEnter(data = {\n    items: [],\n    dragOperationsMask: 1\n  }) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this13._scrollIntoViewIfNeeded();\n      const target = yield _this13.clickablePoint();\n      yield _this13._page.mouse.dragEnter(target, data);\n    })();\n  }\n  /**\n   * This method creates a `dragover` event on the element.\n   */\n\n\n  dragOver(data = {\n    items: [],\n    dragOperationsMask: 1\n  }) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this14._scrollIntoViewIfNeeded();\n      const target = yield _this14.clickablePoint();\n      yield _this14._page.mouse.dragOver(target, data);\n    })();\n  }\n  /**\n   * This method triggers a drop on the element.\n   */\n\n\n  drop(data = {\n    items: [],\n    dragOperationsMask: 1\n  }) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this15._scrollIntoViewIfNeeded();\n      const destination = yield _this15.clickablePoint();\n      yield _this15._page.mouse.drop(destination, data);\n    })();\n  }\n  /**\n   * This method triggers a dragenter, dragover, and drop on the element.\n   */\n\n\n  dragAndDrop(target, options) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this16._scrollIntoViewIfNeeded();\n      const startPoint = yield _this16.clickablePoint();\n      const targetPoint = yield target.clickablePoint();\n      yield _this16._page.mouse.dragAndDrop(startPoint, targetPoint, options);\n    })();\n  }\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been\n   * selected. If there's no `<select>` element matching `selector`, the method\n   * throws an error.\n   *\n   * @example\n   * ```js\n   * handle.select('blue'); // single selection\n   * handle.select('red', 'green', 'blue'); // multiple selections\n   * ```\n   * @param values - Values of options to select. If the `<select>` has the\n   *    `multiple` attribute, all values are considered, otherwise only the first\n   *    one is taken into account.\n   */\n\n\n  select(...values) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      for (const value of values) assert(helper.isString(value), 'Values must be strings. Found value \"' + value + '\" of type \"' + typeof value + '\"');\n\n      return _this17.evaluate((element, values) => {\n        if (!(element instanceof HTMLSelectElement)) throw new Error('Element is not a <select> element.');\n        const options = Array.from(element.options);\n        element.value = undefined;\n\n        for (const option of options) {\n          option.selected = values.includes(option.value);\n          if (option.selected && !element.multiple) break;\n        }\n\n        element.dispatchEvent(new Event('input', {\n          bubbles: true\n        }));\n        element.dispatchEvent(new Event('change', {\n          bubbles: true\n        }));\n        return options.filter(option => option.selected).map(option => option.value);\n      }, values);\n    })();\n  }\n  /**\n   * This method expects `elementHandle` to point to an\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n   * @param filePaths - Sets the value of the file input to these paths.\n   *    If some of the  `filePaths` are relative paths, then they are resolved\n   *    relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}\n   */\n\n\n  uploadFile(...filePaths) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      const isMultiple = yield _this18.evaluate(element => {\n        if (!(element instanceof HTMLInputElement)) {\n          throw new Error('uploadFile can only be called on an input element.');\n        }\n\n        return element.multiple;\n      });\n      assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n\n      if (!isNode) {\n        throw new Error(`JSHandle#uploadFile can only be used in Node environments.`);\n      }\n      /*\n       This import is only needed for `uploadFile`, so keep it scoped here to\n       avoid paying the cost unnecessarily.\n      */\n\n\n      const path = yield import('path');\n      const fs = yield helper.importFSModule(); // Locate all files and confirm that they exist.\n\n      const files = yield Promise.all(filePaths.map( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (filePath) {\n          const resolvedPath = path.resolve(filePath);\n\n          try {\n            yield fs.promises.access(resolvedPath, fs.constants.R_OK);\n          } catch (error) {\n            if (error.code === 'ENOENT') throw new Error(`${filePath} does not exist or is not readable`);\n          }\n\n          return resolvedPath;\n        });\n\n        return function (_x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      const {\n        objectId\n      } = _this18._remoteObject;\n      const {\n        node\n      } = yield _this18._client.send('DOM.describeNode', {\n        objectId\n      });\n      const {\n        backendNodeId\n      } = node;\n      /*  The zero-length array is a special case, it seems that\n          DOM.setFileInputFiles does not actually update the files in that case,\n          so the solution is to eval the element value to a new FileList directly.\n      */\n\n      if (files.length === 0) {\n        yield _this18.evaluate(element => {\n          element.files = new DataTransfer().files; // Dispatch events for this case because it should behave akin to a user action.\n\n          element.dispatchEvent(new Event('input', {\n            bubbles: true\n          }));\n          element.dispatchEvent(new Event('change', {\n            bubbles: true\n          }));\n        });\n      } else {\n        yield _this18._client.send('DOM.setFileInputFiles', {\n          objectId,\n          files,\n          backendNodeId\n        });\n      }\n    })();\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Touchscreen.tap} to tap in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  tap() {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this19._scrollIntoViewIfNeeded();\n      const {\n        x,\n        y\n      } = yield _this19.clickablePoint();\n      yield _this19._page.touchscreen.tap(x, y);\n    })();\n  }\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n   */\n\n\n  focus() {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this20.evaluate(element => element.focus());\n    })();\n  }\n  /**\n   * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n   * `keyup` event for each character in the text.\n   *\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link ElementHandle.press}.\n   *\n   * @example\n   * ```js\n   * await elementHandle.type('Hello'); // Types instantly\n   * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @example\n   * An example of typing into a text field and then submitting the form:\n   *\n   * ```js\n   * const elementHandle = await page.$('input');\n   * await elementHandle.type('some text');\n   * await elementHandle.press('Enter');\n   * ```\n   */\n\n\n  type(text, options) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this21.focus();\n      yield _this21._page.keyboard.type(text, options);\n    })();\n  }\n  /**\n   * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also be generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n   * will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   *    See {@link KeyInput} for a list of all key names.\n   */\n\n\n  press(key, options) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this22.focus();\n      yield _this22._page.keyboard.press(key, options);\n    })();\n  }\n  /**\n   * This method returns the bounding box of the element (relative to the main frame),\n   * or `null` if the element is not visible.\n   */\n\n\n  boundingBox() {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this23._getBoxModel();\n      if (!result) return null;\n      const quad = result.model.border;\n      const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n      const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n      return {\n        x,\n        y,\n        width,\n        height\n      };\n    })();\n  }\n  /**\n   * This method returns boxes of the element, or `null` if the element is not visible.\n   *\n   * @remarks\n   *\n   * Boxes are represented as an array of points;\n   * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n   */\n\n\n  boxModel() {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this24._getBoxModel();\n      if (!result) return null;\n      const {\n        content,\n        padding,\n        border,\n        margin,\n        width,\n        height\n      } = result.model;\n      return {\n        content: _this24._fromProtocolQuad(content),\n        padding: _this24._fromProtocolQuad(padding),\n        border: _this24._fromProtocolQuad(border),\n        margin: _this24._fromProtocolQuad(margin),\n        width,\n        height\n      };\n    })();\n  }\n  /**\n   * This method scrolls element into view if needed, and then uses\n   * {@link Page.screenshot} to take a screenshot of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n\n\n  screenshot(options = {}) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      let needsViewportReset = false;\n      let boundingBox = yield _this25.boundingBox();\n      assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n\n      const viewport = _this25._page.viewport();\n\n      if (viewport && (boundingBox.width > viewport.width || boundingBox.height > viewport.height)) {\n        const newViewport = {\n          width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n          height: Math.max(viewport.height, Math.ceil(boundingBox.height))\n        };\n        yield _this25._page.setViewport(Object.assign({}, viewport, newViewport));\n        needsViewportReset = true;\n      }\n\n      yield _this25._scrollIntoViewIfNeeded();\n      boundingBox = yield _this25.boundingBox();\n      assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n      assert(boundingBox.width !== 0, 'Node has 0 width.');\n      assert(boundingBox.height !== 0, 'Node has 0 height.');\n      const {\n        layoutViewport: {\n          pageX,\n          pageY\n        }\n      } = yield _this25._client.send('Page.getLayoutMetrics');\n      const clip = Object.assign({}, boundingBox);\n      clip.x += pageX;\n      clip.y += pageY;\n      const imageData = yield _this25._page.screenshot(Object.assign({}, {\n        clip\n      }, options));\n      if (needsViewportReset) yield _this25._page.setViewport(viewport);\n      return imageData;\n    })();\n  }\n  /**\n   * Runs `element.querySelector` within the page. If no element matches the selector,\n   * the return value resolves to `null`.\n   */\n\n\n  $(selector) {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        updatedSelector,\n        queryHandler\n      } = getQueryHandlerAndSelector(selector);\n      return queryHandler.queryOne(_this26, updatedSelector);\n    })();\n  }\n  /**\n   * Runs `element.querySelectorAll` within the page. If no elements match the selector,\n   * the return value resolves to `[]`.\n   */\n\n\n  $$(selector) {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        updatedSelector,\n        queryHandler\n      } = getQueryHandlerAndSelector(selector);\n      return queryHandler.queryAll(_this27, updatedSelector);\n    })();\n  }\n  /**\n   * This method runs `document.querySelector` within the element and passes it as\n   * the first argument to `pageFunction`. If there's no element matching `selector`,\n   * the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise\n   * to resolve and return its value.\n   *\n   * @example\n   * ```js\n   * const tweetHandle = await page.$('.tweet');\n   * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n   * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n   * ```\n   */\n\n\n  $eval(selector, pageFunction, ...args) {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      const elementHandle = yield _this28.$(selector);\n      if (!elementHandle) throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n      const result = yield elementHandle.evaluate(pageFunction, ...args);\n      yield elementHandle.dispose();\n      /**\n       * This `as` is a little unfortunate but helps TS understand the behavior of\n       * `elementHandle.evaluate`. If evaluate returns an element it will return an\n       * ElementHandle instance, rather than the plain object. All the\n       * WrapElementHandle type does is wrap ReturnType into\n       * ElementHandle<ReturnType> if it is an ElementHandle, or leave it alone as\n       * ReturnType if it isn't.\n       */\n\n      return result;\n    })();\n  }\n  /**\n   * This method runs `document.querySelectorAll` within the element and passes it as\n   * the first argument to `pageFunction`. If there's no element matching `selector`,\n   * the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the\n   * promise to resolve and return its value.\n   *\n   * @example\n   * ```html\n   * <div class=\"feed\">\n   *   <div class=\"tweet\">Hello!</div>\n   *   <div class=\"tweet\">Hi!</div>\n   * </div>\n   * ```\n   *\n   * @example\n   * ```js\n   * const feedHandle = await page.$('.feed');\n   * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n   *  .toEqual(['Hello!', 'Hi!']);\n   * ```\n   */\n\n\n  $$eval(selector, pageFunction, ...args) {\n    var _this29 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        updatedSelector,\n        queryHandler\n      } = getQueryHandlerAndSelector(selector);\n      const arrayHandle = yield queryHandler.queryAllArray(_this29, updatedSelector);\n      const result = yield arrayHandle.evaluate(pageFunction, ...args);\n      yield arrayHandle.dispose();\n      /* This `as` exists for the same reason as the `as` in $eval above.\n       * See the comment there for a full explanation.\n       */\n\n      return result;\n    })();\n  }\n  /**\n   * The method evaluates the XPath expression relative to the elementHandle.\n   * If there are no such elements, the method will resolve to an empty array.\n   * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n   */\n\n\n  $x(expression) {\n    var _this30 = this;\n\n    return _asyncToGenerator(function* () {\n      const arrayHandle = yield _this30.evaluateHandle((element, expression) => {\n        const document = element.ownerDocument || element;\n        const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n        const array = [];\n        let item;\n\n        while (item = iterator.iterateNext()) array.push(item);\n\n        return array;\n      }, expression);\n      const properties = yield arrayHandle.getProperties();\n      yield arrayHandle.dispose();\n      const result = [];\n\n      for (const property of properties.values()) {\n        const elementHandle = property.asElement();\n        if (elementHandle) result.push(elementHandle);\n      }\n\n      return result;\n    })();\n  }\n  /**\n   * Resolves to true if the element is visible in the current viewport.\n   */\n\n\n  isIntersectingViewport() {\n    var _this31 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this31.evaluate( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (element) {\n          const visibleRatio = yield new Promise(resolve => {\n            const observer = new IntersectionObserver(entries => {\n              resolve(entries[0].intersectionRatio);\n              observer.disconnect();\n            });\n            observer.observe(element);\n          });\n          return visibleRatio > 0;\n        });\n\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n}\n\nfunction computeQuadArea(quad) {\n  /* Compute sum of all directed areas of adjacent triangles\n    https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n  */\n  let area = 0;\n\n  for (let i = 0; i < quad.length; ++i) {\n    const p1 = quad[i];\n    const p2 = quad[(i + 1) % quad.length];\n    area += (p1.x * p2.y - p2.x * p1.y) / 2;\n  }\n\n  return Math.abs(area);\n} //# sourceMappingURL=JSHandle.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/JSHandle.js"],"names":["assert","helper","debugError","getQueryHandlerAndSelector","isNode","createJSHandle","context","remoteObject","frame","subtype","frameManager","_frameManager","ElementHandle","_client","page","JSHandle","constructor","client","_disposed","_context","_remoteObject","executionContext","evaluate","pageFunction","args","evaluateHandle","getProperty","propertyName","objectHandle","object","result","__proto__","properties","getProperties","get","dispose","response","send","objectId","ownProperties","Map","property","enumerable","set","name","value","jsonValue","functionDeclaration","returnByValue","awaitPromise","valueFromRemoteObject","asElement","releaseObject","toString","type","_page","contentFrame","nodeInfo","node","frameId","_scrollIntoViewIfNeeded","error","element","pageJavascriptEnabled","isConnected","nodeType","Node","ELEMENT_NODE","scrollIntoView","block","inline","behavior","visibleRatio","Promise","resolve","observer","IntersectionObserver","entries","intersectionRatio","disconnect","observe","isJavaScriptEnabled","Error","clickablePoint","layoutMetrics","all","catch","quads","length","clientWidth","clientHeight","layoutViewport","map","quad","_fromProtocolQuad","_intersectQuadWithViewport","filter","computeQuadArea","x","y","point","_getBoxModel","params","width","height","Math","min","max","hover","mouse","move","click","options","drag","target","isDragInterceptionEnabled","start","dragEnter","data","items","dragOperationsMask","dragOver","drop","destination","dragAndDrop","startPoint","targetPoint","select","values","isString","HTMLSelectElement","Array","from","undefined","option","selected","includes","multiple","dispatchEvent","Event","bubbles","uploadFile","filePaths","isMultiple","HTMLInputElement","path","fs","importFSModule","files","filePath","resolvedPath","promises","access","constants","R_OK","code","backendNodeId","DataTransfer","tap","touchscreen","focus","text","keyboard","press","key","boundingBox","model","border","boxModel","content","padding","margin","screenshot","needsViewportReset","viewport","newViewport","ceil","setViewport","Object","assign","pageX","pageY","clip","imageData","$","selector","updatedSelector","queryHandler","queryOne","$$","queryAll","$eval","elementHandle","$$eval","arrayHandle","queryAllArray","$x","expression","document","ownerDocument","iterator","XPathResult","ORDERED_NODE_ITERATOR_TYPE","array","item","iterateNext","push","isIntersectingViewport","area","i","p1","p2","abs"],"mappings":"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","sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\nimport { helper, debugError } from './helper.js';\nimport { getQueryHandlerAndSelector } from './QueryHandler.js';\nimport { isNode } from '../environment.js';\n/**\n * @internal\n */\nexport function createJSHandle(context, remoteObject) {\n    const frame = context.frame();\n    if (remoteObject.subtype === 'node' && frame) {\n        const frameManager = frame._frameManager;\n        return new ElementHandle(context, context._client, remoteObject, frameManager.page(), frameManager);\n    }\n    return new JSHandle(context, context._client, remoteObject);\n}\n/**\n * Represents an in-page JavaScript object. JSHandles can be created with the\n * {@link Page.evaluateHandle | page.evaluateHandle} method.\n *\n * @example\n * ```js\n * const windowHandle = await page.evaluateHandle(() => window);\n * ```\n *\n * JSHandle prevents the referenced JavaScript object from being garbage-collected\n * unless the handle is {@link JSHandle.dispose | disposed}. JSHandles are auto-\n * disposed when their origin frame gets navigated or the parent context gets destroyed.\n *\n * JSHandle instances can be used as arguments for {@link Page.$eval},\n * {@link Page.evaluate}, and {@link Page.evaluateHandle}.\n *\n * @public\n */\nexport class JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject) {\n        /**\n         * @internal\n         */\n        this._disposed = false;\n        this._context = context;\n        this._client = client;\n        this._remoteObject = remoteObject;\n    }\n    /** Returns the execution context the handle belongs to.\n     */\n    executionContext() {\n        return this._context;\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     * If `pageFunction` returns a Promise, then `handle.evaluate` would wait\n     * for the promise to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet .retweets');\n     * expect(await tweetHandle.evaluate(node => node.innerText)).toBe('10');\n     * ```\n     */\n    async evaluate(pageFunction, ...args) {\n        return await this.executionContext().evaluate(pageFunction, this, ...args);\n    }\n    /**\n     * This method passes this handle as the first argument to `pageFunction`.\n     *\n     * @remarks\n     *\n     * The only difference between `jsHandle.evaluate` and\n     * `jsHandle.evaluateHandle` is that `jsHandle.evaluateHandle`\n     * returns an in-page object (JSHandle).\n     *\n     * If the function passed to `jsHandle.evaluateHandle` returns a Promise,\n     * then `evaluateHandle.evaluateHandle` waits for the promise to resolve and\n     * returns its value.\n     *\n     * See {@link Page.evaluateHandle} for more details.\n     */\n    async evaluateHandle(pageFunction, ...args) {\n        return await this.executionContext().evaluateHandle(pageFunction, this, ...args);\n    }\n    /** Fetches a single property from the referenced object.\n     */\n    async getProperty(propertyName) {\n        const objectHandle = await this.evaluateHandle((object, propertyName) => {\n            const result = { __proto__: null };\n            result[propertyName] = object[propertyName];\n            return result;\n        }, propertyName);\n        const properties = await objectHandle.getProperties();\n        const result = properties.get(propertyName) || null;\n        await objectHandle.dispose();\n        return result;\n    }\n    /**\n     * The method returns a map with property names as keys and JSHandle\n     * instances for the property values.\n     *\n     * @example\n     * ```js\n     * const listHandle = await page.evaluateHandle(() => document.body.children);\n     * const properties = await listHandle.getProperties();\n     * const children = [];\n     * for (const property of properties.values()) {\n     *   const element = property.asElement();\n     *   if (element)\n     *     children.push(element);\n     * }\n     * children; // holds elementHandles to all children of document.body\n     * ```\n     */\n    async getProperties() {\n        const response = await this._client.send('Runtime.getProperties', {\n            objectId: this._remoteObject.objectId,\n            ownProperties: true,\n        });\n        const result = new Map();\n        for (const property of response.result) {\n            if (!property.enumerable)\n                continue;\n            result.set(property.name, createJSHandle(this._context, property.value));\n        }\n        return result;\n    }\n    /**\n     * @returns Returns a JSON representation of the object.If the object has a\n     * `toJSON` function, it will not be called.\n     * @remarks\n     *\n     * The JSON is generated by running {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify | JSON.stringify}\n     * on the object in page and consequent {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse | JSON.parse} in puppeteer.\n     * **NOTE** The method throws if the referenced object is not stringifiable.\n     */\n    async jsonValue() {\n        if (this._remoteObject.objectId) {\n            const response = await this._client.send('Runtime.callFunctionOn', {\n                functionDeclaration: 'function() { return this; }',\n                objectId: this._remoteObject.objectId,\n                returnByValue: true,\n                awaitPromise: true,\n            });\n            return helper.valueFromRemoteObject(response.result);\n        }\n        return helper.valueFromRemoteObject(this._remoteObject);\n    }\n    /**\n     * @returns Either `null` or the object handle itself, if the object\n     * handle is an instance of {@link ElementHandle}.\n     */\n    asElement() {\n        /*  This always returns null, but subclasses can override this and return an\n            ElementHandle.\n        */\n        return null;\n    }\n    /**\n     * Stops referencing the element handle, and resolves when the object handle is\n     * successfully disposed of.\n     */\n    async dispose() {\n        if (this._disposed)\n            return;\n        this._disposed = true;\n        await helper.releaseObject(this._client, this._remoteObject);\n    }\n    /**\n     * Returns a string representation of the JSHandle.\n     *\n     * @remarks Useful during debugging.\n     */\n    toString() {\n        if (this._remoteObject.objectId) {\n            const type = this._remoteObject.subtype || this._remoteObject.type;\n            return 'JSHandle@' + type;\n        }\n        return 'JSHandle:' + helper.valueFromRemoteObject(this._remoteObject);\n    }\n}\n/**\n * ElementHandle represents an in-page DOM element.\n *\n * @remarks\n *\n * ElementHandles can be created with the {@link Page.$} method.\n *\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *  const browser = await puppeteer.launch();\n *  const page = await browser.newPage();\n *  await page.goto('https://example.com');\n *  const hrefElement = await page.$('a');\n *  await hrefElement.click();\n *  // ...\n * })();\n * ```\n *\n * ElementHandle prevents the DOM element from being garbage-collected unless the\n * handle is {@link JSHandle.dispose | disposed}. ElementHandles are auto-disposed\n * when their origin frame gets navigated.\n *\n * ElementHandle instances can be used as arguments in {@link Page.$eval} and\n * {@link Page.evaluate} methods.\n *\n * If you're using TypeScript, ElementHandle takes a generic argument that\n * denotes the type of element the handle is holding within. For example, if you\n * have a handle to a `<select>` element, you can type it as\n * `ElementHandle<HTMLSelectElement>` and you get some nicer type checks.\n *\n * @public\n */\nexport class ElementHandle extends JSHandle {\n    /**\n     * @internal\n     */\n    constructor(context, client, remoteObject, page, frameManager) {\n        super(context, client, remoteObject);\n        this._client = client;\n        this._remoteObject = remoteObject;\n        this._page = page;\n        this._frameManager = frameManager;\n    }\n    asElement() {\n        return this;\n    }\n    /**\n     * Resolves to the content frame for element handles referencing\n     * iframe nodes, or null otherwise\n     */\n    async contentFrame() {\n        const nodeInfo = await this._client.send('DOM.describeNode', {\n            objectId: this._remoteObject.objectId,\n        });\n        if (typeof nodeInfo.node.frameId !== 'string')\n            return null;\n        return this._frameManager.frame(nodeInfo.node.frameId);\n    }\n    async _scrollIntoViewIfNeeded() {\n        const error = await this.evaluate(async (element, pageJavascriptEnabled) => {\n            if (!element.isConnected)\n                return 'Node is detached from document';\n            if (element.nodeType !== Node.ELEMENT_NODE)\n                return 'Node is not of type HTMLElement';\n            // force-scroll if page's javascript is disabled.\n            if (!pageJavascriptEnabled) {\n                element.scrollIntoView({\n                    block: 'center',\n                    inline: 'center',\n                    // @ts-expect-error Chrome still supports behavior: instant but\n                    // it's not in the spec so TS shouts We don't want to make this\n                    // breaking change in Puppeteer yet so we'll ignore the line.\n                    behavior: 'instant',\n                });\n                return false;\n            }\n            const visibleRatio = await new Promise((resolve) => {\n                const observer = new IntersectionObserver((entries) => {\n                    resolve(entries[0].intersectionRatio);\n                    observer.disconnect();\n                });\n                observer.observe(element);\n            });\n            if (visibleRatio !== 1.0) {\n                element.scrollIntoView({\n                    block: 'center',\n                    inline: 'center',\n                    // @ts-expect-error Chrome still supports behavior: instant but\n                    // it's not in the spec so TS shouts We don't want to make this\n                    // breaking change in Puppeteer yet so we'll ignore the line.\n                    behavior: 'instant',\n                });\n            }\n            return false;\n        }, this._page.isJavaScriptEnabled());\n        if (error)\n            throw new Error(error);\n    }\n    async clickablePoint() {\n        const [result, layoutMetrics] = await Promise.all([\n            this._client\n                .send('DOM.getContentQuads', {\n                objectId: this._remoteObject.objectId,\n            })\n                .catch(debugError),\n            this._client.send('Page.getLayoutMetrics'),\n        ]);\n        if (!result || !result.quads.length)\n            throw new Error('Node is either not visible or not an HTMLElement');\n        // Filter out quads that have too small area to click into.\n        const { clientWidth, clientHeight } = layoutMetrics.layoutViewport;\n        const quads = result.quads\n            .map((quad) => this._fromProtocolQuad(quad))\n            .map((quad) => this._intersectQuadWithViewport(quad, clientWidth, clientHeight))\n            .filter((quad) => computeQuadArea(quad) > 1);\n        if (!quads.length)\n            throw new Error('Node is either not visible or not an HTMLElement');\n        // Return the middle point of the first quad.\n        const quad = quads[0];\n        let x = 0;\n        let y = 0;\n        for (const point of quad) {\n            x += point.x;\n            y += point.y;\n        }\n        return {\n            x: x / 4,\n            y: y / 4,\n        };\n    }\n    _getBoxModel() {\n        const params = {\n            objectId: this._remoteObject.objectId,\n        };\n        return this._client\n            .send('DOM.getBoxModel', params)\n            .catch((error) => debugError(error));\n    }\n    _fromProtocolQuad(quad) {\n        return [\n            { x: quad[0], y: quad[1] },\n            { x: quad[2], y: quad[3] },\n            { x: quad[4], y: quad[5] },\n            { x: quad[6], y: quad[7] },\n        ];\n    }\n    _intersectQuadWithViewport(quad, width, height) {\n        return quad.map((point) => ({\n            x: Math.min(Math.max(point.x, 0), width),\n            y: Math.min(Math.max(point.y, 0), height),\n        }));\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to hover over the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async hover() {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this.clickablePoint();\n        await this._page.mouse.move(x, y);\n    }\n    /**\n     * This method scrolls element into view if needed, and then\n     * uses {@link Page.mouse} to click in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async click(options = {}) {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this.clickablePoint();\n        await this._page.mouse.click(x, y, options);\n    }\n    /**\n     * This method creates and captures a dragevent from the element.\n     */\n    async drag(target) {\n        assert(this._page.isDragInterceptionEnabled, 'Drag Interception is not enabled!');\n        await this._scrollIntoViewIfNeeded();\n        const start = await this.clickablePoint();\n        return await this._page.mouse.drag(start, target);\n    }\n    /**\n     * This method creates a `dragenter` event on the element.\n     */\n    async dragEnter(data = { items: [], dragOperationsMask: 1 }) {\n        await this._scrollIntoViewIfNeeded();\n        const target = await this.clickablePoint();\n        await this._page.mouse.dragEnter(target, data);\n    }\n    /**\n     * This method creates a `dragover` event on the element.\n     */\n    async dragOver(data = { items: [], dragOperationsMask: 1 }) {\n        await this._scrollIntoViewIfNeeded();\n        const target = await this.clickablePoint();\n        await this._page.mouse.dragOver(target, data);\n    }\n    /**\n     * This method triggers a drop on the element.\n     */\n    async drop(data = { items: [], dragOperationsMask: 1 }) {\n        await this._scrollIntoViewIfNeeded();\n        const destination = await this.clickablePoint();\n        await this._page.mouse.drop(destination, data);\n    }\n    /**\n     * This method triggers a dragenter, dragover, and drop on the element.\n     */\n    async dragAndDrop(target, options) {\n        await this._scrollIntoViewIfNeeded();\n        const startPoint = await this.clickablePoint();\n        const targetPoint = await target.clickablePoint();\n        await this._page.mouse.dragAndDrop(startPoint, targetPoint, options);\n    }\n    /**\n     * Triggers a `change` and `input` event once all the provided options have been\n     * selected. If there's no `<select>` element matching `selector`, the method\n     * throws an error.\n     *\n     * @example\n     * ```js\n     * handle.select('blue'); // single selection\n     * handle.select('red', 'green', 'blue'); // multiple selections\n     * ```\n     * @param values - Values of options to select. If the `<select>` has the\n     *    `multiple` attribute, all values are considered, otherwise only the first\n     *    one is taken into account.\n     */\n    async select(...values) {\n        for (const value of values)\n            assert(helper.isString(value), 'Values must be strings. Found value \"' +\n                value +\n                '\" of type \"' +\n                typeof value +\n                '\"');\n        return this.evaluate((element, values) => {\n            if (!(element instanceof HTMLSelectElement))\n                throw new Error('Element is not a <select> element.');\n            const options = Array.from(element.options);\n            element.value = undefined;\n            for (const option of options) {\n                option.selected = values.includes(option.value);\n                if (option.selected && !element.multiple)\n                    break;\n            }\n            element.dispatchEvent(new Event('input', { bubbles: true }));\n            element.dispatchEvent(new Event('change', { bubbles: true }));\n            return options\n                .filter((option) => option.selected)\n                .map((option) => option.value);\n        }, values);\n    }\n    /**\n     * This method expects `elementHandle` to point to an\n     * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element}.\n     * @param filePaths - Sets the value of the file input to these paths.\n     *    If some of the  `filePaths` are relative paths, then they are resolved\n     *    relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}\n     */\n    async uploadFile(...filePaths) {\n        const isMultiple = await this.evaluate((element) => {\n            if (!(element instanceof HTMLInputElement)) {\n                throw new Error('uploadFile can only be called on an input element.');\n            }\n            return element.multiple;\n        });\n        assert(filePaths.length <= 1 || isMultiple, 'Multiple file uploads only work with <input type=file multiple>');\n        if (!isNode) {\n            throw new Error(`JSHandle#uploadFile can only be used in Node environments.`);\n        }\n        /*\n         This import is only needed for `uploadFile`, so keep it scoped here to\n         avoid paying the cost unnecessarily.\n        */\n        const path = await import('path');\n        const fs = await helper.importFSModule();\n        // Locate all files and confirm that they exist.\n        const files = await Promise.all(filePaths.map(async (filePath) => {\n            const resolvedPath = path.resolve(filePath);\n            try {\n                await fs.promises.access(resolvedPath, fs.constants.R_OK);\n            }\n            catch (error) {\n                if (error.code === 'ENOENT')\n                    throw new Error(`${filePath} does not exist or is not readable`);\n            }\n            return resolvedPath;\n        }));\n        const { objectId } = this._remoteObject;\n        const { node } = await this._client.send('DOM.describeNode', { objectId });\n        const { backendNodeId } = node;\n        /*  The zero-length array is a special case, it seems that\n            DOM.setFileInputFiles does not actually update the files in that case,\n            so the solution is to eval the element value to a new FileList directly.\n        */\n        if (files.length === 0) {\n            await this.evaluate((element) => {\n                element.files = new DataTransfer().files;\n                // Dispatch events for this case because it should behave akin to a user action.\n                element.dispatchEvent(new Event('input', { bubbles: true }));\n                element.dispatchEvent(new Event('change', { bubbles: true }));\n            });\n        }\n        else {\n            await this._client.send('DOM.setFileInputFiles', {\n                objectId,\n                files,\n                backendNodeId,\n            });\n        }\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Touchscreen.tap} to tap in the center of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async tap() {\n        await this._scrollIntoViewIfNeeded();\n        const { x, y } = await this.clickablePoint();\n        await this._page.touchscreen.tap(x, y);\n    }\n    /**\n     * Calls {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus} on the element.\n     */\n    async focus() {\n        await this.evaluate((element) => element.focus());\n    }\n    /**\n     * Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\n     * `keyup` event for each character in the text.\n     *\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link ElementHandle.press}.\n     *\n     * @example\n     * ```js\n     * await elementHandle.type('Hello'); // Types instantly\n     * await elementHandle.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @example\n     * An example of typing into a text field and then submitting the form:\n     *\n     * ```js\n     * const elementHandle = await page.$('input');\n     * await elementHandle.type('some text');\n     * await elementHandle.press('Enter');\n     * ```\n     */\n    async type(text, options) {\n        await this.focus();\n        await this._page.keyboard.type(text, options);\n    }\n    /**\n     * Focuses the element, and then uses {@link Keyboard.down} and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also be generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * **NOTE** Modifier keys DO affect `elementHandle.press`. Holding down `Shift`\n     * will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     *    See {@link KeyInput} for a list of all key names.\n     */\n    async press(key, options) {\n        await this.focus();\n        await this._page.keyboard.press(key, options);\n    }\n    /**\n     * This method returns the bounding box of the element (relative to the main frame),\n     * or `null` if the element is not visible.\n     */\n    async boundingBox() {\n        const result = await this._getBoxModel();\n        if (!result)\n            return null;\n        const quad = result.model.border;\n        const x = Math.min(quad[0], quad[2], quad[4], quad[6]);\n        const y = Math.min(quad[1], quad[3], quad[5], quad[7]);\n        const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;\n        const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;\n        return { x, y, width, height };\n    }\n    /**\n     * This method returns boxes of the element, or `null` if the element is not visible.\n     *\n     * @remarks\n     *\n     * Boxes are represented as an array of points;\n     * Each Point is an object `{x, y}`. Box points are sorted clock-wise.\n     */\n    async boxModel() {\n        const result = await this._getBoxModel();\n        if (!result)\n            return null;\n        const { content, padding, border, margin, width, height } = result.model;\n        return {\n            content: this._fromProtocolQuad(content),\n            padding: this._fromProtocolQuad(padding),\n            border: this._fromProtocolQuad(border),\n            margin: this._fromProtocolQuad(margin),\n            width,\n            height,\n        };\n    }\n    /**\n     * This method scrolls element into view if needed, and then uses\n     * {@link Page.screenshot} to take a screenshot of the element.\n     * If the element is detached from DOM, the method throws an error.\n     */\n    async screenshot(options = {}) {\n        let needsViewportReset = false;\n        let boundingBox = await this.boundingBox();\n        assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n        const viewport = this._page.viewport();\n        if (viewport &&\n            (boundingBox.width > viewport.width ||\n                boundingBox.height > viewport.height)) {\n            const newViewport = {\n                width: Math.max(viewport.width, Math.ceil(boundingBox.width)),\n                height: Math.max(viewport.height, Math.ceil(boundingBox.height)),\n            };\n            await this._page.setViewport(Object.assign({}, viewport, newViewport));\n            needsViewportReset = true;\n        }\n        await this._scrollIntoViewIfNeeded();\n        boundingBox = await this.boundingBox();\n        assert(boundingBox, 'Node is either not visible or not an HTMLElement');\n        assert(boundingBox.width !== 0, 'Node has 0 width.');\n        assert(boundingBox.height !== 0, 'Node has 0 height.');\n        const { layoutViewport: { pageX, pageY }, } = await this._client.send('Page.getLayoutMetrics');\n        const clip = Object.assign({}, boundingBox);\n        clip.x += pageX;\n        clip.y += pageY;\n        const imageData = await this._page.screenshot(Object.assign({}, {\n            clip,\n        }, options));\n        if (needsViewportReset)\n            await this._page.setViewport(viewport);\n        return imageData;\n    }\n    /**\n     * Runs `element.querySelector` within the page. If no element matches the selector,\n     * the return value resolves to `null`.\n     */\n    async $(selector) {\n        const { updatedSelector, queryHandler } = getQueryHandlerAndSelector(selector);\n        return queryHandler.queryOne(this, updatedSelector);\n    }\n    /**\n     * Runs `element.querySelectorAll` within the page. If no elements match the selector,\n     * the return value resolves to `[]`.\n     */\n    async $$(selector) {\n        const { updatedSelector, queryHandler } = getQueryHandlerAndSelector(selector);\n        return queryHandler.queryAll(this, updatedSelector);\n    }\n    /**\n     * This method runs `document.querySelector` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$eval` would wait for the promise\n     * to resolve and return its value.\n     *\n     * @example\n     * ```js\n     * const tweetHandle = await page.$('.tweet');\n     * expect(await tweetHandle.$eval('.like', node => node.innerText)).toBe('100');\n     * expect(await tweetHandle.$eval('.retweets', node => node.innerText)).toBe('10');\n     * ```\n     */\n    async $eval(selector, pageFunction, ...args) {\n        const elementHandle = await this.$(selector);\n        if (!elementHandle)\n            throw new Error(`Error: failed to find element matching selector \"${selector}\"`);\n        const result = await elementHandle.evaluate(pageFunction, ...args);\n        await elementHandle.dispose();\n        /**\n         * This `as` is a little unfortunate but helps TS understand the behavior of\n         * `elementHandle.evaluate`. If evaluate returns an element it will return an\n         * ElementHandle instance, rather than the plain object. All the\n         * WrapElementHandle type does is wrap ReturnType into\n         * ElementHandle<ReturnType> if it is an ElementHandle, or leave it alone as\n         * ReturnType if it isn't.\n         */\n        return result;\n    }\n    /**\n     * This method runs `document.querySelectorAll` within the element and passes it as\n     * the first argument to `pageFunction`. If there's no element matching `selector`,\n     * the method throws an error.\n     *\n     * If `pageFunction` returns a Promise, then `frame.$$eval` would wait for the\n     * promise to resolve and return its value.\n     *\n     * @example\n     * ```html\n     * <div class=\"feed\">\n     *   <div class=\"tweet\">Hello!</div>\n     *   <div class=\"tweet\">Hi!</div>\n     * </div>\n     * ```\n     *\n     * @example\n     * ```js\n     * const feedHandle = await page.$('.feed');\n     * expect(await feedHandle.$$eval('.tweet', nodes => nodes.map(n => n.innerText)))\n     *  .toEqual(['Hello!', 'Hi!']);\n     * ```\n     */\n    async $$eval(selector, pageFunction, ...args) {\n        const { updatedSelector, queryHandler } = getQueryHandlerAndSelector(selector);\n        const arrayHandle = await queryHandler.queryAllArray(this, updatedSelector);\n        const result = await arrayHandle.evaluate(pageFunction, ...args);\n        await arrayHandle.dispose();\n        /* This `as` exists for the same reason as the `as` in $eval above.\n         * See the comment there for a full explanation.\n         */\n        return result;\n    }\n    /**\n     * The method evaluates the XPath expression relative to the elementHandle.\n     * If there are no such elements, the method will resolve to an empty array.\n     * @param expression - Expression to {@link https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate | evaluate}\n     */\n    async $x(expression) {\n        const arrayHandle = await this.evaluateHandle((element, expression) => {\n            const document = element.ownerDocument || element;\n            const iterator = document.evaluate(expression, element, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n            const array = [];\n            let item;\n            while ((item = iterator.iterateNext()))\n                array.push(item);\n            return array;\n        }, expression);\n        const properties = await arrayHandle.getProperties();\n        await arrayHandle.dispose();\n        const result = [];\n        for (const property of properties.values()) {\n            const elementHandle = property.asElement();\n            if (elementHandle)\n                result.push(elementHandle);\n        }\n        return result;\n    }\n    /**\n     * Resolves to true if the element is visible in the current viewport.\n     */\n    async isIntersectingViewport() {\n        return await this.evaluate(async (element) => {\n            const visibleRatio = await new Promise((resolve) => {\n                const observer = new IntersectionObserver((entries) => {\n                    resolve(entries[0].intersectionRatio);\n                    observer.disconnect();\n                });\n                observer.observe(element);\n            });\n            return visibleRatio > 0;\n        });\n    }\n}\nfunction computeQuadArea(quad) {\n    /* Compute sum of all directed areas of adjacent triangles\n      https://en.wikipedia.org/wiki/Polygon#Simple_polygons\n    */\n    let area = 0;\n    for (let i = 0; i < quad.length; ++i) {\n        const p1 = quad[i];\n        const p2 = quad[(i + 1) % quad.length];\n        area += (p1.x * p2.y - p2.x * p1.y) / 2;\n    }\n    return Math.abs(area);\n}\n//# sourceMappingURL=JSHandle.js.map"]},"metadata":{},"sourceType":"module"}