{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FeedItems } from \"../model/feed-items\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FeedService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  getData() {\n    console.log(1234576);\n  }\n\n  getDataRss(url, data = {}) {\n    return this.http.get(url, data);\n  }\n\n  createListFeedItems(list, value) {\n    for (var i = 0; i <= value.items.length - 1; i++) {\n      var title = value.items[i].title;\n      var pubDate = value.items[i].pubDate;\n      var link = value.items[i].link;\n      var guid = value.items[i].guid;\n      var thumbnail = value.items[i].thumbnail;\n      var description = value.items[i].description;\n      var content = value.items[i].content;\n      console.log('test data');\n      let feedItems = new FeedItems({\n        title,\n        pubDate,\n        link,\n        guid,\n        thumbnail,\n        description,\n        content\n      });\n      list.push(feedItems);\n    }\n\n    ;\n  }\n\n  getDataDetail(url) {\n    /*#__PURE__*/\n    _asyncToGenerator(function* () {});\n  }\n\n}\n\nFeedService.ɵfac = function FeedService_Factory(t) {\n  return new (t || FeedService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nFeedService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeedService,\n  factory: FeedService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/src/app/feed/service/feed.service.ts"],"names":[],"mappings":";AAGA,SAAQ,SAAR,QAAwB,qBAAxB;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAEtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AACnB;;AAED,EAAA,OAAO,GAAA;AACL,IAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACD;;AAED,EAAA,UAAU,CAAC,GAAD,EAAc,IAAA,GAAe,EAA7B,EAA+B;AACvC,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,GAAd,EAAmB,IAAnB,CAAP;AACD;;AAED,EAAA,mBAAmB,CAAC,IAAD,EAAoB,KAApB,EAA8B;AAC/C,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAA1C,EAA6C,CAAC,EAA9C,EAAkD;AAChD,UAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,KAA3B;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,OAA7B;AACA,UAAI,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAA1B;AACA,UAAI,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAA1B;AACA,UAAI,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,SAA/B;AACA,UAAI,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,WAAjC;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,OAA7B;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AACA,UAAI,SAAS,GAAG,IAAI,SAAJ,CAAc;AAAC,QAAA,KAAD;AAAQ,QAAA,OAAR;AAAiB,QAAA,IAAjB;AAAuB,QAAA,IAAvB;AAA6B,QAAA,SAA7B;AAAwC,QAAA,WAAxC;AAAqD,QAAA;AAArD,OAAd,CAAhB;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,SAAV;AACD;;AACD;AACD;;AAGD,EAAA,aAAa,CAAC,GAAD,EAAY;AACvB;AAAA,sBAAC,aAAW,CAEX,CAFD;AAID;;AAnCqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {FeedItems} from \"../model/feed-items\";\nimport * as puppeteer from \"puppeteer/lib/esm/puppeteer/node-puppeteer-core\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getData() {\n    console.log(1234576);\n  }\n\n  getDataRss(url: string, data: object = {}): Observable<any> {\n    return this.http.get(url, data);\n  }\n\n  createListFeedItems(list: FeedItems[], value: any) {\n    for (var i = 0; i <= value.items.length - 1; i++) {\n      var title = value.items[i].title;\n      var pubDate = value.items[i].pubDate;\n      var link = value.items[i].link;\n      var guid = value.items[i].guid;\n      var thumbnail = value.items[i].thumbnail;\n      var description = value.items[i].description;\n      var content = value.items[i].content;\n      console.log('test data');\n      let feedItems = new FeedItems({title, pubDate, link, guid, thumbnail, description, content});\n      list.push(feedItems);\n    }\n    ;\n  }\n\n\n  getDataDetail(url: string){\n    (async () => {\n\n    })\n\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}