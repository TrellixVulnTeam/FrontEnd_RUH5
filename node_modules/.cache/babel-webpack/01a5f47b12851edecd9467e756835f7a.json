{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { puppeteerErrors } from './Errors.js';\nimport { devicesMap } from './DeviceDescriptors.js';\nimport { registerCustomQueryHandler, unregisterCustomQueryHandler, customQueryHandlerNames, clearCustomQueryHandlers } from './QueryHandler.js';\nimport { connectToBrowser } from './BrowserConnector.js';\nimport { networkConditions } from './NetworkConditions.js';\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\n\nexport class Puppeteer {\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    this._changedProduct = false;\n    this._isPuppeteerCore = settings.isPuppeteerCore;\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @remarks\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n\n\n  connect(options) {\n    return connectToBrowser(options);\n  }\n  /**\n   * @remarks\n   * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n   *\n   * @example\n   *\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const iPhone = puppeteer.devices['iPhone 6'];\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.emulate(iPhone);\n   *   await page.goto('https://www.google.com');\n   *   // other actions...\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   */\n\n\n  get devices() {\n    return devicesMap;\n  }\n  /**\n   * @remarks\n   *\n   * Puppeteer methods might throw errors if they are unable to fulfill a request.\n   * For example, `page.waitForSelector(selector[, options])` might fail if\n   * the selector doesn't match any nodes during the given timeframe.\n   *\n   * For certain types of errors Puppeteer uses specific error classes.\n   * These classes are available via `puppeteer.errors`.\n   *\n   * @example\n   * An example of handling a timeout error:\n   * ```js\n   * try {\n   *   await page.waitForSelector('.foo');\n   * } catch (e) {\n   *   if (e instanceof puppeteer.errors.TimeoutError) {\n   *     // Do something if this is a timeout.\n   *   }\n   * }\n   * ```\n   */\n\n\n  get errors() {\n    return puppeteerErrors;\n  }\n  /**\n   * @remarks\n   * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n   *\n   * @example\n   *\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const slow3G = puppeteer.networkConditions['Slow 3G'];\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.emulateNetworkConditions(slow3G);\n   *   await page.goto('https://www.google.com');\n   *   // other actions...\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   */\n\n\n  get networkConditions() {\n    return networkConditions;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}. After\n   * registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   * @example\n   * ```\n   * puppeteer.registerCustomQueryHandler('text', { … });\n   * const aHandle = await page.$('text/…');\n   * ```\n   * @param name - The name that the custom query handler will be registered under.\n   * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to\n   * register.\n   */\n\n\n  registerCustomQueryHandler(name, queryHandler) {\n    registerCustomQueryHandler(name, queryHandler);\n  }\n  /**\n   * @param name - The name of the query handler to unregistered.\n   */\n\n\n  unregisterCustomQueryHandler(name) {\n    unregisterCustomQueryHandler(name);\n  }\n  /**\n   * @returns a list with the names of all registered custom query handlers.\n   */\n\n\n  customQueryHandlerNames() {\n    return customQueryHandlerNames();\n  }\n  /**\n   * Clears all registered handlers.\n   */\n\n\n  clearCustomQueryHandlers() {\n    clearCustomQueryHandlers();\n  }\n\n} //# sourceMappingURL=Puppeteer.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/Puppeteer.js"],"names":["puppeteerErrors","devicesMap","registerCustomQueryHandler","unregisterCustomQueryHandler","customQueryHandlerNames","clearCustomQueryHandlers","connectToBrowser","networkConditions","Puppeteer","constructor","settings","_changedProduct","_isPuppeteerCore","isPuppeteerCore","connect","options","devices","errors","name","queryHandler"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,0BAAT,EAAqCC,4BAArC,EAAmEC,uBAAnE,EAA4FC,wBAA5F,QAA6H,mBAA7H;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,iBAAT,QAAmC,wBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnB;AACJ;AACA;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,gBAAL,GAAwBF,QAAQ,CAACG,eAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,OAAD,EAAU;AACb,WAAOT,gBAAgB,CAACS,OAAD,CAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,MAAPC,OAAO,GAAG;AACV,WAAOf,UAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,MAANgB,MAAM,GAAG;AACT,WAAOjB,eAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACyB,MAAjBO,iBAAiB,GAAG;AACpB,WAAOA,iBAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,0BAA0B,CAACgB,IAAD,EAAOC,YAAP,EAAqB;AAC3CjB,IAAAA,0BAA0B,CAACgB,IAAD,EAAOC,YAAP,CAA1B;AACH;AACD;AACJ;AACA;;;AACIhB,EAAAA,4BAA4B,CAACe,IAAD,EAAO;AAC/Bf,IAAAA,4BAA4B,CAACe,IAAD,CAA5B;AACH;AACD;AACJ;AACA;;;AACId,EAAAA,uBAAuB,GAAG;AACtB,WAAOA,uBAAuB,EAA9B;AACH;AACD;AACJ;AACA;;;AACIC,EAAAA,wBAAwB,GAAG;AACvBA,IAAAA,wBAAwB;AAC3B;;AA9HkB,C,CAgIvB","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { puppeteerErrors } from './Errors.js';\nimport { devicesMap } from './DeviceDescriptors.js';\nimport { registerCustomQueryHandler, unregisterCustomQueryHandler, customQueryHandlerNames, clearCustomQueryHandlers, } from './QueryHandler.js';\nimport { connectToBrowser } from './BrowserConnector.js';\nimport { networkConditions, } from './NetworkConditions.js';\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\nexport class Puppeteer {\n    /**\n     * @internal\n     */\n    constructor(settings) {\n        this._changedProduct = false;\n        this._isPuppeteerCore = settings.isPuppeteerCore;\n    }\n    /**\n     * This method attaches Puppeteer to an existing browser instance.\n     *\n     * @remarks\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    connect(options) {\n        return connectToBrowser(options);\n    }\n    /**\n     * @remarks\n     * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const iPhone = puppeteer.devices['iPhone 6'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulate(iPhone);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get devices() {\n        return devicesMap;\n    }\n    /**\n     * @remarks\n     *\n     * Puppeteer methods might throw errors if they are unable to fulfill a request.\n     * For example, `page.waitForSelector(selector[, options])` might fail if\n     * the selector doesn't match any nodes during the given timeframe.\n     *\n     * For certain types of errors Puppeteer uses specific error classes.\n     * These classes are available via `puppeteer.errors`.\n     *\n     * @example\n     * An example of handling a timeout error:\n     * ```js\n     * try {\n     *   await page.waitForSelector('.foo');\n     * } catch (e) {\n     *   if (e instanceof puppeteer.errors.TimeoutError) {\n     *     // Do something if this is a timeout.\n     *   }\n     * }\n     * ```\n     */\n    get errors() {\n        return puppeteerErrors;\n    }\n    /**\n     * @remarks\n     * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const slow3G = puppeteer.networkConditions['Slow 3G'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulateNetworkConditions(slow3G);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get networkConditions() {\n        return networkConditions;\n    }\n    /**\n     * Registers a {@link CustomQueryHandler | custom query handler}. After\n     * registration, the handler can be used everywhere where a selector is\n     * expected by prepending the selection string with `<name>/`. The name is\n     * only allowed to consist of lower- and upper case latin letters.\n     * @example\n     * ```\n     * puppeteer.registerCustomQueryHandler('text', { … });\n     * const aHandle = await page.$('text/…');\n     * ```\n     * @param name - The name that the custom query handler will be registered under.\n     * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to\n     * register.\n     */\n    registerCustomQueryHandler(name, queryHandler) {\n        registerCustomQueryHandler(name, queryHandler);\n    }\n    /**\n     * @param name - The name of the query handler to unregistered.\n     */\n    unregisterCustomQueryHandler(name) {\n        unregisterCustomQueryHandler(name);\n    }\n    /**\n     * @returns a list with the names of all registered custom query handlers.\n     */\n    customQueryHandlerNames() {\n        return customQueryHandlerNames();\n    }\n    /**\n     * Clears all registered handlers.\n     */\n    clearCustomQueryHandlers() {\n        clearCustomQueryHandlers();\n    }\n}\n//# sourceMappingURL=Puppeteer.js.map"]},"metadata":{},"sourceType":"module"}