{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n * @public\n */\n\nexport class Dialog {\n  /**\n   * @internal\n   */\n  constructor(client, type, message, defaultValue = '') {\n    this._handled = false;\n    this._client = client;\n    this._type = type;\n    this._message = message;\n    this._defaultValue = defaultValue;\n  }\n  /**\n   * @returns The type of the dialog.\n   */\n\n\n  type() {\n    return this._type;\n  }\n  /**\n   * @returns The message displayed in the dialog.\n   */\n\n\n  message() {\n    return this._message;\n  }\n  /**\n   * @returns The default value of the prompt, or an empty string if the dialog\n   * is not a `prompt`.\n   */\n\n\n  defaultValue() {\n    return this._defaultValue;\n  }\n  /**\n   * @param promptText - optional text that will be entered in the dialog\n   * prompt. Has no effect if the dialog's type is not `prompt`.\n   *\n   * @returns A promise that resolves when the dialog has been accepted.\n   */\n\n\n  accept(promptText) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      assert(!_this._handled, 'Cannot accept dialog which is already handled!');\n      _this._handled = true;\n      yield _this._client.send('Page.handleJavaScriptDialog', {\n        accept: true,\n        promptText: promptText\n      });\n    })();\n  }\n  /**\n   * @returns A promise which will resolve once the dialog has been dismissed\n   */\n\n\n  dismiss() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      assert(!_this2._handled, 'Cannot dismiss dialog which is already handled!');\n      _this2._handled = true;\n      yield _this2._client.send('Page.handleJavaScriptDialog', {\n        accept: false\n      });\n    })();\n  }\n\n} //# sourceMappingURL=Dialog.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/Dialog.js"],"names":["assert","Dialog","constructor","client","type","message","defaultValue","_handled","_client","_type","_message","_defaultValue","accept","promptText","send","dismiss"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,aAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,MAAN,CAAa;AAChB;AACJ;AACA;AACIC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,YAAY,GAAG,EAAvC,EAA2C;AAClD,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,OAAL,GAAeL,MAAf;AACA,SAAKM,KAAL,GAAaL,IAAb;AACA,SAAKM,QAAL,GAAgBL,OAAhB;AACA,SAAKM,aAAL,GAAqBL,YAArB;AACH;AACD;AACJ;AACA;;;AACIF,EAAAA,IAAI,GAAG;AACH,WAAO,KAAKK,KAAZ;AACH;AACD;AACJ;AACA;;;AACIJ,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKK,QAAZ;AACH;AACD;AACJ;AACA;AACA;;;AACIJ,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKK,aAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,MAAM,CAACC,UAAD,EAAa;AAAA;;AAAA;AACrBb,MAAAA,MAAM,CAAC,CAAC,KAAI,CAACO,QAAP,EAAiB,gDAAjB,CAAN;AACA,MAAA,KAAI,CAACA,QAAL,GAAgB,IAAhB;AACA,YAAM,KAAI,CAACC,OAAL,CAAaM,IAAb,CAAkB,6BAAlB,EAAiD;AACnDF,QAAAA,MAAM,EAAE,IAD2C;AAEnDC,QAAAA,UAAU,EAAEA;AAFuC,OAAjD,CAAN;AAHqB;AAOxB;AACD;AACJ;AACA;;;AACUE,EAAAA,OAAO,GAAG;AAAA;;AAAA;AACZf,MAAAA,MAAM,CAAC,CAAC,MAAI,CAACO,QAAP,EAAiB,iDAAjB,CAAN;AACA,MAAA,MAAI,CAACA,QAAL,GAAgB,IAAhB;AACA,YAAM,MAAI,CAACC,OAAL,CAAaM,IAAb,CAAkB,6BAAlB,EAAiD;AACnDF,QAAAA,MAAM,EAAE;AAD2C,OAAjD,CAAN;AAHY;AAMf;;AArDe,C,CAuDpB","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { assert } from './assert.js';\n/**\n * Dialog instances are dispatched by the {@link Page} via the `dialog` event.\n *\n * @remarks\n *\n * @example\n * ```js\n * const puppeteer = require('puppeteer');\n *\n * (async () => {\n *   const browser = await puppeteer.launch();\n *   const page = await browser.newPage();\n *   page.on('dialog', async dialog => {\n *     console.log(dialog.message());\n *     await dialog.dismiss();\n *     await browser.close();\n *   });\n *   page.evaluate(() => alert('1'));\n * })();\n * ```\n * @public\n */\nexport class Dialog {\n    /**\n     * @internal\n     */\n    constructor(client, type, message, defaultValue = '') {\n        this._handled = false;\n        this._client = client;\n        this._type = type;\n        this._message = message;\n        this._defaultValue = defaultValue;\n    }\n    /**\n     * @returns The type of the dialog.\n     */\n    type() {\n        return this._type;\n    }\n    /**\n     * @returns The message displayed in the dialog.\n     */\n    message() {\n        return this._message;\n    }\n    /**\n     * @returns The default value of the prompt, or an empty string if the dialog\n     * is not a `prompt`.\n     */\n    defaultValue() {\n        return this._defaultValue;\n    }\n    /**\n     * @param promptText - optional text that will be entered in the dialog\n     * prompt. Has no effect if the dialog's type is not `prompt`.\n     *\n     * @returns A promise that resolves when the dialog has been accepted.\n     */\n    async accept(promptText) {\n        assert(!this._handled, 'Cannot accept dialog which is already handled!');\n        this._handled = true;\n        await this._client.send('Page.handleJavaScriptDialog', {\n            accept: true,\n            promptText: promptText,\n        });\n    }\n    /**\n     * @returns A promise which will resolve once the dialog has been dismissed\n     */\n    async dismiss() {\n        assert(!this._handled, 'Cannot dismiss dialog which is already handled!');\n        this._handled = true;\n        await this._client.send('Page.handleJavaScriptDialog', {\n            accept: false,\n        });\n    }\n}\n//# sourceMappingURL=Dialog.js.map"]},"metadata":{},"sourceType":"module"}