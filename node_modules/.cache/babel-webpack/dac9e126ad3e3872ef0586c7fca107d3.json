{"ast":null,"code":"import _asyncToGenerator from \"/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ariaHandler } from './AriaQueryHandler.js';\n\nfunction makeQueryHandler(handler) {\n  const internalHandler = {};\n\n  if (handler.queryOne) {\n    internalHandler.queryOne = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (element, selector) {\n        const jsHandle = yield element.evaluateHandle(handler.queryOne, selector);\n        const elementHandle = jsHandle.asElement();\n        if (elementHandle) return elementHandle;\n        yield jsHandle.dispose();\n        return null;\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    internalHandler.waitFor = (domWorld, selector, options) => domWorld.waitForSelectorInPage(handler.queryOne, selector, options);\n  }\n\n  if (handler.queryAll) {\n    internalHandler.queryAll = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (element, selector) {\n        const jsHandle = yield element.evaluateHandle(handler.queryAll, selector);\n        const properties = yield jsHandle.getProperties();\n        yield jsHandle.dispose();\n        const result = [];\n\n        for (const property of properties.values()) {\n          const elementHandle = property.asElement();\n          if (elementHandle) result.push(elementHandle);\n        }\n\n        return result;\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    internalHandler.queryAllArray = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (element, selector) {\n        const resultHandle = yield element.evaluateHandle(handler.queryAll, selector);\n        const arrayHandle = yield resultHandle.evaluateHandle(res => Array.from(res));\n        return arrayHandle;\n      });\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  return internalHandler;\n}\n\nconst _defaultHandler = makeQueryHandler({\n  queryOne: (element, selector) => element.querySelector(selector),\n  queryAll: (element, selector) => element.querySelectorAll(selector)\n});\n\nconst pierceHandler = makeQueryHandler({\n  queryOne: (element, selector) => {\n    let found = null;\n\n    const search = root => {\n      const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n\n      do {\n        const currentNode = iter.currentNode;\n\n        if (currentNode.shadowRoot) {\n          search(currentNode.shadowRoot);\n        }\n\n        if (currentNode instanceof ShadowRoot) {\n          continue;\n        }\n\n        if (!found && currentNode.matches(selector)) {\n          found = currentNode;\n        }\n      } while (!found && iter.nextNode());\n    };\n\n    if (element instanceof Document) {\n      element = element.documentElement;\n    }\n\n    search(element);\n    return found;\n  },\n  queryAll: (element, selector) => {\n    const result = [];\n\n    const collect = root => {\n      const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n\n      do {\n        const currentNode = iter.currentNode;\n\n        if (currentNode.shadowRoot) {\n          collect(currentNode.shadowRoot);\n        }\n\n        if (currentNode instanceof ShadowRoot) {\n          continue;\n        }\n\n        if (currentNode.matches(selector)) {\n          result.push(currentNode);\n        }\n      } while (iter.nextNode());\n    };\n\n    if (element instanceof Document) {\n      element = element.documentElement;\n    }\n\n    collect(element);\n    return result;\n  }\n});\n\nconst _builtInHandlers = new Map([['aria', ariaHandler], ['pierce', pierceHandler]]);\n\nconst _queryHandlers = new Map(_builtInHandlers);\n/**\n * @internal\n */\n\n\nexport function registerCustomQueryHandler(name, handler) {\n  if (_queryHandlers.get(name)) throw new Error(`A custom query handler named \"${name}\" already exists`);\n  const isValidName = /^[a-zA-Z]+$/.test(name);\n  if (!isValidName) throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n  const internalHandler = makeQueryHandler(handler);\n\n  _queryHandlers.set(name, internalHandler);\n}\n/**\n * @internal\n */\n\nexport function unregisterCustomQueryHandler(name) {\n  if (_queryHandlers.has(name) && !_builtInHandlers.has(name)) {\n    _queryHandlers.delete(name);\n  }\n}\n/**\n * @internal\n */\n\nexport function customQueryHandlerNames() {\n  return [..._queryHandlers.keys()].filter(name => !_builtInHandlers.has(name));\n}\n/**\n * @internal\n */\n\nexport function clearCustomQueryHandlers() {\n  customQueryHandlerNames().forEach(unregisterCustomQueryHandler);\n}\n/**\n * @internal\n */\n\nexport function getQueryHandlerAndSelector(selector) {\n  const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n  if (!hasCustomQueryHandler) return {\n    updatedSelector: selector,\n    queryHandler: _defaultHandler\n  };\n  const index = selector.indexOf('/');\n  const name = selector.slice(0, index);\n  const updatedSelector = selector.slice(index + 1);\n\n  const queryHandler = _queryHandlers.get(name);\n\n  if (!queryHandler) throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n  return {\n    updatedSelector,\n    queryHandler\n  };\n} //# sourceMappingURL=QueryHandler.js.map","map":{"version":3,"sources":["/Users/khangtran/Documents/GitHub/FrontEnd/node_modules/puppeteer/lib/esm/puppeteer/common/QueryHandler.js"],"names":["ariaHandler","makeQueryHandler","handler","internalHandler","queryOne","element","selector","jsHandle","evaluateHandle","elementHandle","asElement","dispose","waitFor","domWorld","options","waitForSelectorInPage","queryAll","properties","getProperties","result","property","values","push","queryAllArray","resultHandle","arrayHandle","res","Array","from","_defaultHandler","querySelector","querySelectorAll","pierceHandler","found","search","root","iter","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","currentNode","shadowRoot","ShadowRoot","matches","nextNode","Document","documentElement","collect","_builtInHandlers","Map","_queryHandlers","registerCustomQueryHandler","name","get","Error","isValidName","test","set","unregisterCustomQueryHandler","has","delete","customQueryHandlerNames","keys","filter","clearCustomQueryHandlers","forEach","getQueryHandlerAndSelector","hasCustomQueryHandler","updatedSelector","queryHandler","index","indexOf","slice"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ariaHandler } from './AriaQueryHandler.js';\nfunction makeQueryHandler(handler) {\n    const internalHandler = {};\n    if (handler.queryOne) {\n        internalHandler.queryOne = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(handler.queryOne, selector);\n            const elementHandle = jsHandle.asElement();\n            if (elementHandle)\n                return elementHandle;\n            await jsHandle.dispose();\n            return null;\n        };\n        internalHandler.waitFor = (domWorld, selector, options) => domWorld.waitForSelectorInPage(handler.queryOne, selector, options);\n    }\n    if (handler.queryAll) {\n        internalHandler.queryAll = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(handler.queryAll, selector);\n            const properties = await jsHandle.getProperties();\n            await jsHandle.dispose();\n            const result = [];\n            for (const property of properties.values()) {\n                const elementHandle = property.asElement();\n                if (elementHandle)\n                    result.push(elementHandle);\n            }\n            return result;\n        };\n        internalHandler.queryAllArray = async (element, selector) => {\n            const resultHandle = await element.evaluateHandle(handler.queryAll, selector);\n            const arrayHandle = await resultHandle.evaluateHandle((res) => Array.from(res));\n            return arrayHandle;\n        };\n    }\n    return internalHandler;\n}\nconst _defaultHandler = makeQueryHandler({\n    queryOne: (element, selector) => element.querySelector(selector),\n    queryAll: (element, selector) => element.querySelectorAll(selector),\n});\nconst pierceHandler = makeQueryHandler({\n    queryOne: (element, selector) => {\n        let found = null;\n        const search = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    search(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (!found && currentNode.matches(selector)) {\n                    found = currentNode;\n                }\n            } while (!found && iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        search(element);\n        return found;\n    },\n    queryAll: (element, selector) => {\n        const result = [];\n        const collect = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    collect(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (currentNode.matches(selector)) {\n                    result.push(currentNode);\n                }\n            } while (iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        collect(element);\n        return result;\n    },\n});\nconst _builtInHandlers = new Map([\n    ['aria', ariaHandler],\n    ['pierce', pierceHandler],\n]);\nconst _queryHandlers = new Map(_builtInHandlers);\n/**\n * @internal\n */\nexport function registerCustomQueryHandler(name, handler) {\n    if (_queryHandlers.get(name))\n        throw new Error(`A custom query handler named \"${name}\" already exists`);\n    const isValidName = /^[a-zA-Z]+$/.test(name);\n    if (!isValidName)\n        throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n    const internalHandler = makeQueryHandler(handler);\n    _queryHandlers.set(name, internalHandler);\n}\n/**\n * @internal\n */\nexport function unregisterCustomQueryHandler(name) {\n    if (_queryHandlers.has(name) && !_builtInHandlers.has(name)) {\n        _queryHandlers.delete(name);\n    }\n}\n/**\n * @internal\n */\nexport function customQueryHandlerNames() {\n    return [..._queryHandlers.keys()].filter((name) => !_builtInHandlers.has(name));\n}\n/**\n * @internal\n */\nexport function clearCustomQueryHandlers() {\n    customQueryHandlerNames().forEach(unregisterCustomQueryHandler);\n}\n/**\n * @internal\n */\nexport function getQueryHandlerAndSelector(selector) {\n    const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n    if (!hasCustomQueryHandler)\n        return { updatedSelector: selector, queryHandler: _defaultHandler };\n    const index = selector.indexOf('/');\n    const name = selector.slice(0, index);\n    const updatedSelector = selector.slice(index + 1);\n    const queryHandler = _queryHandlers.get(name);\n    if (!queryHandler)\n        throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n    return {\n        updatedSelector,\n        queryHandler,\n    };\n}\n//# sourceMappingURL=QueryHandler.js.map"]},"metadata":{},"sourceType":"module"}